{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\nimport PropTypes from 'prop-types';\nimport addOneClass from 'dom-helpers/addClass';\nimport removeOneClass from 'dom-helpers/removeClass';\nimport React from 'react';\nimport Transition from './Transition';\nimport { classNamesShape } from './utils/PropTypes';\n\nvar _addClass = function addClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return addOneClass(node, c);\n  });\n};\n\nvar removeClass = function removeClass(node, classes) {\n  return node && classes && classes.split(' ').forEach(function (c) {\n    return removeOneClass(node, c);\n  });\n};\n/**\r\n * A transition component inspired by the excellent\r\n * [ng-animate](http://www.nganimate.org/) library, you should use it if you're\r\n * using CSS transitions or animations. It's built upon the\r\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\r\n * component, so it inherits all of its props.\r\n *\r\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\r\n * and `exit` states of the transition. The first class is applied and then a\r\n * second `*-active` class in order to activate the CSS transition. After the\r\n * transition, matching `*-done` class names are applied to persist the\r\n * transition state.\r\n *\r\n * ```jsx\r\n * function App() {\r\n *   const [inProp, setInProp] = useState(false);\r\n *   return (\r\n *     <div>\r\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\r\n *         <div>\r\n *           {\"I'll receive my-node-* classes\"}\r\n *         </div>\r\n *       </CSSTransition>\r\n *       <button type=\"button\" onClick={() => setInProp(true)}>\r\n *         Click to Enter\r\n *       </button>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n *\r\n * When the `in` prop is set to `true`, the child component will first receive\r\n * the class `example-enter`, then the `example-enter-active` will be added in\r\n * the next tick. `CSSTransition` [forces a\r\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\r\n * between before adding the `example-enter-active`. This is an important trick\r\n * because it allows us to transition between `example-enter` and\r\n * `example-enter-active` even though they were added immediately one after\r\n * another. Most notably, this is what makes it possible for us to animate\r\n * _appearance_.\r\n *\r\n * ```css\r\n * .my-node-enter {\r\n *   opacity: 0;\r\n * }\r\n * .my-node-enter-active {\r\n *   opacity: 1;\r\n *   transition: opacity 200ms;\r\n * }\r\n * .my-node-exit {\r\n *   opacity: 1;\r\n * }\r\n * .my-node-exit-active {\r\n *   opacity: 0;\r\n *   transition: opacity 200ms;\r\n * }\r\n * ```\r\n *\r\n * `*-active` classes represent which styles you want to animate **to**.\r\n *\r\n * **Note**: If you're using the\r\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\r\n * prop, make sure to define styles for `.appear-*` classes as well.\r\n */\n\n\nvar CSSTransition = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSTransition, _React$Component);\n\n  function CSSTransition() {\n    var _this;\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\n    _this.appliedClasses = {\n      appear: {},\n      enter: {},\n      exit: {}\n    };\n\n    _this.onEnter = function (node, appearing) {\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\n\n      if (_this.props.onEnter) {\n        _this.props.onEnter(node, appearing);\n      }\n    };\n\n    _this.onEntering = function (node, appearing) {\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.addClass(node, type, 'active');\n\n      if (_this.props.onEntering) {\n        _this.props.onEntering(node, appearing);\n      }\n    };\n\n    _this.onEntered = function (node, appearing) {\n      var type = appearing ? 'appear' : 'enter';\n\n      _this.removeClasses(node, type);\n\n      _this.addClass(node, type, 'done');\n\n      if (_this.props.onEntered) {\n        _this.props.onEntered(node, appearing);\n      }\n    };\n\n    _this.onExit = function (node) {\n      _this.removeClasses(node, 'appear');\n\n      _this.removeClasses(node, 'enter');\n\n      _this.addClass(node, 'exit', 'base');\n\n      if (_this.props.onExit) {\n        _this.props.onExit(node);\n      }\n    };\n\n    _this.onExiting = function (node) {\n      _this.addClass(node, 'exit', 'active');\n\n      if (_this.props.onExiting) {\n        _this.props.onExiting(node);\n      }\n    };\n\n    _this.onExited = function (node) {\n      _this.removeClasses(node, 'exit');\n\n      _this.addClass(node, 'exit', 'done');\n\n      if (_this.props.onExited) {\n        _this.props.onExited(node);\n      }\n    };\n\n    _this.getClassNames = function (type) {\n      var classNames = _this.props.classNames;\n      var isStringClassNames = typeof classNames === 'string';\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\n      return {\n        baseClassName: baseClassName,\n        activeClassName: activeClassName,\n        doneClassName: doneClassName\n      };\n    };\n\n    return _this;\n  }\n\n  var _proto = CSSTransition.prototype;\n\n  _proto.addClass = function addClass(node, type, phase) {\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\n\n    if (type === 'appear' && phase === 'done') {\n      className += \" \" + this.getClassNames('enter').doneClassName;\n    } // This is for to force a repaint,\n    // which is necessary in order to transition styles when adding a class name.\n\n\n    if (phase === 'active') {\n      /* eslint-disable no-unused-expressions */\n      node && node.scrollTop;\n    }\n\n    this.appliedClasses[type][phase] = className;\n\n    _addClass(node, className);\n  };\n\n  _proto.removeClasses = function removeClasses(node, type) {\n    var _this$appliedClasses$ = this.appliedClasses[type],\n        baseClassName = _this$appliedClasses$.base,\n        activeClassName = _this$appliedClasses$.active,\n        doneClassName = _this$appliedClasses$.done;\n    this.appliedClasses[type] = {};\n\n    if (baseClassName) {\n      removeClass(node, baseClassName);\n    }\n\n    if (activeClassName) {\n      removeClass(node, activeClassName);\n    }\n\n    if (doneClassName) {\n      removeClass(node, doneClassName);\n    }\n  };\n\n  _proto.render = function render() {\n    var _this$props = this.props,\n        _ = _this$props.classNames,\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\n\n    return React.createElement(Transition, _extends({}, props, {\n      onEnter: this.onEnter,\n      onEntered: this.onEntered,\n      onEntering: this.onEntering,\n      onExit: this.onExit,\n      onExiting: this.onExiting,\n      onExited: this.onExited\n    }));\n  };\n\n  return CSSTransition;\n}(React.Component);\n\nCSSTransition.defaultProps = {\n  classNames: ''\n};\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\n  /**\r\n   * The animation classNames applied to the component as it appears, enters,\r\n   * exits or has finished the transition. A single name can be provided and it\r\n   * will be suffixed for each stage: e.g.\r\n   *\r\n   * `classNames=\"fade\"` applies `fade-appear`, `fade-appear-active`,\r\n   * `fade-appear-done`, `fade-enter`, `fade-enter-active`, `fade-enter-done`,\r\n   * `fade-exit`, `fade-exit-active`, and `fade-exit-done`.\r\n   *\r\n   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.\r\n   * This allows you to define different behavior for when appearing is done and\r\n   * when regular entering is done, using selectors like\r\n   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an\r\n   * epic entrance animation when element first appears in the DOM using\r\n   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\r\n   * simply use `fade-enter-done` for defining both cases.\r\n   *\r\n   * Each individual classNames can also be specified independently like:\r\n   *\r\n   * ```js\r\n   * classNames={{\r\n   *  appear: 'my-appear',\r\n   *  appearActive: 'my-active-appear',\r\n   *  appearDone: 'my-done-appear',\r\n   *  enter: 'my-enter',\r\n   *  enterActive: 'my-active-enter',\r\n   *  enterDone: 'my-done-enter',\r\n   *  exit: 'my-exit',\r\n   *  exitActive: 'my-active-exit',\r\n   *  exitDone: 'my-done-exit',\r\n   * }}\r\n   * ```\r\n   *\r\n   * If you want to set these classes using CSS Modules:\r\n   *\r\n   * ```js\r\n   * import styles from './styles.css';\r\n   * ```\r\n   *\r\n   * you might want to use camelCase in your CSS file, that way could simply\r\n   * spread them instead of listing them one by one:\r\n   *\r\n   * ```js\r\n   * classNames={{ ...styles }}\r\n   * ```\r\n   *\r\n   * @type {string | {\r\n   *  appear?: string,\r\n   *  appearActive?: string,\r\n   *  appearDone?: string,\r\n   *  enter?: string,\r\n   *  enterActive?: string,\r\n   *  enterDone?: string,\r\n   *  exit?: string,\r\n   *  exitActive?: string,\r\n   *  exitDone?: string,\r\n   * }}\r\n   */\n  classNames: classNamesShape,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\r\n   * applied.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\n  onEnter: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\r\n   * 'appear-active' class is applied.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\n  onEntering: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter' or\r\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\n  onEntered: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit' class is\r\n   * applied.\r\n   *\r\n   * @type Function(node: HtmlElement)\r\n   */\n  onExit: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\r\n   *\r\n   * @type Function(node: HtmlElement)\r\n   */\n  onExiting: PropTypes.func,\n\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit' classes\r\n   * are **removed** and the `exit-done` class is added to the DOM node.\r\n   *\r\n   * @type Function(node: HtmlElement)\r\n   */\n  onExited: PropTypes.func\n}) : {};\nexport default CSSTransition;","map":{"version":3,"sources":["C:/Users/USER/Documents/6 sem/6s-proj/e17-co328-NGS-Data-AnalysingToolkit/frontend/NGS-tool/node_modules/mdbreact/node_modules/react-transition-group/esm/CSSTransition.js"],"names":["_extends","_objectWithoutPropertiesLoose","_inheritsLoose","PropTypes","addOneClass","removeOneClass","React","Transition","classNamesShape","_addClass","addClass","node","classes","split","forEach","c","removeClass","CSSTransition","_React$Component","_this","_len","arguments","length","args","Array","_key","call","apply","concat","appliedClasses","appear","enter","exit","onEnter","appearing","removeClasses","props","onEntering","type","onEntered","onExit","onExiting","onExited","getClassNames","classNames","isStringClassNames","prefix","baseClassName","activeClassName","doneClassName","_proto","prototype","phase","className","scrollTop","_this$appliedClasses$","base","active","done","render","_this$props","_","createElement","Component","defaultProps","propTypes","process","env","NODE_ENV","func"],"mappings":"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pE,QAAQ,CAAC,EAAD,EAAKO,UAAU,CAAC0D,SAAhB,EAA2B;AACnG;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACErB,EAAAA,UAAU,EAAEpC,eA3DuF;;AA6DnG;AACF;AACA;AACA;AACA;AACA;AACEyB,EAAAA,OAAO,EAAE9B,SAAS,CAACkE,IAnEgF;;AAqEnG;AACF;AACA;AACA;AACA;AACA;AACEhC,EAAAA,UAAU,EAAElC,SAAS,CAACkE,IA3E6E;;AA6EnG;AACF;AACA;AACA;AACA;AACA;AACE9B,EAAAA,SAAS,EAAEpC,SAAS,CAACkE,IAnF8E;;AAqFnG;AACF;AACA;AACA;AACA;AACA;AACE7B,EAAAA,MAAM,EAAErC,SAAS,CAACkE,IA3FiF;;AA6FnG;AACF;AACA;AACA;AACA;AACE5B,EAAAA,SAAS,EAAEtC,SAAS,CAACkE,IAlG8E;;AAoGnG;AACF;AACA;AACA;AACA;AACA;AACE3B,EAAAA,QAAQ,EAAEvC,SAAS,CAACkE;AA1G+E,CAA3B,CAAhD,GA2GrB,EA3GL;AA4GA,eAAepD,aAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport _inheritsLoose from \"@babel/runtime/helpers/esm/inheritsLoose\";\r\nimport PropTypes from 'prop-types';\r\nimport addOneClass from 'dom-helpers/addClass';\r\nimport removeOneClass from 'dom-helpers/removeClass';\r\nimport React from 'react';\r\nimport Transition from './Transition';\r\nimport { classNamesShape } from './utils/PropTypes';\r\n\r\nvar _addClass = function addClass(node, classes) {\r\n  return node && classes && classes.split(' ').forEach(function (c) {\r\n    return addOneClass(node, c);\r\n  });\r\n};\r\n\r\nvar removeClass = function removeClass(node, classes) {\r\n  return node && classes && classes.split(' ').forEach(function (c) {\r\n    return removeOneClass(node, c);\r\n  });\r\n};\r\n/**\r\n * A transition component inspired by the excellent\r\n * [ng-animate](http://www.nganimate.org/) library, you should use it if you're\r\n * using CSS transitions or animations. It's built upon the\r\n * [`Transition`](https://reactcommunity.org/react-transition-group/transition)\r\n * component, so it inherits all of its props.\r\n *\r\n * `CSSTransition` applies a pair of class names during the `appear`, `enter`,\r\n * and `exit` states of the transition. The first class is applied and then a\r\n * second `*-active` class in order to activate the CSS transition. After the\r\n * transition, matching `*-done` class names are applied to persist the\r\n * transition state.\r\n *\r\n * ```jsx\r\n * function App() {\r\n *   const [inProp, setInProp] = useState(false);\r\n *   return (\r\n *     <div>\r\n *       <CSSTransition in={inProp} timeout={200} classNames=\"my-node\">\r\n *         <div>\r\n *           {\"I'll receive my-node-* classes\"}\r\n *         </div>\r\n *       </CSSTransition>\r\n *       <button type=\"button\" onClick={() => setInProp(true)}>\r\n *         Click to Enter\r\n *       </button>\r\n *     </div>\r\n *   );\r\n * }\r\n * ```\r\n *\r\n * When the `in` prop is set to `true`, the child component will first receive\r\n * the class `example-enter`, then the `example-enter-active` will be added in\r\n * the next tick. `CSSTransition` [forces a\r\n * reflow](https://github.com/reactjs/react-transition-group/blob/5007303e729a74be66a21c3e2205e4916821524b/src/CSSTransition.js#L208-L215)\r\n * between before adding the `example-enter-active`. This is an important trick\r\n * because it allows us to transition between `example-enter` and\r\n * `example-enter-active` even though they were added immediately one after\r\n * another. Most notably, this is what makes it possible for us to animate\r\n * _appearance_.\r\n *\r\n * ```css\r\n * .my-node-enter {\r\n *   opacity: 0;\r\n * }\r\n * .my-node-enter-active {\r\n *   opacity: 1;\r\n *   transition: opacity 200ms;\r\n * }\r\n * .my-node-exit {\r\n *   opacity: 1;\r\n * }\r\n * .my-node-exit-active {\r\n *   opacity: 0;\r\n *   transition: opacity 200ms;\r\n * }\r\n * ```\r\n *\r\n * `*-active` classes represent which styles you want to animate **to**.\r\n *\r\n * **Note**: If you're using the\r\n * [`appear`](http://reactcommunity.org/react-transition-group/transition#Transition-prop-appear)\r\n * prop, make sure to define styles for `.appear-*` classes as well.\r\n */\r\n\r\n\r\nvar CSSTransition =\r\n/*#__PURE__*/\r\nfunction (_React$Component) {\r\n  _inheritsLoose(CSSTransition, _React$Component);\r\n\r\n  function CSSTransition() {\r\n    var _this;\r\n\r\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\r\n      args[_key] = arguments[_key];\r\n    }\r\n\r\n    _this = _React$Component.call.apply(_React$Component, [this].concat(args)) || this;\r\n    _this.appliedClasses = {\r\n      appear: {},\r\n      enter: {},\r\n      exit: {}\r\n    };\r\n\r\n    _this.onEnter = function (node, appearing) {\r\n      _this.removeClasses(node, 'exit');\r\n\r\n      _this.addClass(node, appearing ? 'appear' : 'enter', 'base');\r\n\r\n      if (_this.props.onEnter) {\r\n        _this.props.onEnter(node, appearing);\r\n      }\r\n    };\r\n\r\n    _this.onEntering = function (node, appearing) {\r\n      var type = appearing ? 'appear' : 'enter';\r\n\r\n      _this.addClass(node, type, 'active');\r\n\r\n      if (_this.props.onEntering) {\r\n        _this.props.onEntering(node, appearing);\r\n      }\r\n    };\r\n\r\n    _this.onEntered = function (node, appearing) {\r\n      var type = appearing ? 'appear' : 'enter';\r\n\r\n      _this.removeClasses(node, type);\r\n\r\n      _this.addClass(node, type, 'done');\r\n\r\n      if (_this.props.onEntered) {\r\n        _this.props.onEntered(node, appearing);\r\n      }\r\n    };\r\n\r\n    _this.onExit = function (node) {\r\n      _this.removeClasses(node, 'appear');\r\n\r\n      _this.removeClasses(node, 'enter');\r\n\r\n      _this.addClass(node, 'exit', 'base');\r\n\r\n      if (_this.props.onExit) {\r\n        _this.props.onExit(node);\r\n      }\r\n    };\r\n\r\n    _this.onExiting = function (node) {\r\n      _this.addClass(node, 'exit', 'active');\r\n\r\n      if (_this.props.onExiting) {\r\n        _this.props.onExiting(node);\r\n      }\r\n    };\r\n\r\n    _this.onExited = function (node) {\r\n      _this.removeClasses(node, 'exit');\r\n\r\n      _this.addClass(node, 'exit', 'done');\r\n\r\n      if (_this.props.onExited) {\r\n        _this.props.onExited(node);\r\n      }\r\n    };\r\n\r\n    _this.getClassNames = function (type) {\r\n      var classNames = _this.props.classNames;\r\n      var isStringClassNames = typeof classNames === 'string';\r\n      var prefix = isStringClassNames && classNames ? classNames + \"-\" : '';\r\n      var baseClassName = isStringClassNames ? \"\" + prefix + type : classNames[type];\r\n      var activeClassName = isStringClassNames ? baseClassName + \"-active\" : classNames[type + \"Active\"];\r\n      var doneClassName = isStringClassNames ? baseClassName + \"-done\" : classNames[type + \"Done\"];\r\n      return {\r\n        baseClassName: baseClassName,\r\n        activeClassName: activeClassName,\r\n        doneClassName: doneClassName\r\n      };\r\n    };\r\n\r\n    return _this;\r\n  }\r\n\r\n  var _proto = CSSTransition.prototype;\r\n\r\n  _proto.addClass = function addClass(node, type, phase) {\r\n    var className = this.getClassNames(type)[phase + \"ClassName\"];\r\n\r\n    if (type === 'appear' && phase === 'done') {\r\n      className += \" \" + this.getClassNames('enter').doneClassName;\r\n    } // This is for to force a repaint,\r\n    // which is necessary in order to transition styles when adding a class name.\r\n\r\n\r\n    if (phase === 'active') {\r\n      /* eslint-disable no-unused-expressions */\r\n      node && node.scrollTop;\r\n    }\r\n\r\n    this.appliedClasses[type][phase] = className;\r\n\r\n    _addClass(node, className);\r\n  };\r\n\r\n  _proto.removeClasses = function removeClasses(node, type) {\r\n    var _this$appliedClasses$ = this.appliedClasses[type],\r\n        baseClassName = _this$appliedClasses$.base,\r\n        activeClassName = _this$appliedClasses$.active,\r\n        doneClassName = _this$appliedClasses$.done;\r\n    this.appliedClasses[type] = {};\r\n\r\n    if (baseClassName) {\r\n      removeClass(node, baseClassName);\r\n    }\r\n\r\n    if (activeClassName) {\r\n      removeClass(node, activeClassName);\r\n    }\r\n\r\n    if (doneClassName) {\r\n      removeClass(node, doneClassName);\r\n    }\r\n  };\r\n\r\n  _proto.render = function render() {\r\n    var _this$props = this.props,\r\n        _ = _this$props.classNames,\r\n        props = _objectWithoutPropertiesLoose(_this$props, [\"classNames\"]);\r\n\r\n    return React.createElement(Transition, _extends({}, props, {\r\n      onEnter: this.onEnter,\r\n      onEntered: this.onEntered,\r\n      onEntering: this.onEntering,\r\n      onExit: this.onExit,\r\n      onExiting: this.onExiting,\r\n      onExited: this.onExited\r\n    }));\r\n  };\r\n\r\n  return CSSTransition;\r\n}(React.Component);\r\n\r\nCSSTransition.defaultProps = {\r\n  classNames: ''\r\n};\r\nCSSTransition.propTypes = process.env.NODE_ENV !== \"production\" ? _extends({}, Transition.propTypes, {\r\n  /**\r\n   * The animation classNames applied to the component as it appears, enters,\r\n   * exits or has finished the transition. A single name can be provided and it\r\n   * will be suffixed for each stage: e.g.\r\n   *\r\n   * `classNames=\"fade\"` applies `fade-appear`, `fade-appear-active`,\r\n   * `fade-appear-done`, `fade-enter`, `fade-enter-active`, `fade-enter-done`,\r\n   * `fade-exit`, `fade-exit-active`, and `fade-exit-done`.\r\n   *\r\n   * **Note**: `fade-appear-done` and `fade-enter-done` will _both_ be applied.\r\n   * This allows you to define different behavior for when appearing is done and\r\n   * when regular entering is done, using selectors like\r\n   * `.fade-enter-done:not(.fade-appear-done)`. For example, you could apply an\r\n   * epic entrance animation when element first appears in the DOM using\r\n   * [Animate.css](https://daneden.github.io/animate.css/). Otherwise you can\r\n   * simply use `fade-enter-done` for defining both cases.\r\n   *\r\n   * Each individual classNames can also be specified independently like:\r\n   *\r\n   * ```js\r\n   * classNames={{\r\n   *  appear: 'my-appear',\r\n   *  appearActive: 'my-active-appear',\r\n   *  appearDone: 'my-done-appear',\r\n   *  enter: 'my-enter',\r\n   *  enterActive: 'my-active-enter',\r\n   *  enterDone: 'my-done-enter',\r\n   *  exit: 'my-exit',\r\n   *  exitActive: 'my-active-exit',\r\n   *  exitDone: 'my-done-exit',\r\n   * }}\r\n   * ```\r\n   *\r\n   * If you want to set these classes using CSS Modules:\r\n   *\r\n   * ```js\r\n   * import styles from './styles.css';\r\n   * ```\r\n   *\r\n   * you might want to use camelCase in your CSS file, that way could simply\r\n   * spread them instead of listing them one by one:\r\n   *\r\n   * ```js\r\n   * classNames={{ ...styles }}\r\n   * ```\r\n   *\r\n   * @type {string | {\r\n   *  appear?: string,\r\n   *  appearActive?: string,\r\n   *  appearDone?: string,\r\n   *  enter?: string,\r\n   *  enterActive?: string,\r\n   *  enterDone?: string,\r\n   *  exit?: string,\r\n   *  exitActive?: string,\r\n   *  exitDone?: string,\r\n   * }}\r\n   */\r\n  classNames: classNamesShape,\r\n\r\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter' or 'appear' class is\r\n   * applied.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\r\n  onEnter: PropTypes.func,\r\n\r\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter-active' or\r\n   * 'appear-active' class is applied.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\r\n  onEntering: PropTypes.func,\r\n\r\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'enter' or\r\n   * 'appear' classes are **removed** and the `done` class is added to the DOM node.\r\n   *\r\n   * @type Function(node: HtmlElement, isAppearing: bool)\r\n   */\r\n  onEntered: PropTypes.func,\r\n\r\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit' class is\r\n   * applied.\r\n   *\r\n   * @type Function(node: HtmlElement)\r\n   */\r\n  onExit: PropTypes.func,\r\n\r\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit-active' is applied.\r\n   *\r\n   * @type Function(node: HtmlElement)\r\n   */\r\n  onExiting: PropTypes.func,\r\n\r\n  /**\r\n   * A `<Transition>` callback fired immediately after the 'exit' classes\r\n   * are **removed** and the `exit-done` class is added to the DOM node.\r\n   *\r\n   * @type Function(node: HtmlElement)\r\n   */\r\n  onExited: PropTypes.func\r\n}) : {};\r\nexport default CSSTransition;"]},"metadata":{},"sourceType":"module"}
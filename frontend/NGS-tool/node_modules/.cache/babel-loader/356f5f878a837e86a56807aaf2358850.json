{"ast":null,"code":"/*\r\n  Module dependencies\r\n*/\nvar ElementType = require('domelementtype');\n\nvar entities = require('entities');\n/* mixed-case SVG and MathML tags & attributes\r\n   recognized by the HTML parser, see\r\n   https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\r\n*/\n\n\nvar foreignNames = require('./foreignNames.json');\n\nforeignNames.elementNames.__proto__ = null;\n/* use as a simple dictionary */\n\nforeignNames.attributeNames.__proto__ = null;\nvar unencodedElements = {\n  __proto__: null,\n  style: true,\n  script: true,\n  xmp: true,\n  iframe: true,\n  noembed: true,\n  noframes: true,\n  plaintext: true,\n  noscript: true\n};\n/*\r\n  Format attributes\r\n*/\n\nfunction formatAttrs(attributes, opts) {\n  if (!attributes) return;\n  var output = '';\n  var value; // Loop through the attributes\n\n  for (var key in attributes) {\n    value = attributes[key];\n\n    if (output) {\n      output += ' ';\n    }\n\n    if (opts.xmlMode === 'foreign') {\n      /* fix up mixed-case attribute names */\n      key = foreignNames.attributeNames[key] || key;\n    }\n\n    output += key;\n\n    if (value !== null && value !== '' || opts.xmlMode) {\n      output += '=\"' + (opts.decodeEntities ? entities.encodeXML(value) : value.replace(/\\\"/g, '&quot;')) + '\"';\n    }\n  }\n\n  return output;\n}\n/*\r\n  Self-enclosing tags (stolen from node-htmlparser)\r\n*/\n\n\nvar singleTag = {\n  __proto__: null,\n  area: true,\n  base: true,\n  basefont: true,\n  br: true,\n  col: true,\n  command: true,\n  embed: true,\n  frame: true,\n  hr: true,\n  img: true,\n  input: true,\n  isindex: true,\n  keygen: true,\n  link: true,\n  meta: true,\n  param: true,\n  source: true,\n  track: true,\n  wbr: true\n};\n\nvar render = module.exports = function (dom, opts) {\n  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];\n  opts = opts || {};\n  var output = '';\n\n  for (var i = 0; i < dom.length; i++) {\n    var elem = dom[i];\n    if (elem.type === 'root') output += render(elem.children, opts);else if (ElementType.isTag(elem)) output += renderTag(elem, opts);else if (elem.type === ElementType.Directive) output += renderDirective(elem);else if (elem.type === ElementType.Comment) output += renderComment(elem);else if (elem.type === ElementType.CDATA) output += renderCdata(elem);else output += renderText(elem, opts);\n  }\n\n  return output;\n};\n\nvar foreignModeIntegrationPoints = ['mi', 'mo', 'mn', 'ms', 'mtext', 'annotation-xml', 'foreignObject', 'desc', 'title'];\n\nfunction renderTag(elem, opts) {\n  // Handle SVG / MathML in HTML\n  if (opts.xmlMode === 'foreign') {\n    /* fix up mixed-case element names */\n    elem.name = foreignNames.elementNames[elem.name] || elem.name;\n    /* exit foreign mode at integration points */\n\n    if (elem.parent && foreignModeIntegrationPoints.indexOf(elem.parent.name) >= 0) opts = Object.assign({}, opts, {\n      xmlMode: false\n    });\n  }\n\n  if (!opts.xmlMode && ['svg', 'math'].indexOf(elem.name) >= 0) {\n    opts = Object.assign({}, opts, {\n      xmlMode: 'foreign'\n    });\n  }\n\n  var tag = '<' + elem.name;\n  var attribs = formatAttrs(elem.attribs, opts);\n\n  if (attribs) {\n    tag += ' ' + attribs;\n  }\n\n  if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {\n    tag += '/>';\n  } else {\n    tag += '>';\n\n    if (elem.children) {\n      tag += render(elem.children, opts);\n    }\n\n    if (!singleTag[elem.name] || opts.xmlMode) {\n      tag += '</' + elem.name + '>';\n    }\n  }\n\n  return tag;\n}\n\nfunction renderDirective(elem) {\n  return '<' + elem.data + '>';\n}\n\nfunction renderText(elem, opts) {\n  var data = elem.data || ''; // if entities weren't decoded, no need to encode them back\n\n  if (opts.decodeEntities && !(elem.parent && elem.parent.name in unencodedElements)) {\n    data = entities.encodeXML(data);\n  }\n\n  return data;\n}\n\nfunction renderCdata(elem) {\n  return '<![CDATA[' + elem.children[0].data + ']]>';\n}\n\nfunction renderComment(elem) {\n  return '<!--' + elem.data + '-->';\n}","map":{"version":3,"sources":["C:/Users/USER/Documents/6 sem/6s-proj/e17-co328-NGS-Data-AnalysingToolkit/frontend/NGS-tool/node_modules/react-html-parser/node_modules/dom-serializer/index.js"],"names":["ElementType","require","entities","foreignNames","elementNames","__proto__","attributeNames","unencodedElements","style","script","xmp","iframe","noembed","noframes","plaintext","noscript","formatAttrs","attributes","opts","output","value","key","xmlMode","decodeEntities","encodeXML","replace","singleTag","area","base","basefont","br","col","command","embed","frame","hr","img","input","isindex","keygen","link","meta","param","source","track","wbr","render","module","exports","dom","Array","isArray","cheerio","i","length","elem","type","children","isTag","renderTag","Directive","renderDirective","Comment","renderComment","CDATA","renderCdata","renderText","foreignModeIntegrationPoints","name","parent","indexOf","Object","assign","tag","attribs","data"],"mappings":"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","sourcesContent":["/*\r\n  Module dependencies\r\n*/\r\nvar ElementType = require('domelementtype');\r\nvar entities = require('entities');\r\n\r\n/* mixed-case SVG and MathML tags & attributes\r\n   recognized by the HTML parser, see\r\n   https://html.spec.whatwg.org/multipage/parsing.html#parsing-main-inforeign\r\n*/\r\nvar foreignNames = require('./foreignNames.json');\r\nforeignNames.elementNames.__proto__ = null; /* use as a simple dictionary */\r\nforeignNames.attributeNames.__proto__ = null;\r\n\r\nvar unencodedElements = {\r\n  __proto__: null,\r\n  style: true,\r\n  script: true,\r\n  xmp: true,\r\n  iframe: true,\r\n  noembed: true,\r\n  noframes: true,\r\n  plaintext: true,\r\n  noscript: true\r\n};\r\n\r\n/*\r\n  Format attributes\r\n*/\r\nfunction formatAttrs(attributes, opts) {\r\n  if (!attributes) return;\r\n\r\n  var output = '';\r\n  var value;\r\n\r\n  // Loop through the attributes\r\n  for (var key in attributes) {\r\n    value = attributes[key];\r\n    if (output) {\r\n      output += ' ';\r\n    }\r\n\r\n    if (opts.xmlMode === 'foreign') {\r\n      /* fix up mixed-case attribute names */\r\n      key = foreignNames.attributeNames[key] || key;\r\n    }\r\n    output += key;\r\n    if ((value !== null && value !== '') || opts.xmlMode) {\r\n      output +=\r\n        '=\"' +\r\n        (opts.decodeEntities\r\n          ? entities.encodeXML(value)\r\n          : value.replace(/\\\"/g, '&quot;')) +\r\n        '\"';\r\n    }\r\n  }\r\n\r\n  return output;\r\n}\r\n\r\n/*\r\n  Self-enclosing tags (stolen from node-htmlparser)\r\n*/\r\nvar singleTag = {\r\n  __proto__: null,\r\n  area: true,\r\n  base: true,\r\n  basefont: true,\r\n  br: true,\r\n  col: true,\r\n  command: true,\r\n  embed: true,\r\n  frame: true,\r\n  hr: true,\r\n  img: true,\r\n  input: true,\r\n  isindex: true,\r\n  keygen: true,\r\n  link: true,\r\n  meta: true,\r\n  param: true,\r\n  source: true,\r\n  track: true,\r\n  wbr: true\r\n};\r\n\r\nvar render = (module.exports = function(dom, opts) {\r\n  if (!Array.isArray(dom) && !dom.cheerio) dom = [dom];\r\n  opts = opts || {};\r\n\r\n  var output = '';\r\n\r\n  for (var i = 0; i < dom.length; i++) {\r\n    var elem = dom[i];\r\n\r\n    if (elem.type === 'root') output += render(elem.children, opts);\r\n    else if (ElementType.isTag(elem)) output += renderTag(elem, opts);\r\n    else if (elem.type === ElementType.Directive)\r\n      output += renderDirective(elem);\r\n    else if (elem.type === ElementType.Comment) output += renderComment(elem);\r\n    else if (elem.type === ElementType.CDATA) output += renderCdata(elem);\r\n    else output += renderText(elem, opts);\r\n  }\r\n\r\n  return output;\r\n});\r\n\r\nvar foreignModeIntegrationPoints = [\r\n  'mi',\r\n  'mo',\r\n  'mn',\r\n  'ms',\r\n  'mtext',\r\n  'annotation-xml',\r\n  'foreignObject',\r\n  'desc',\r\n  'title'\r\n];\r\n\r\nfunction renderTag(elem, opts) {\r\n  // Handle SVG / MathML in HTML\r\n  if (opts.xmlMode === 'foreign') {\r\n    /* fix up mixed-case element names */\r\n    elem.name = foreignNames.elementNames[elem.name] || elem.name;\r\n    /* exit foreign mode at integration points */\r\n    if (\r\n      elem.parent &&\r\n      foreignModeIntegrationPoints.indexOf(elem.parent.name) >= 0\r\n    )\r\n      opts = Object.assign({}, opts, { xmlMode: false });\r\n  }\r\n  if (!opts.xmlMode && ['svg', 'math'].indexOf(elem.name) >= 0) {\r\n    opts = Object.assign({}, opts, { xmlMode: 'foreign' });\r\n  }\r\n\r\n  var tag = '<' + elem.name;\r\n  var attribs = formatAttrs(elem.attribs, opts);\r\n\r\n  if (attribs) {\r\n    tag += ' ' + attribs;\r\n  }\r\n\r\n  if (opts.xmlMode && (!elem.children || elem.children.length === 0)) {\r\n    tag += '/>';\r\n  } else {\r\n    tag += '>';\r\n    if (elem.children) {\r\n      tag += render(elem.children, opts);\r\n    }\r\n\r\n    if (!singleTag[elem.name] || opts.xmlMode) {\r\n      tag += '</' + elem.name + '>';\r\n    }\r\n  }\r\n\r\n  return tag;\r\n}\r\n\r\nfunction renderDirective(elem) {\r\n  return '<' + elem.data + '>';\r\n}\r\n\r\nfunction renderText(elem, opts) {\r\n  var data = elem.data || '';\r\n\r\n  // if entities weren't decoded, no need to encode them back\r\n  if (\r\n    opts.decodeEntities &&\r\n    !(elem.parent && elem.parent.name in unencodedElements)\r\n  ) {\r\n    data = entities.encodeXML(data);\r\n  }\r\n\r\n  return data;\r\n}\r\n\r\nfunction renderCdata(elem) {\r\n  return '<![CDATA[' + elem.children[0].data + ']]>';\r\n}\r\n\r\nfunction renderComment(elem) {\r\n  return '<!--' + elem.data + '-->';\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
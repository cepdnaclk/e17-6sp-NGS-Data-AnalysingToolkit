{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;\n/** Types of elements found in htmlparser2's DOM */\n\nvar ElementType;\n\n(function (ElementType) {\n  /** Type for the root element of a document */\n  ElementType[\"Root\"] = \"root\";\n  /** Type for Text */\n\n  ElementType[\"Text\"] = \"text\";\n  /** Type for <? ... ?> */\n\n  ElementType[\"Directive\"] = \"directive\";\n  /** Type for <!-- ... --> */\n\n  ElementType[\"Comment\"] = \"comment\";\n  /** Type for <script> tags */\n\n  ElementType[\"Script\"] = \"script\";\n  /** Type for <style> tags */\n\n  ElementType[\"Style\"] = \"style\";\n  /** Type for Any tag */\n\n  ElementType[\"Tag\"] = \"tag\";\n  /** Type for <![CDATA[ ... ]]> */\n\n  ElementType[\"CDATA\"] = \"cdata\";\n  /** Type for <!doctype ...> */\n\n  ElementType[\"Doctype\"] = \"doctype\";\n})(ElementType = exports.ElementType || (exports.ElementType = {}));\n/**\r\n * Tests whether an element is a tag or not.\r\n *\r\n * @param elem Element to test\r\n */\n\n\nfunction isTag(elem) {\n  return elem.type === ElementType.Tag || elem.type === ElementType.Script || elem.type === ElementType.Style;\n}\n\nexports.isTag = isTag; // Exports for backwards compatibility\n\n/** Type for the root element of a document */\n\nexports.Root = ElementType.Root;\n/** Type for Text */\n\nexports.Text = ElementType.Text;\n/** Type for <? ... ?> */\n\nexports.Directive = ElementType.Directive;\n/** Type for <!-- ... --> */\n\nexports.Comment = ElementType.Comment;\n/** Type for <script> tags */\n\nexports.Script = ElementType.Script;\n/** Type for <style> tags */\n\nexports.Style = ElementType.Style;\n/** Type for Any tag */\n\nexports.Tag = ElementType.Tag;\n/** Type for <![CDATA[ ... ]]> */\n\nexports.CDATA = ElementType.CDATA;\n/** Type for <!doctype ...> */\n\nexports.Doctype = ElementType.Doctype;","map":{"version":3,"sources":["C:/Users/USER/Documents/6 sem/6s-proj/e17-co328-NGS-Data-AnalysingToolkit/frontend/NGS-tool/node_modules/domelementtype/lib/index.js"],"names":["Object","defineProperty","exports","value","Doctype","CDATA","Tag","Style","Script","Comment","Directive","Text","Root","isTag","ElementType","elem","type"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,KAAR,GAAgBH,OAAO,CAACI,GAAR,GAAcJ,OAAO,CAACK,KAAR,GAAgBL,OAAO,CAACM,MAAR,GAAiBN,OAAO,CAACO,OAAR,GAAkBP,OAAO,CAACQ,SAAR,GAAoBR,OAAO,CAACS,IAAR,GAAeT,OAAO,CAACU,IAAR,GAAeV,OAAO,CAACW,KAAR,GAAgBX,OAAO,CAACY,WAAR,GAAsB,KAAK,CAAhM;AACA;;AACA,IAAIA,WAAJ;;AACA,CAAC,UAAUA,WAAV,EAAuB;AACpB;AACAA,EAAAA,WAAW,CAAC,MAAD,CAAX,GAAsB,MAAtB;AACA;;AACAA,EAAAA,WAAW,CAAC,MAAD,CAAX,GAAsB,MAAtB;AACA;;AACAA,EAAAA,WAAW,CAAC,WAAD,CAAX,GAA2B,WAA3B;AACA;;AACAA,EAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,SAAzB;AACA;;AACAA,EAAAA,WAAW,CAAC,QAAD,CAAX,GAAwB,QAAxB;AACA;;AACAA,EAAAA,WAAW,CAAC,OAAD,CAAX,GAAuB,OAAvB;AACA;;AACAA,EAAAA,WAAW,CAAC,KAAD,CAAX,GAAqB,KAArB;AACA;;AACAA,EAAAA,WAAW,CAAC,OAAD,CAAX,GAAuB,OAAvB;AACA;;AACAA,EAAAA,WAAW,CAAC,SAAD,CAAX,GAAyB,SAAzB;AACH,CAnBD,EAmBGA,WAAW,GAAGZ,OAAO,CAACY,WAAR,KAAwBZ,OAAO,CAACY,WAAR,GAAsB,EAA9C,CAnBjB;AAoBA;AACA;AACA;AACA;AACA;;;AACA,SAASD,KAAT,CAAeE,IAAf,EAAqB;AACjB,SAAQA,IAAI,CAACC,IAAL,KAAcF,WAAW,CAACR,GAA1B,IACJS,IAAI,CAACC,IAAL,KAAcF,WAAW,CAACN,MADtB,IAEJO,IAAI,CAACC,IAAL,KAAcF,WAAW,CAACP,KAF9B;AAGH;;AACDL,OAAO,CAACW,KAAR,GAAgBA,KAAhB,C,CACA;;AACA;;AACAX,OAAO,CAACU,IAAR,GAAeE,WAAW,CAACF,IAA3B;AACA;;AACAV,OAAO,CAACS,IAAR,GAAeG,WAAW,CAACH,IAA3B;AACA;;AACAT,OAAO,CAACQ,SAAR,GAAoBI,WAAW,CAACJ,SAAhC;AACA;;AACAR,OAAO,CAACO,OAAR,GAAkBK,WAAW,CAACL,OAA9B;AACA;;AACAP,OAAO,CAACM,MAAR,GAAiBM,WAAW,CAACN,MAA7B;AACA;;AACAN,OAAO,CAACK,KAAR,GAAgBO,WAAW,CAACP,KAA5B;AACA;;AACAL,OAAO,CAACI,GAAR,GAAcQ,WAAW,CAACR,GAA1B;AACA;;AACAJ,OAAO,CAACG,KAAR,GAAgBS,WAAW,CAACT,KAA5B;AACA;;AACAH,OAAO,CAACE,OAAR,GAAkBU,WAAW,CAACV,OAA9B","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Doctype = exports.CDATA = exports.Tag = exports.Style = exports.Script = exports.Comment = exports.Directive = exports.Text = exports.Root = exports.isTag = exports.ElementType = void 0;\r\n/** Types of elements found in htmlparser2's DOM */\r\nvar ElementType;\r\n(function (ElementType) {\r\n    /** Type for the root element of a document */\r\n    ElementType[\"Root\"] = \"root\";\r\n    /** Type for Text */\r\n    ElementType[\"Text\"] = \"text\";\r\n    /** Type for <? ... ?> */\r\n    ElementType[\"Directive\"] = \"directive\";\r\n    /** Type for <!-- ... --> */\r\n    ElementType[\"Comment\"] = \"comment\";\r\n    /** Type for <script> tags */\r\n    ElementType[\"Script\"] = \"script\";\r\n    /** Type for <style> tags */\r\n    ElementType[\"Style\"] = \"style\";\r\n    /** Type for Any tag */\r\n    ElementType[\"Tag\"] = \"tag\";\r\n    /** Type for <![CDATA[ ... ]]> */\r\n    ElementType[\"CDATA\"] = \"cdata\";\r\n    /** Type for <!doctype ...> */\r\n    ElementType[\"Doctype\"] = \"doctype\";\r\n})(ElementType = exports.ElementType || (exports.ElementType = {}));\r\n/**\r\n * Tests whether an element is a tag or not.\r\n *\r\n * @param elem Element to test\r\n */\r\nfunction isTag(elem) {\r\n    return (elem.type === ElementType.Tag ||\r\n        elem.type === ElementType.Script ||\r\n        elem.type === ElementType.Style);\r\n}\r\nexports.isTag = isTag;\r\n// Exports for backwards compatibility\r\n/** Type for the root element of a document */\r\nexports.Root = ElementType.Root;\r\n/** Type for Text */\r\nexports.Text = ElementType.Text;\r\n/** Type for <? ... ?> */\r\nexports.Directive = ElementType.Directive;\r\n/** Type for <!-- ... --> */\r\nexports.Comment = ElementType.Comment;\r\n/** Type for <script> tags */\r\nexports.Script = ElementType.Script;\r\n/** Type for <style> tags */\r\nexports.Style = ElementType.Style;\r\n/** Type for Any tag */\r\nexports.Tag = ElementType.Tag;\r\n/** Type for <![CDATA[ ... ]]> */\r\nexports.CDATA = ElementType.CDATA;\r\n/** Type for <!doctype ...> */\r\nexports.Doctype = ElementType.Doctype;\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/; // declaration\n\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/; // https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\n\nvar TRIM_REGEX = /^\\s+|\\s+$/g; // strings\n\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = ''; // types\n\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n/**\r\n * @param {String} style\r\n * @param {Object} [options]\r\n * @return {Object[]}\r\n * @throws {TypeError}\r\n * @throws {Error}\r\n */\n\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n  options = options || {};\n  /**\r\n   * Positional.\r\n   */\n\n  var lineno = 1;\n  var column = 1;\n  /**\r\n   * Update lineno and column based on `str`.\r\n   *\r\n   * @param {String} str\r\n   */\n\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n  /**\r\n   * Mark position and patch `node.position`.\r\n   *\r\n   * @return {Function}\r\n   */\n\n\n  function position() {\n    var start = {\n      line: lineno,\n      column: column\n    };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n  /**\r\n   * Store position information for a node.\r\n   *\r\n   * @constructor\r\n   * @property {Object} start\r\n   * @property {Object} end\r\n   * @property {undefined|String} source\r\n   */\n\n\n  function Position(start) {\n    this.start = start;\n    this.end = {\n      line: lineno,\n      column: column\n    };\n    this.source = options.source;\n  }\n  /**\r\n   * Non-enumerable source string.\r\n   */\n\n\n  Position.prototype.content = style;\n  var errorsList = [];\n  /**\r\n   * Error `msg`.\r\n   *\r\n   * @param {String} msg\r\n   * @throws {Error}\r\n   */\n\n  function error(msg) {\n    var err = new Error(options.source + ':' + lineno + ':' + column + ': ' + msg);\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n  /**\r\n   * Match `re` and return captures.\r\n   *\r\n   * @param {RegExp} re\r\n   * @return {undefined|Array}\r\n   */\n\n\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n  /**\r\n   * Parse whitespace.\r\n   */\n\n\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n  /**\r\n   * Parse comments.\r\n   *\r\n   * @param {Object[]} [rules]\r\n   * @return {Object[]}\r\n   */\n\n\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n\n    while (c = comment()) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n\n    return rules;\n  }\n  /**\r\n   * Parse comment.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\n\n\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n    var i = 2;\n\n    while (EMPTY_STRING != style.charAt(i) && (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))) {\n      ++i;\n    }\n\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n  /**\r\n   * Parse declaration.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\n\n\n  function declaration() {\n    var pos = position(); // prop\n\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment(); // :\n\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\"); // val\n\n    var val = match(VALUE_REGEX);\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING)) : EMPTY_STRING\n    }); // ;\n\n    match(SEMICOLON_REGEX);\n    return ret;\n  }\n  /**\r\n   * Parse declarations.\r\n   *\r\n   * @return {Object[]}\r\n   */\n\n\n  function declarations() {\n    var decls = [];\n    comments(decls); // declarations\n\n    var decl;\n\n    while (decl = declaration()) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n/**\r\n * Trim `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\n\n\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}","map":{"version":3,"sources":["C:/Users/USER/Documents/6 sem/6s-proj/e17-co328-NGS-Data-AnalysingToolkit/frontend/NGS-tool/node_modules/inline-style-parser/index.js"],"names":["COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","NEWLINE","FORWARD_SLASH","ASTERISK","EMPTY_STRING","TYPE_COMMENT","TYPE_DECLARATION","module","exports","style","options","TypeError","lineno","column","updatePosition","str","lines","match","length","i","lastIndexOf","position","start","line","node","Position","whitespace","end","source","prototype","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","trim","replace","value","declarations","decls","decl"],"mappings":"AAAA;AACA;AACA,IAAIA,aAAa,GAAG,iCAApB;AAEA,IAAIC,aAAa,GAAG,KAApB;AACA,IAAIC,gBAAgB,GAAG,MAAvB,C,CAEA;;AACA,IAAIC,cAAc,GAAG,wCAArB;AACA,IAAIC,WAAW,GAAG,OAAlB;AACA,IAAIC,WAAW,GAAG,sDAAlB;AACA,IAAIC,eAAe,GAAG,SAAtB,C,CAEA;;AACA,IAAIC,UAAU,GAAG,YAAjB,C,CAEA;;AACA,IAAIC,OAAO,GAAG,IAAd;AACA,IAAIC,aAAa,GAAG,GAApB;AACA,IAAIC,QAAQ,GAAG,GAAf;AACA,IAAIC,YAAY,GAAG,EAAnB,C,CAEA;;AACA,IAAIC,YAAY,GAAG,SAAnB;AACA,IAAIC,gBAAgB,GAAG,aAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB,UAASC,KAAT,EAAgBC,OAAhB,EAAyB;AACxC,MAAI,OAAOD,KAAP,KAAiB,QAArB,EAA+B;AAC7B,UAAM,IAAIE,SAAJ,CAAc,iCAAd,CAAN;AACD;;AAED,MAAI,CAACF,KAAL,EAAY,OAAO,EAAP;AAEZC,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA;AACF;AACA;;AACE,MAAIE,MAAM,GAAG,CAAb;AACA,MAAIC,MAAM,GAAG,CAAb;AAEA;AACF;AACA;AACA;AACA;;AACE,WAASC,cAAT,CAAwBC,GAAxB,EAA6B;AAC3B,QAAIC,KAAK,GAAGD,GAAG,CAACE,KAAJ,CAAUvB,aAAV,CAAZ;AACA,QAAIsB,KAAJ,EAAWJ,MAAM,IAAII,KAAK,CAACE,MAAhB;AACX,QAAIC,CAAC,GAAGJ,GAAG,CAACK,WAAJ,CAAgBnB,OAAhB,CAAR;AACAY,IAAAA,MAAM,GAAG,CAACM,CAAD,GAAKJ,GAAG,CAACG,MAAJ,GAAaC,CAAlB,GAAsBN,MAAM,GAAGE,GAAG,CAACG,MAA5C;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASG,QAAT,GAAoB;AAClB,QAAIC,KAAK,GAAG;AAAEC,MAAAA,IAAI,EAAEX,MAAR;AAAgBC,MAAAA,MAAM,EAAEA;AAAxB,KAAZ;AACA,WAAO,UAASW,IAAT,EAAe;AACpBA,MAAAA,IAAI,CAACH,QAAL,GAAgB,IAAII,QAAJ,CAAaH,KAAb,CAAhB;AACAI,MAAAA,UAAU;AACV,aAAOF,IAAP;AACD,KAJD;AAKD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACE,WAASC,QAAT,CAAkBH,KAAlB,EAAyB;AACvB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKK,GAAL,GAAW;AAAEJ,MAAAA,IAAI,EAAEX,MAAR;AAAgBC,MAAAA,MAAM,EAAEA;AAAxB,KAAX;AACA,SAAKe,MAAL,GAAclB,OAAO,CAACkB,MAAtB;AACD;AAED;AACF;AACA;;;AACEH,EAAAA,QAAQ,CAACI,SAAT,CAAmBC,OAAnB,GAA6BrB,KAA7B;AAEA,MAAIsB,UAAU,GAAG,EAAjB;AAEA;AACF;AACA;AACA;AACA;AACA;;AACE,WAASC,KAAT,CAAeC,GAAf,EAAoB;AAClB,QAAIC,GAAG,GAAG,IAAIC,KAAJ,CACRzB,OAAO,CAACkB,MAAR,GAAiB,GAAjB,GAAuBhB,MAAvB,GAAgC,GAAhC,GAAsCC,MAAtC,GAA+C,IAA/C,GAAsDoB,GAD9C,CAAV;AAGAC,IAAAA,GAAG,CAACE,MAAJ,GAAaH,GAAb;AACAC,IAAAA,GAAG,CAACG,QAAJ,GAAe3B,OAAO,CAACkB,MAAvB;AACAM,IAAAA,GAAG,CAACX,IAAJ,GAAWX,MAAX;AACAsB,IAAAA,GAAG,CAACrB,MAAJ,GAAaA,MAAb;AACAqB,IAAAA,GAAG,CAACN,MAAJ,GAAanB,KAAb;;AAEA,QAAIC,OAAO,CAAC4B,MAAZ,EAAoB;AAClBP,MAAAA,UAAU,CAACQ,IAAX,CAAgBL,GAAhB;AACD,KAFD,MAEO;AACL,YAAMA,GAAN;AACD;AACF;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASjB,KAAT,CAAeuB,EAAf,EAAmB;AACjB,QAAIC,CAAC,GAAGD,EAAE,CAACE,IAAH,CAAQjC,KAAR,CAAR;AACA,QAAI,CAACgC,CAAL,EAAQ;AACR,QAAI1B,GAAG,GAAG0B,CAAC,CAAC,CAAD,CAAX;AACA3B,IAAAA,cAAc,CAACC,GAAD,CAAd;AACAN,IAAAA,KAAK,GAAGA,KAAK,CAACkC,KAAN,CAAY5B,GAAG,CAACG,MAAhB,CAAR;AACA,WAAOuB,CAAP;AACD;AAED;AACF;AACA;;;AACE,WAASf,UAAT,GAAsB;AACpBT,IAAAA,KAAK,CAACtB,gBAAD,CAAL;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASiD,QAAT,CAAkBC,KAAlB,EAAyB;AACvB,QAAIC,CAAJ;AACAD,IAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;;AACA,WAAQC,CAAC,GAAGC,OAAO,EAAnB,EAAwB;AACtB,UAAID,CAAC,KAAK,KAAV,EAAiB;AACfD,QAAAA,KAAK,CAACN,IAAN,CAAWO,CAAX;AACD;AACF;;AACD,WAAOD,KAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASE,OAAT,GAAmB;AACjB,QAAIC,GAAG,GAAG3B,QAAQ,EAAlB;AACA,QAAInB,aAAa,IAAIO,KAAK,CAACwC,MAAN,CAAa,CAAb,CAAjB,IAAoC9C,QAAQ,IAAIM,KAAK,CAACwC,MAAN,CAAa,CAAb,CAApD,EAAqE;AAErE,QAAI9B,CAAC,GAAG,CAAR;;AACA,WACEf,YAAY,IAAIK,KAAK,CAACwC,MAAN,CAAa9B,CAAb,CAAhB,KACChB,QAAQ,IAAIM,KAAK,CAACwC,MAAN,CAAa9B,CAAb,CAAZ,IAA+BjB,aAAa,IAAIO,KAAK,CAACwC,MAAN,CAAa9B,CAAC,GAAG,CAAjB,CADjD,CADF,EAGE;AACA,QAAEA,CAAF;AACD;;AACDA,IAAAA,CAAC,IAAI,CAAL;;AAEA,QAAIf,YAAY,KAAKK,KAAK,CAACwC,MAAN,CAAa9B,CAAC,GAAG,CAAjB,CAArB,EAA0C;AACxC,aAAOa,KAAK,CAAC,wBAAD,CAAZ;AACD;;AAED,QAAIjB,GAAG,GAAGN,KAAK,CAACkC,KAAN,CAAY,CAAZ,EAAexB,CAAC,GAAG,CAAnB,CAAV;AACAN,IAAAA,MAAM,IAAI,CAAV;AACAC,IAAAA,cAAc,CAACC,GAAD,CAAd;AACAN,IAAAA,KAAK,GAAGA,KAAK,CAACkC,KAAN,CAAYxB,CAAZ,CAAR;AACAN,IAAAA,MAAM,IAAI,CAAV;AAEA,WAAOmC,GAAG,CAAC;AACTE,MAAAA,IAAI,EAAE7C,YADG;AAET0C,MAAAA,OAAO,EAAEhC;AAFA,KAAD,CAAV;AAID;AAED;AACF;AACA;AACA;AACA;AACA;;;AACE,WAASoC,WAAT,GAAuB;AACrB,QAAIH,GAAG,GAAG3B,QAAQ,EAAlB,CADqB,CAGrB;;AACA,QAAI+B,IAAI,GAAGnC,KAAK,CAACrB,cAAD,CAAhB;AACA,QAAI,CAACwD,IAAL,EAAW;AACXL,IAAAA,OAAO,GANc,CAQrB;;AACA,QAAI,CAAC9B,KAAK,CAACpB,WAAD,CAAV,EAAyB,OAAOmC,KAAK,CAAC,sBAAD,CAAZ,CATJ,CAWrB;;AACA,QAAIqB,GAAG,GAAGpC,KAAK,CAACnB,WAAD,CAAf;AAEA,QAAIwD,GAAG,GAAGN,GAAG,CAAC;AACZE,MAAAA,IAAI,EAAE5C,gBADM;AAEZiD,MAAAA,QAAQ,EAAEC,IAAI,CAACJ,IAAI,CAAC,CAAD,CAAJ,CAAQK,OAAR,CAAgBhE,aAAhB,EAA+BW,YAA/B,CAAD,CAFF;AAGZsD,MAAAA,KAAK,EAAEL,GAAG,GACNG,IAAI,CAACH,GAAG,CAAC,CAAD,CAAH,CAAOI,OAAP,CAAehE,aAAf,EAA8BW,YAA9B,CAAD,CADE,GAENA;AALQ,KAAD,CAAb,CAdqB,CAsBrB;;AACAa,IAAAA,KAAK,CAAClB,eAAD,CAAL;AAEA,WAAOuD,GAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACE,WAASK,YAAT,GAAwB;AACtB,QAAIC,KAAK,GAAG,EAAZ;AAEAhB,IAAAA,QAAQ,CAACgB,KAAD,CAAR,CAHsB,CAKtB;;AACA,QAAIC,IAAJ;;AACA,WAAQA,IAAI,GAAGV,WAAW,EAA1B,EAA+B;AAC7B,UAAIU,IAAI,KAAK,KAAb,EAAoB;AAClBD,QAAAA,KAAK,CAACrB,IAAN,CAAWsB,IAAX;AACAjB,QAAAA,QAAQ,CAACgB,KAAD,CAAR;AACD;AACF;;AAED,WAAOA,KAAP;AACD;;AAEDlC,EAAAA,UAAU;AACV,SAAOiC,YAAY,EAAnB;AACD,CAzND;AA2NA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASH,IAAT,CAAczC,GAAd,EAAmB;AACjB,SAAOA,GAAG,GAAGA,GAAG,CAAC0C,OAAJ,CAAYzD,UAAZ,EAAwBI,YAAxB,CAAH,GAA2CA,YAArD;AACD","sourcesContent":["// http://www.w3.org/TR/CSS21/grammar.html\r\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\r\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\r\n\r\nvar NEWLINE_REGEX = /\\n/g;\r\nvar WHITESPACE_REGEX = /^\\s*/;\r\n\r\n// declaration\r\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\r\nvar COLON_REGEX = /^:\\s*/;\r\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\r\nvar SEMICOLON_REGEX = /^[;\\s]*/;\r\n\r\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\r\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\r\n\r\n// strings\r\nvar NEWLINE = '\\n';\r\nvar FORWARD_SLASH = '/';\r\nvar ASTERISK = '*';\r\nvar EMPTY_STRING = '';\r\n\r\n// types\r\nvar TYPE_COMMENT = 'comment';\r\nvar TYPE_DECLARATION = 'declaration';\r\n\r\n/**\r\n * @param {String} style\r\n * @param {Object} [options]\r\n * @return {Object[]}\r\n * @throws {TypeError}\r\n * @throws {Error}\r\n */\r\nmodule.exports = function(style, options) {\r\n  if (typeof style !== 'string') {\r\n    throw new TypeError('First argument must be a string');\r\n  }\r\n\r\n  if (!style) return [];\r\n\r\n  options = options || {};\r\n\r\n  /**\r\n   * Positional.\r\n   */\r\n  var lineno = 1;\r\n  var column = 1;\r\n\r\n  /**\r\n   * Update lineno and column based on `str`.\r\n   *\r\n   * @param {String} str\r\n   */\r\n  function updatePosition(str) {\r\n    var lines = str.match(NEWLINE_REGEX);\r\n    if (lines) lineno += lines.length;\r\n    var i = str.lastIndexOf(NEWLINE);\r\n    column = ~i ? str.length - i : column + str.length;\r\n  }\r\n\r\n  /**\r\n   * Mark position and patch `node.position`.\r\n   *\r\n   * @return {Function}\r\n   */\r\n  function position() {\r\n    var start = { line: lineno, column: column };\r\n    return function(node) {\r\n      node.position = new Position(start);\r\n      whitespace();\r\n      return node;\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Store position information for a node.\r\n   *\r\n   * @constructor\r\n   * @property {Object} start\r\n   * @property {Object} end\r\n   * @property {undefined|String} source\r\n   */\r\n  function Position(start) {\r\n    this.start = start;\r\n    this.end = { line: lineno, column: column };\r\n    this.source = options.source;\r\n  }\r\n\r\n  /**\r\n   * Non-enumerable source string.\r\n   */\r\n  Position.prototype.content = style;\r\n\r\n  var errorsList = [];\r\n\r\n  /**\r\n   * Error `msg`.\r\n   *\r\n   * @param {String} msg\r\n   * @throws {Error}\r\n   */\r\n  function error(msg) {\r\n    var err = new Error(\r\n      options.source + ':' + lineno + ':' + column + ': ' + msg\r\n    );\r\n    err.reason = msg;\r\n    err.filename = options.source;\r\n    err.line = lineno;\r\n    err.column = column;\r\n    err.source = style;\r\n\r\n    if (options.silent) {\r\n      errorsList.push(err);\r\n    } else {\r\n      throw err;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Match `re` and return captures.\r\n   *\r\n   * @param {RegExp} re\r\n   * @return {undefined|Array}\r\n   */\r\n  function match(re) {\r\n    var m = re.exec(style);\r\n    if (!m) return;\r\n    var str = m[0];\r\n    updatePosition(str);\r\n    style = style.slice(str.length);\r\n    return m;\r\n  }\r\n\r\n  /**\r\n   * Parse whitespace.\r\n   */\r\n  function whitespace() {\r\n    match(WHITESPACE_REGEX);\r\n  }\r\n\r\n  /**\r\n   * Parse comments.\r\n   *\r\n   * @param {Object[]} [rules]\r\n   * @return {Object[]}\r\n   */\r\n  function comments(rules) {\r\n    var c;\r\n    rules = rules || [];\r\n    while ((c = comment())) {\r\n      if (c !== false) {\r\n        rules.push(c);\r\n      }\r\n    }\r\n    return rules;\r\n  }\r\n\r\n  /**\r\n   * Parse comment.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function comment() {\r\n    var pos = position();\r\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\r\n\r\n    var i = 2;\r\n    while (\r\n      EMPTY_STRING != style.charAt(i) &&\r\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\r\n    ) {\r\n      ++i;\r\n    }\r\n    i += 2;\r\n\r\n    if (EMPTY_STRING === style.charAt(i - 1)) {\r\n      return error('End of comment missing');\r\n    }\r\n\r\n    var str = style.slice(2, i - 2);\r\n    column += 2;\r\n    updatePosition(str);\r\n    style = style.slice(i);\r\n    column += 2;\r\n\r\n    return pos({\r\n      type: TYPE_COMMENT,\r\n      comment: str\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Parse declaration.\r\n   *\r\n   * @return {Object}\r\n   * @throws {Error}\r\n   */\r\n  function declaration() {\r\n    var pos = position();\r\n\r\n    // prop\r\n    var prop = match(PROPERTY_REGEX);\r\n    if (!prop) return;\r\n    comment();\r\n\r\n    // :\r\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\r\n\r\n    // val\r\n    var val = match(VALUE_REGEX);\r\n\r\n    var ret = pos({\r\n      type: TYPE_DECLARATION,\r\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\r\n      value: val\r\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\r\n        : EMPTY_STRING\r\n    });\r\n\r\n    // ;\r\n    match(SEMICOLON_REGEX);\r\n\r\n    return ret;\r\n  }\r\n\r\n  /**\r\n   * Parse declarations.\r\n   *\r\n   * @return {Object[]}\r\n   */\r\n  function declarations() {\r\n    var decls = [];\r\n\r\n    comments(decls);\r\n\r\n    // declarations\r\n    var decl;\r\n    while ((decl = declaration())) {\r\n      if (decl !== false) {\r\n        decls.push(decl);\r\n        comments(decls);\r\n      }\r\n    }\r\n\r\n    return decls;\r\n  }\r\n\r\n  whitespace();\r\n  return declarations();\r\n};\r\n\r\n/**\r\n * Trim `str`.\r\n *\r\n * @param {String} str\r\n * @return {String}\r\n */\r\nfunction trim(str) {\r\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"var reactProperty = require('react-property');\n\nvar utilities = require('./utilities');\n/**\r\n * Converts HTML/SVG DOM attributes to React props.\r\n *\r\n * @param  {object} [attributes={}] - HTML/SVG DOM attributes.\r\n * @return {object}                 - React props.\r\n */\n\n\nmodule.exports = function attributesToProps(attributes) {\n  attributes = attributes || {};\n  var valueOnlyInputs = {\n    reset: true,\n    submit: true\n  };\n  var attributeName;\n  var attributeNameLowerCased;\n  var attributeValue;\n  var propName;\n  var propertyInfo;\n  var props = {};\n  var inputIsValueOnly = attributes.type && valueOnlyInputs[attributes.type];\n\n  for (attributeName in attributes) {\n    attributeValue = attributes[attributeName]; // ARIA (aria-*) or custom data (data-*) attribute\n\n    if (reactProperty.isCustomAttribute(attributeName)) {\n      props[attributeName] = attributeValue;\n      continue;\n    } // convert HTML/SVG attribute to React prop\n\n\n    attributeNameLowerCased = attributeName.toLowerCase();\n    propName = getPropName(attributeNameLowerCased);\n\n    if (propName) {\n      propertyInfo = reactProperty.getPropertyInfo(propName); // convert attribute to uncontrolled component prop (e.g., `value` to `defaultValue`)\n      // https://reactjs.org/docs/uncontrolled-components.html\n\n      if ((propName === 'checked' || propName === 'value') && !inputIsValueOnly) {\n        propName = getPropName('default' + attributeNameLowerCased);\n      }\n\n      props[propName] = attributeValue;\n\n      switch (propertyInfo && propertyInfo.type) {\n        case reactProperty.BOOLEAN:\n          props[propName] = true;\n          break;\n\n        case reactProperty.OVERLOADED_BOOLEAN:\n          if (attributeValue === '') {\n            props[propName] = true;\n          }\n\n          break;\n      }\n\n      continue;\n    } // preserve custom attribute if React >=16\n\n\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\n      props[attributeName] = attributeValue;\n    }\n  } // transform inline style to object\n\n\n  utilities.setStyleProp(attributes.style, props);\n  return props;\n};\n/**\r\n * Gets prop name from lowercased attribute name.\r\n *\r\n * @param {string} attributeName - Lowercased attribute name.\r\n * @return {string}\r\n */\n\n\nfunction getPropName(attributeName) {\n  return reactProperty.possibleStandardNames[attributeName];\n}","map":{"version":3,"sources":["C:/Users/USER/Documents/6 sem/6s-proj/e17-co328-NGS-Data-AnalysingToolkit/frontend/NGS-tool/node_modules/html-react-parser/lib/attributes-to-props.js"],"names":["reactProperty","require","utilities","module","exports","attributesToProps","attributes","valueOnlyInputs","reset","submit","attributeName","attributeNameLowerCased","attributeValue","propName","propertyInfo","props","inputIsValueOnly","type","isCustomAttribute","toLowerCase","getPropName","getPropertyInfo","BOOLEAN","OVERLOADED_BOOLEAN","PRESERVE_CUSTOM_ATTRIBUTES","setStyleProp","style","possibleStandardNames"],"mappings":"AAAA,IAAIA,aAAa,GAAGC,OAAO,CAAC,gBAAD,CAA3B;;AACA,IAAIC,SAAS,GAAGD,OAAO,CAAC,aAAD,CAAvB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,iBAAT,CAA2BC,UAA3B,EAAuC;AACtDA,EAAAA,UAAU,GAAGA,UAAU,IAAI,EAA3B;AAEA,MAAIC,eAAe,GAAG;AACpBC,IAAAA,KAAK,EAAE,IADa;AAEpBC,IAAAA,MAAM,EAAE;AAFY,GAAtB;AAKA,MAAIC,aAAJ;AACA,MAAIC,uBAAJ;AACA,MAAIC,cAAJ;AACA,MAAIC,QAAJ;AACA,MAAIC,YAAJ;AACA,MAAIC,KAAK,GAAG,EAAZ;AACA,MAAIC,gBAAgB,GAAGV,UAAU,CAACW,IAAX,IAAmBV,eAAe,CAACD,UAAU,CAACW,IAAZ,CAAzD;;AAEA,OAAKP,aAAL,IAAsBJ,UAAtB,EAAkC;AAChCM,IAAAA,cAAc,GAAGN,UAAU,CAACI,aAAD,CAA3B,CADgC,CAGhC;;AACA,QAAIV,aAAa,CAACkB,iBAAd,CAAgCR,aAAhC,CAAJ,EAAoD;AAClDK,MAAAA,KAAK,CAACL,aAAD,CAAL,GAAuBE,cAAvB;AACA;AACD,KAP+B,CAShC;;;AACAD,IAAAA,uBAAuB,GAAGD,aAAa,CAACS,WAAd,EAA1B;AACAN,IAAAA,QAAQ,GAAGO,WAAW,CAACT,uBAAD,CAAtB;;AAEA,QAAIE,QAAJ,EAAc;AACZC,MAAAA,YAAY,GAAGd,aAAa,CAACqB,eAAd,CAA8BR,QAA9B,CAAf,CADY,CAGZ;AACA;;AACA,UACE,CAACA,QAAQ,KAAK,SAAb,IAA0BA,QAAQ,KAAK,OAAxC,KACA,CAACG,gBAFH,EAGE;AACAH,QAAAA,QAAQ,GAAGO,WAAW,CAAC,YAAYT,uBAAb,CAAtB;AACD;;AAEDI,MAAAA,KAAK,CAACF,QAAD,CAAL,GAAkBD,cAAlB;;AAEA,cAAQE,YAAY,IAAIA,YAAY,CAACG,IAArC;AACE,aAAKjB,aAAa,CAACsB,OAAnB;AACEP,UAAAA,KAAK,CAACF,QAAD,CAAL,GAAkB,IAAlB;AACA;;AACF,aAAKb,aAAa,CAACuB,kBAAnB;AACE,cAAIX,cAAc,KAAK,EAAvB,EAA2B;AACzBG,YAAAA,KAAK,CAACF,QAAD,CAAL,GAAkB,IAAlB;AACD;;AACD;AARJ;;AAUA;AACD,KAtC+B,CAwChC;;;AACA,QAAIX,SAAS,CAACsB,0BAAd,EAA0C;AACxCT,MAAAA,KAAK,CAACL,aAAD,CAAL,GAAuBE,cAAvB;AACD;AACF,GA5DqD,CA8DtD;;;AACAV,EAAAA,SAAS,CAACuB,YAAV,CAAuBnB,UAAU,CAACoB,KAAlC,EAAyCX,KAAzC;AAEA,SAAOA,KAAP;AACD,CAlED;AAoEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,WAAT,CAAqBV,aAArB,EAAoC;AAClC,SAAOV,aAAa,CAAC2B,qBAAd,CAAoCjB,aAApC,CAAP;AACD","sourcesContent":["var reactProperty = require('react-property');\r\nvar utilities = require('./utilities');\r\n\r\n/**\r\n * Converts HTML/SVG DOM attributes to React props.\r\n *\r\n * @param  {object} [attributes={}] - HTML/SVG DOM attributes.\r\n * @return {object}                 - React props.\r\n */\r\nmodule.exports = function attributesToProps(attributes) {\r\n  attributes = attributes || {};\r\n\r\n  var valueOnlyInputs = {\r\n    reset: true,\r\n    submit: true\r\n  };\r\n\r\n  var attributeName;\r\n  var attributeNameLowerCased;\r\n  var attributeValue;\r\n  var propName;\r\n  var propertyInfo;\r\n  var props = {};\r\n  var inputIsValueOnly = attributes.type && valueOnlyInputs[attributes.type];\r\n\r\n  for (attributeName in attributes) {\r\n    attributeValue = attributes[attributeName];\r\n\r\n    // ARIA (aria-*) or custom data (data-*) attribute\r\n    if (reactProperty.isCustomAttribute(attributeName)) {\r\n      props[attributeName] = attributeValue;\r\n      continue;\r\n    }\r\n\r\n    // convert HTML/SVG attribute to React prop\r\n    attributeNameLowerCased = attributeName.toLowerCase();\r\n    propName = getPropName(attributeNameLowerCased);\r\n\r\n    if (propName) {\r\n      propertyInfo = reactProperty.getPropertyInfo(propName);\r\n\r\n      // convert attribute to uncontrolled component prop (e.g., `value` to `defaultValue`)\r\n      // https://reactjs.org/docs/uncontrolled-components.html\r\n      if (\r\n        (propName === 'checked' || propName === 'value') &&\r\n        !inputIsValueOnly\r\n      ) {\r\n        propName = getPropName('default' + attributeNameLowerCased);\r\n      }\r\n\r\n      props[propName] = attributeValue;\r\n\r\n      switch (propertyInfo && propertyInfo.type) {\r\n        case reactProperty.BOOLEAN:\r\n          props[propName] = true;\r\n          break;\r\n        case reactProperty.OVERLOADED_BOOLEAN:\r\n          if (attributeValue === '') {\r\n            props[propName] = true;\r\n          }\r\n          break;\r\n      }\r\n      continue;\r\n    }\r\n\r\n    // preserve custom attribute if React >=16\r\n    if (utilities.PRESERVE_CUSTOM_ATTRIBUTES) {\r\n      props[attributeName] = attributeValue;\r\n    }\r\n  }\r\n\r\n  // transform inline style to object\r\n  utilities.setStyleProp(attributes.style, props);\r\n\r\n  return props;\r\n};\r\n\r\n/**\r\n * Gets prop name from lowercased attribute name.\r\n *\r\n * @param {string} attributeName - Lowercased attribute name.\r\n * @return {string}\r\n */\r\nfunction getPropName(attributeName) {\r\n  return reactProperty.possibleStandardNames[attributeName];\r\n}\r\n"]},"metadata":{},"sourceType":"script"}
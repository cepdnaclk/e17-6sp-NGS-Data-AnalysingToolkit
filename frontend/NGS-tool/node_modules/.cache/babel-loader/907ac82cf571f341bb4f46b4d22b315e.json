{"ast":null,"code":"!function (r, t) {\n  \"object\" == typeof exports && \"undefined\" != typeof module ? t(exports) : \"function\" == typeof define && define.amd ? define([\"exports\"], t) : t((r = \"undefined\" != typeof globalThis ? globalThis : r || self).ss = {});\n}(this, function (r) {\n  \"use strict\";\n\n  function t(r) {\n    if (0 === r.length) return 0;\n    var t,\n        n = r[0],\n        e = 0;\n    if (\"number\" != typeof n) return NaN;\n\n    for (var a = 1; a < r.length; a++) {\n      if (\"number\" != typeof r[a]) return NaN;\n      t = n + r[a], Math.abs(n) >= Math.abs(r[a]) ? e += n - t + r[a] : e += r[a] - t + n, n = t;\n    }\n\n    return n + e;\n  }\n\n  function n(r) {\n    if (0 === r.length) throw new Error(\"mean requires at least one data point\");\n    return t(r) / r.length;\n  }\n\n  function e(r, t) {\n    var e,\n        a,\n        o = n(r),\n        i = 0;\n    if (2 === t) for (a = 0; a < r.length; a++) {\n      i += (e = r[a] - o) * e;\n    } else for (a = 0; a < r.length; a++) {\n      i += Math.pow(r[a] - o, t);\n    }\n    return i;\n  }\n\n  function a(r) {\n    if (0 === r.length) throw new Error(\"variance requires at least one data point\");\n    return e(r, 2) / r.length;\n  }\n\n  function o(r) {\n    if (1 === r.length) return 0;\n    var t = a(r);\n    return Math.sqrt(t);\n  }\n\n  function i(r) {\n    if (0 === r.length) throw new Error(\"mode requires at least one data point\");\n    if (1 === r.length) return r[0];\n\n    for (var t = r[0], n = NaN, e = 0, a = 1, o = 1; o < r.length + 1; o++) {\n      r[o] !== t ? (a > e && (e = a, n = t), a = 1, t = r[o]) : a++;\n    }\n\n    return n;\n  }\n\n  function u(r) {\n    return r.slice().sort(function (r, t) {\n      return r - t;\n    });\n  }\n\n  function h(r) {\n    if (0 === r.length) throw new Error(\"min requires at least one data point\");\n\n    for (var t = r[0], n = 1; n < r.length; n++) {\n      r[n] < t && (t = r[n]);\n    }\n\n    return t;\n  }\n\n  function f(r) {\n    if (0 === r.length) throw new Error(\"max requires at least one data point\");\n\n    for (var t = r[0], n = 1; n < r.length; n++) {\n      r[n] > t && (t = r[n]);\n    }\n\n    return t;\n  }\n\n  function l(r) {\n    for (var t = 0, n = 0; n < r.length; n++) {\n      if (\"number\" != typeof r[n]) return NaN;\n      t += r[n];\n    }\n\n    return t;\n  }\n\n  function s(r, t) {\n    var n = r.length * t;\n    if (0 === r.length) throw new Error(\"quantile requires at least one data point.\");\n    if (t < 0 || t > 1) throw new Error(\"quantiles must be between 0 and 1\");\n    return 1 === t ? r[r.length - 1] : 0 === t ? r[0] : n % 1 != 0 ? r[Math.ceil(n) - 1] : r.length % 2 == 0 ? (r[n - 1] + r[n]) / 2 : r[n];\n  }\n\n  function c(r, t, n, e) {\n    for (n = n || 0, e = e || r.length - 1; e > n;) {\n      if (e - n > 600) {\n        var a = e - n + 1,\n            o = t - n + 1,\n            i = Math.log(a),\n            u = .5 * Math.exp(2 * i / 3),\n            h = .5 * Math.sqrt(i * u * (a - u) / a);\n        o - a / 2 < 0 && (h *= -1), c(r, t, Math.max(n, Math.floor(t - o * u / a + h)), Math.min(e, Math.floor(t + (a - o) * u / a + h)));\n      }\n\n      var f = r[t],\n          l = n,\n          s = e;\n\n      for (g(r, n, t), r[e] > f && g(r, n, e); l < s;) {\n        for (g(r, l, s), l++, s--; r[l] < f;) {\n          l++;\n        }\n\n        for (; r[s] > f;) {\n          s--;\n        }\n      }\n\n      r[n] === f ? g(r, n, s) : g(r, ++s, e), s <= t && (n = s + 1), t <= s && (e = s - 1);\n    }\n  }\n\n  function g(r, t, n) {\n    var e = r[t];\n    r[t] = r[n], r[n] = e;\n  }\n\n  function v(r, t) {\n    var n = r.slice();\n\n    if (Array.isArray(t)) {\n      !function (r, t) {\n        for (var n = [0], e = 0; e < t.length; e++) {\n          n.push(w(r.length, t[e]));\n        }\n\n        n.push(r.length - 1), n.sort(m);\n        var a = [0, n.length - 1];\n\n        for (; a.length;) {\n          var o = Math.ceil(a.pop()),\n              i = Math.floor(a.pop());\n\n          if (!(o - i <= 1)) {\n            var u = Math.floor((i + o) / 2);\n            p(r, n[u], Math.floor(n[i]), Math.ceil(n[o])), a.push(i, u, u, o);\n          }\n        }\n      }(n, t);\n\n      for (var e = [], a = 0; a < t.length; a++) {\n        e[a] = s(n, t[a]);\n      }\n\n      return e;\n    }\n\n    return p(n, w(n.length, t), 0, n.length - 1), s(n, t);\n  }\n\n  function p(r, t, n, e) {\n    t % 1 == 0 ? c(r, t, n, e) : (c(r, t = Math.floor(t), n, e), c(r, t + 1, t + 1, e));\n  }\n\n  function m(r, t) {\n    return r - t;\n  }\n\n  function w(r, t) {\n    var n = r * t;\n    return 1 === t ? r - 1 : 0 === t ? 0 : n % 1 != 0 ? Math.ceil(n) - 1 : r % 2 == 0 ? n - .5 : n;\n  }\n\n  function M(r, t) {\n    if (t < r[0]) return 0;\n    if (t > r[r.length - 1]) return 1;\n\n    var n = function (r, t) {\n      var n = 0,\n          e = 0,\n          a = r.length;\n\n      for (; e < a;) {\n        t <= r[n = e + a >>> 1] ? a = n : e = -~n;\n      }\n\n      return e;\n    }(r, t);\n\n    if (r[n] !== t) return n / r.length;\n    n++;\n\n    var e = function (r, t) {\n      var n = 0,\n          e = 0,\n          a = r.length;\n\n      for (; e < a;) {\n        t >= r[n = e + a >>> 1] ? e = -~n : a = n;\n      }\n\n      return e;\n    }(r, t);\n\n    if (e === n) return n / r.length;\n    var a = e - n + 1;\n    return a * (e + n) / 2 / a / r.length;\n  }\n\n  function d(r) {\n    var t = v(r, .75),\n        n = v(r, .25);\n    if (\"number\" == typeof t && \"number\" == typeof n) return t - n;\n  }\n\n  function b(r) {\n    return +v(r, .5);\n  }\n\n  function q(r) {\n    for (var t = b(r), n = [], e = 0; e < r.length; e++) {\n      n.push(Math.abs(r[e] - t));\n    }\n\n    return b(n);\n  }\n\n  function y(r, t) {\n    t = t || Math.random;\n\n    for (var n, e, a = r.length; a > 0;) {\n      e = Math.floor(t() * a--), n = r[a], r[a] = r[e], r[e] = n;\n    }\n\n    return r;\n  }\n\n  function E(r, t) {\n    return y(r.slice(), t);\n  }\n\n  function x(r, t, n) {\n    return E(r, n).slice(0, t);\n  }\n\n  function S(r, t) {\n    for (var n = [], e = 0; e < r; e++) {\n      for (var a = [], o = 0; o < t; o++) {\n        a.push(0);\n      }\n\n      n.push(a);\n    }\n\n    return n;\n  }\n\n  function k(r) {\n    for (var t, n = 0, e = 0; e < r.length; e++) {\n      0 !== e && r[e] === t || (t = r[e], n++);\n    }\n\n    return n;\n  }\n\n  function A(r, t, n, e) {\n    var a;\n\n    if (r > 0) {\n      var o = (n[t] - n[r - 1]) / (t - r + 1);\n      a = e[t] - e[r - 1] - (t - r + 1) * o * o;\n    } else a = e[t] - n[t] * n[t] / (t + 1);\n\n    return a < 0 ? 0 : a;\n  }\n\n  function N(r, t, n, e, a, o, i) {\n    if (!(r > t)) {\n      var u = Math.floor((r + t) / 2);\n      e[n][u] = e[n - 1][u - 1], a[n][u] = u;\n      var h = n;\n      r > n && (h = Math.max(h, a[n][r - 1] || 0)), h = Math.max(h, a[n - 1][u] || 0);\n      var f,\n          l,\n          s,\n          c = u - 1;\n      t < e[0].length - 1 && (c = Math.min(c, a[n][t + 1] || 0));\n\n      for (var g = c; g >= h && !((f = A(g, u, o, i)) + e[n - 1][h - 1] >= e[n][u]); --g) {\n        (l = A(h, u, o, i) + e[n - 1][h - 1]) < e[n][u] && (e[n][u] = l, a[n][u] = h), h++, (s = f + e[n - 1][g - 1]) < e[n][u] && (e[n][u] = s, a[n][u] = g);\n      }\n\n      N(r, u - 1, n, e, a, o, i), N(u + 1, t, n, e, a, o, i);\n    }\n  }\n\n  function P(r, t) {\n    if (r.length !== t.length) throw new Error(\"sampleCovariance requires samples with equal lengths\");\n    if (r.length < 2) throw new Error(\"sampleCovariance requires at least two data points in each sample\");\n\n    for (var e = n(r), a = n(t), o = 0, i = 0; i < r.length; i++) {\n      o += (r[i] - e) * (t[i] - a);\n    }\n\n    return o / (r.length - 1);\n  }\n\n  function I(r) {\n    if (r.length < 2) throw new Error(\"sampleVariance requires at least two data points\");\n    return e(r, 2) / (r.length - 1);\n  }\n\n  function C(r) {\n    var t = I(r);\n    return Math.sqrt(t);\n  }\n\n  function T(r, t) {\n    return P(r, t) / C(r) / C(t);\n  }\n\n  function _(r, t, n, e) {\n    return (r * t + n * e) / (t + e);\n  }\n\n  function D(r) {\n    if (0 === r.length) throw new Error(\"meanSimple requires at least one data point\");\n    return l(r) / r.length;\n  }\n\n  function R(r) {\n    if (0 === r.length) throw new Error(\"rootMeanSquare requires at least one data point\");\n\n    for (var t = 0, n = 0; n < r.length; n++) {\n      t += Math.pow(r[n], 2);\n    }\n\n    return Math.sqrt(t / r.length);\n  }\n\n  var V = function V() {\n    this.totalCount = 0, this.data = {};\n  };\n\n  V.prototype.train = function (r, t) {\n    for (var n in this.data[t] || (this.data[t] = {}), r) {\n      var e = r[n];\n      void 0 === this.data[t][n] && (this.data[t][n] = {}), void 0 === this.data[t][n][e] && (this.data[t][n][e] = 0), this.data[t][n][e]++;\n    }\n\n    this.totalCount++;\n  }, V.prototype.score = function (r) {\n    var t,\n        n = {};\n\n    for (var e in r) {\n      var a = r[e];\n\n      for (t in this.data) {\n        n[t] = {}, this.data[t][e] ? n[t][e + \"_\" + a] = (this.data[t][e][a] || 0) / this.totalCount : n[t][e + \"_\" + a] = 0;\n      }\n    }\n\n    var o = {};\n\n    for (t in n) {\n      for (var i in o[t] = 0, n[t]) {\n        o[t] += n[t][i];\n      }\n    }\n\n    return o;\n  };\n\n  var F = function F() {\n    this.weights = [], this.bias = 0;\n  };\n\n  F.prototype.predict = function (r) {\n    if (r.length !== this.weights.length) return null;\n\n    for (var t = 0, n = 0; n < this.weights.length; n++) {\n      t += this.weights[n] * r[n];\n    }\n\n    return (t += this.bias) > 0 ? 1 : 0;\n  }, F.prototype.train = function (r, t) {\n    if (0 !== t && 1 !== t) return null;\n    r.length !== this.weights.length && (this.weights = r, this.bias = 1);\n    var n = this.predict(r);\n\n    if (\"number\" == typeof n && n !== t) {\n      for (var e = t - n, a = 0; a < this.weights.length; a++) {\n        this.weights[a] += e * r[a];\n      }\n\n      this.bias += e;\n    }\n\n    return this;\n  };\n  var L = 1e-4;\n\n  function U(r) {\n    if (r < 0) throw new Error(\"factorial requires a non-negative value\");\n    if (Math.floor(r) !== r) throw new Error(\"factorial requires an integer input\");\n\n    for (var t = 1, n = 2; n <= r; n++) {\n      t *= n;\n    }\n\n    return t;\n  }\n\n  var z = [.9999999999999971, 57.15623566586292, -59.59796035547549, 14.136097974741746, -.4919138160976202, 3399464998481189e-20, 4652362892704858e-20, -9837447530487956e-20, .0001580887032249125, -.00021026444172410488, .00021743961811521265, -.0001643181065367639, 8441822398385275e-20, -26190838401581408e-21, 36899182659531625e-22],\n      O = Math.log(Math.sqrt(2 * Math.PI));\n  var X = {\n    1: {\n      .995: 0,\n      .99: 0,\n      .975: 0,\n      .95: 0,\n      .9: .02,\n      .5: .45,\n      .1: 2.71,\n      .05: 3.84,\n      .025: 5.02,\n      .01: 6.63,\n      .005: 7.88\n    },\n    2: {\n      .995: .01,\n      .99: .02,\n      .975: .05,\n      .95: .1,\n      .9: .21,\n      .5: 1.39,\n      .1: 4.61,\n      .05: 5.99,\n      .025: 7.38,\n      .01: 9.21,\n      .005: 10.6\n    },\n    3: {\n      .995: .07,\n      .99: .11,\n      .975: .22,\n      .95: .35,\n      .9: .58,\n      .5: 2.37,\n      .1: 6.25,\n      .05: 7.81,\n      .025: 9.35,\n      .01: 11.34,\n      .005: 12.84\n    },\n    4: {\n      .995: .21,\n      .99: .3,\n      .975: .48,\n      .95: .71,\n      .9: 1.06,\n      .5: 3.36,\n      .1: 7.78,\n      .05: 9.49,\n      .025: 11.14,\n      .01: 13.28,\n      .005: 14.86\n    },\n    5: {\n      .995: .41,\n      .99: .55,\n      .975: .83,\n      .95: 1.15,\n      .9: 1.61,\n      .5: 4.35,\n      .1: 9.24,\n      .05: 11.07,\n      .025: 12.83,\n      .01: 15.09,\n      .005: 16.75\n    },\n    6: {\n      .995: .68,\n      .99: .87,\n      .975: 1.24,\n      .95: 1.64,\n      .9: 2.2,\n      .5: 5.35,\n      .1: 10.65,\n      .05: 12.59,\n      .025: 14.45,\n      .01: 16.81,\n      .005: 18.55\n    },\n    7: {\n      .995: .99,\n      .99: 1.25,\n      .975: 1.69,\n      .95: 2.17,\n      .9: 2.83,\n      .5: 6.35,\n      .1: 12.02,\n      .05: 14.07,\n      .025: 16.01,\n      .01: 18.48,\n      .005: 20.28\n    },\n    8: {\n      .995: 1.34,\n      .99: 1.65,\n      .975: 2.18,\n      .95: 2.73,\n      .9: 3.49,\n      .5: 7.34,\n      .1: 13.36,\n      .05: 15.51,\n      .025: 17.53,\n      .01: 20.09,\n      .005: 21.96\n    },\n    9: {\n      .995: 1.73,\n      .99: 2.09,\n      .975: 2.7,\n      .95: 3.33,\n      .9: 4.17,\n      .5: 8.34,\n      .1: 14.68,\n      .05: 16.92,\n      .025: 19.02,\n      .01: 21.67,\n      .005: 23.59\n    },\n    10: {\n      .995: 2.16,\n      .99: 2.56,\n      .975: 3.25,\n      .95: 3.94,\n      .9: 4.87,\n      .5: 9.34,\n      .1: 15.99,\n      .05: 18.31,\n      .025: 20.48,\n      .01: 23.21,\n      .005: 25.19\n    },\n    11: {\n      .995: 2.6,\n      .99: 3.05,\n      .975: 3.82,\n      .95: 4.57,\n      .9: 5.58,\n      .5: 10.34,\n      .1: 17.28,\n      .05: 19.68,\n      .025: 21.92,\n      .01: 24.72,\n      .005: 26.76\n    },\n    12: {\n      .995: 3.07,\n      .99: 3.57,\n      .975: 4.4,\n      .95: 5.23,\n      .9: 6.3,\n      .5: 11.34,\n      .1: 18.55,\n      .05: 21.03,\n      .025: 23.34,\n      .01: 26.22,\n      .005: 28.3\n    },\n    13: {\n      .995: 3.57,\n      .99: 4.11,\n      .975: 5.01,\n      .95: 5.89,\n      .9: 7.04,\n      .5: 12.34,\n      .1: 19.81,\n      .05: 22.36,\n      .025: 24.74,\n      .01: 27.69,\n      .005: 29.82\n    },\n    14: {\n      .995: 4.07,\n      .99: 4.66,\n      .975: 5.63,\n      .95: 6.57,\n      .9: 7.79,\n      .5: 13.34,\n      .1: 21.06,\n      .05: 23.68,\n      .025: 26.12,\n      .01: 29.14,\n      .005: 31.32\n    },\n    15: {\n      .995: 4.6,\n      .99: 5.23,\n      .975: 6.27,\n      .95: 7.26,\n      .9: 8.55,\n      .5: 14.34,\n      .1: 22.31,\n      .05: 25,\n      .025: 27.49,\n      .01: 30.58,\n      .005: 32.8\n    },\n    16: {\n      .995: 5.14,\n      .99: 5.81,\n      .975: 6.91,\n      .95: 7.96,\n      .9: 9.31,\n      .5: 15.34,\n      .1: 23.54,\n      .05: 26.3,\n      .025: 28.85,\n      .01: 32,\n      .005: 34.27\n    },\n    17: {\n      .995: 5.7,\n      .99: 6.41,\n      .975: 7.56,\n      .95: 8.67,\n      .9: 10.09,\n      .5: 16.34,\n      .1: 24.77,\n      .05: 27.59,\n      .025: 30.19,\n      .01: 33.41,\n      .005: 35.72\n    },\n    18: {\n      .995: 6.26,\n      .99: 7.01,\n      .975: 8.23,\n      .95: 9.39,\n      .9: 10.87,\n      .5: 17.34,\n      .1: 25.99,\n      .05: 28.87,\n      .025: 31.53,\n      .01: 34.81,\n      .005: 37.16\n    },\n    19: {\n      .995: 6.84,\n      .99: 7.63,\n      .975: 8.91,\n      .95: 10.12,\n      .9: 11.65,\n      .5: 18.34,\n      .1: 27.2,\n      .05: 30.14,\n      .025: 32.85,\n      .01: 36.19,\n      .005: 38.58\n    },\n    20: {\n      .995: 7.43,\n      .99: 8.26,\n      .975: 9.59,\n      .95: 10.85,\n      .9: 12.44,\n      .5: 19.34,\n      .1: 28.41,\n      .05: 31.41,\n      .025: 34.17,\n      .01: 37.57,\n      .005: 40\n    },\n    21: {\n      .995: 8.03,\n      .99: 8.9,\n      .975: 10.28,\n      .95: 11.59,\n      .9: 13.24,\n      .5: 20.34,\n      .1: 29.62,\n      .05: 32.67,\n      .025: 35.48,\n      .01: 38.93,\n      .005: 41.4\n    },\n    22: {\n      .995: 8.64,\n      .99: 9.54,\n      .975: 10.98,\n      .95: 12.34,\n      .9: 14.04,\n      .5: 21.34,\n      .1: 30.81,\n      .05: 33.92,\n      .025: 36.78,\n      .01: 40.29,\n      .005: 42.8\n    },\n    23: {\n      .995: 9.26,\n      .99: 10.2,\n      .975: 11.69,\n      .95: 13.09,\n      .9: 14.85,\n      .5: 22.34,\n      .1: 32.01,\n      .05: 35.17,\n      .025: 38.08,\n      .01: 41.64,\n      .005: 44.18\n    },\n    24: {\n      .995: 9.89,\n      .99: 10.86,\n      .975: 12.4,\n      .95: 13.85,\n      .9: 15.66,\n      .5: 23.34,\n      .1: 33.2,\n      .05: 36.42,\n      .025: 39.36,\n      .01: 42.98,\n      .005: 45.56\n    },\n    25: {\n      .995: 10.52,\n      .99: 11.52,\n      .975: 13.12,\n      .95: 14.61,\n      .9: 16.47,\n      .5: 24.34,\n      .1: 34.28,\n      .05: 37.65,\n      .025: 40.65,\n      .01: 44.31,\n      .005: 46.93\n    },\n    26: {\n      .995: 11.16,\n      .99: 12.2,\n      .975: 13.84,\n      .95: 15.38,\n      .9: 17.29,\n      .5: 25.34,\n      .1: 35.56,\n      .05: 38.89,\n      .025: 41.92,\n      .01: 45.64,\n      .005: 48.29\n    },\n    27: {\n      .995: 11.81,\n      .99: 12.88,\n      .975: 14.57,\n      .95: 16.15,\n      .9: 18.11,\n      .5: 26.34,\n      .1: 36.74,\n      .05: 40.11,\n      .025: 43.19,\n      .01: 46.96,\n      .005: 49.65\n    },\n    28: {\n      .995: 12.46,\n      .99: 13.57,\n      .975: 15.31,\n      .95: 16.93,\n      .9: 18.94,\n      .5: 27.34,\n      .1: 37.92,\n      .05: 41.34,\n      .025: 44.46,\n      .01: 48.28,\n      .005: 50.99\n    },\n    29: {\n      .995: 13.12,\n      .99: 14.26,\n      .975: 16.05,\n      .95: 17.71,\n      .9: 19.77,\n      .5: 28.34,\n      .1: 39.09,\n      .05: 42.56,\n      .025: 45.72,\n      .01: 49.59,\n      .005: 52.34\n    },\n    30: {\n      .995: 13.79,\n      .99: 14.95,\n      .975: 16.79,\n      .95: 18.49,\n      .9: 20.6,\n      .5: 29.34,\n      .1: 40.26,\n      .05: 43.77,\n      .025: 46.98,\n      .01: 50.89,\n      .005: 53.67\n    },\n    40: {\n      .995: 20.71,\n      .99: 22.16,\n      .975: 24.43,\n      .95: 26.51,\n      .9: 29.05,\n      .5: 39.34,\n      .1: 51.81,\n      .05: 55.76,\n      .025: 59.34,\n      .01: 63.69,\n      .005: 66.77\n    },\n    50: {\n      .995: 27.99,\n      .99: 29.71,\n      .975: 32.36,\n      .95: 34.76,\n      .9: 37.69,\n      .5: 49.33,\n      .1: 63.17,\n      .05: 67.5,\n      .025: 71.42,\n      .01: 76.15,\n      .005: 79.49\n    },\n    60: {\n      .995: 35.53,\n      .99: 37.48,\n      .975: 40.48,\n      .95: 43.19,\n      .9: 46.46,\n      .5: 59.33,\n      .1: 74.4,\n      .05: 79.08,\n      .025: 83.3,\n      .01: 88.38,\n      .005: 91.95\n    },\n    70: {\n      .995: 43.28,\n      .99: 45.44,\n      .975: 48.76,\n      .95: 51.74,\n      .9: 55.33,\n      .5: 69.33,\n      .1: 85.53,\n      .05: 90.53,\n      .025: 95.02,\n      .01: 100.42,\n      .005: 104.22\n    },\n    80: {\n      .995: 51.17,\n      .99: 53.54,\n      .975: 57.15,\n      .95: 60.39,\n      .9: 64.28,\n      .5: 79.33,\n      .1: 96.58,\n      .05: 101.88,\n      .025: 106.63,\n      .01: 112.33,\n      .005: 116.32\n    },\n    90: {\n      .995: 59.2,\n      .99: 61.75,\n      .975: 65.65,\n      .95: 69.13,\n      .9: 73.29,\n      .5: 89.33,\n      .1: 107.57,\n      .05: 113.14,\n      .025: 118.14,\n      .01: 124.12,\n      .005: 128.3\n    },\n    100: {\n      .995: 67.33,\n      .99: 70.06,\n      .975: 74.22,\n      .95: 77.93,\n      .9: 82.36,\n      .5: 99.33,\n      .1: 118.5,\n      .05: 124.34,\n      .025: 129.56,\n      .01: 135.81,\n      .005: 140.17\n    }\n  };\n  var j = Math.sqrt(2 * Math.PI),\n      B = {\n    gaussian: function gaussian(r) {\n      return Math.exp(-.5 * r * r) / j;\n    }\n  },\n      K = {\n    nrd: function nrd(r) {\n      var t = C(r),\n          n = d(r);\n      return \"number\" == typeof n && (t = Math.min(t, n / 1.34)), 1.06 * t * Math.pow(r.length, -.2);\n    }\n  };\n\n  function G(r, t, n) {\n    var e, a;\n    if (void 0 === t) e = B.gaussian;else if (\"string\" == typeof t) {\n      if (!B[t]) throw new Error('Unknown kernel \"' + t + '\"');\n      e = B[t];\n    } else e = t;\n    if (void 0 === n) a = K.nrd(r);else if (\"string\" == typeof n) {\n      if (!K[n]) throw new Error('Unknown bandwidth method \"' + n + '\"');\n      a = K[n](r);\n    } else a = n;\n    return function (t) {\n      var n = 0,\n          o = 0;\n\n      for (n = 0; n < r.length; n++) {\n        o += e((t - r[n]) / a);\n      }\n\n      return o / a / r.length;\n    };\n  }\n\n  var H = Math.sqrt(2 * Math.PI);\n\n  function W(r) {\n    for (var t = r, n = r, e = 1; e < 15; e++) {\n      t += n *= r * r / (2 * e + 1);\n    }\n\n    return Math.round(1e4 * (.5 + t / H * Math.exp(-r * r / 2))) / 1e4;\n  }\n\n  for (var J = [], Q = 0; Q <= 3.09; Q += .01) {\n    J.push(W(Q));\n  }\n\n  function Y(r) {\n    var t = 1 / (1 + .5 * Math.abs(r)),\n        n = t * Math.exp(-r * r + ((((((((.17087277 * t - .82215223) * t + 1.48851587) * t - 1.13520398) * t + .27886807) * t - .18628806) * t + .09678418) * t + .37409196) * t + 1.00002368) * t - 1.26551223);\n    return r >= 0 ? 1 - n : n - 1;\n  }\n\n  function Z(r) {\n    var t = 8 * (Math.PI - 3) / (3 * Math.PI * (4 - Math.PI)),\n        n = Math.sqrt(Math.sqrt(Math.pow(2 / (Math.PI * t) + Math.log(1 - r * r) / 2, 2) - Math.log(1 - r * r) / t) - (2 / (Math.PI * t) + Math.log(1 - r * r) / 2));\n    return r >= 0 ? n : -n;\n  }\n\n  function $(r) {\n    if (\"number\" == typeof r) return r < 0 ? -1 : 0 === r ? 0 : 1;\n    throw new TypeError(\"not a number\");\n  }\n\n  function rr(r, t) {\n    for (var n = 0, e = 0; e < r.length; e++) {\n      var a = r[e] - t[e];\n      n += a * a;\n    }\n\n    return Math.sqrt(n);\n  }\n\n  function tr(r, t) {\n    return r.map(function (r) {\n      for (var n = Number.MAX_VALUE, e = -1, a = 0; a < t.length; a++) {\n        var o = rr(r, t[a]);\n        o < n && (n = o, e = a);\n      }\n\n      return e;\n    });\n  }\n\n  function nr(r, t, n) {\n    for (var e = r[0].length, a = S(n, e), o = Array(n).fill(0), i = r.length, u = 0; u < i; u++) {\n      for (var h = r[u], f = t[u], l = a[f], s = 0; s < e; s++) {\n        l[s] += h[s];\n      }\n\n      o[f] += 1;\n    }\n\n    for (var c = 0; c < n; c++) {\n      if (0 === o[c]) throw new Error(\"Centroid \" + c + \" has no friends\");\n\n      for (var g = a[c], v = 0; v < e; v++) {\n        g[v] /= o[c];\n      }\n    }\n\n    return a;\n  }\n\n  function er(r, t) {\n    for (var n = 0, e = 0; e < r.length; e++) {\n      n += rr(r[e], t[e]);\n    }\n\n    return n;\n  }\n\n  function ar(r, t) {\n    if (r.length !== t.length) throw new Error(\"must have exactly as many labels as points\");\n\n    for (var n = function (r) {\n      for (var t = 1 + f(r), n = Array(t), e = 0; e < r.length; e++) {\n        var a = r[e];\n        void 0 === n[a] && (n[a] = []), n[a].push(e);\n      }\n\n      return n;\n    }(t), e = function (r) {\n      for (var t = r.length, n = S(t, t), e = 0; e < t; e++) {\n        for (var a = 0; a < e; a++) {\n          n[e][a] = rr(r[e], r[a]), n[a][e] = n[e][a];\n        }\n      }\n\n      return n;\n    }(r), a = [], o = 0; o < r.length; o++) {\n      var i = 0;\n\n      if (n[t[o]].length > 1) {\n        var u = ir(o, n[t[o]], e),\n            h = or(o, t, n, e);\n        i = (h - u) / Math.max(u, h);\n      }\n\n      a.push(i);\n    }\n\n    return a;\n  }\n\n  function or(r, t, n, e) {\n    for (var a = t[r], o = Number.MAX_VALUE, i = 0; i < n.length; i++) {\n      if (i !== a) {\n        var u = ir(r, n[i], e);\n        u < o && (o = u);\n      }\n    }\n\n    return o;\n  }\n\n  function ir(r, t, n) {\n    for (var e = 0, a = 0; a < t.length; a++) {\n      e += n[r][t[a]];\n    }\n\n    return e / t.length;\n  }\n\n  function ur(r, t) {\n    return 0 === r && 0 === t ? 0 : Math.abs((r - t) / t);\n  }\n\n  r.BayesianClassifier = V, r.PerceptronModel = F, r.addToMean = function (r, t, n) {\n    return r + (n - r) / (t + 1);\n  }, r.approxEqual = function (r, t, n) {\n    return void 0 === n && (n = L), ur(r, t) <= n;\n  }, r.average = n, r.averageSimple = D, r.bayesian = V, r.bernoulliDistribution = function (r) {\n    if (r < 0 || r > 1) throw new Error(\"bernoulliDistribution requires probability to be between 0 and 1 inclusive\");\n    return [1 - r, r];\n  }, r.binomialDistribution = function (r, t) {\n    if (!(t < 0 || t > 1 || r <= 0 || r % 1 != 0)) {\n      var n = 0,\n          e = 0,\n          a = [],\n          o = 1;\n\n      do {\n        a[n] = o * Math.pow(t, n) * Math.pow(1 - t, r - n), e += a[n], o = o * (r - ++n + 1) / n;\n      } while (e < .9999);\n\n      return a;\n    }\n  }, r.bisect = function (r, t, n, e, a) {\n    if (\"function\" != typeof r) throw new TypeError(\"func must be a function\");\n\n    for (var o = 0; o < e; o++) {\n      var i = (t + n) / 2;\n      if (0 === r(i) || Math.abs((n - t) / 2) < a) return i;\n      $(r(i)) === $(r(t)) ? t = i : n = i;\n    }\n\n    throw new Error(\"maximum number of iterations exceeded\");\n  }, r.chiSquaredDistributionTable = X, r.chiSquaredGoodnessOfFit = function (r, t, e) {\n    for (var a = 0, o = t(n(r)), i = [], u = [], h = 0; h < r.length; h++) {\n      void 0 === i[r[h]] && (i[r[h]] = 0), i[r[h]]++;\n    }\n\n    for (var f = 0; f < i.length; f++) {\n      void 0 === i[f] && (i[f] = 0);\n    }\n\n    for (var l in o) {\n      l in i && (u[+l] = o[l] * r.length);\n    }\n\n    for (var s = u.length - 1; s >= 0; s--) {\n      u[s] < 3 && (u[s - 1] += u[s], u.pop(), i[s - 1] += i[s], i.pop());\n    }\n\n    for (var c = 0; c < i.length; c++) {\n      a += Math.pow(i[c] - u[c], 2) / u[c];\n    }\n\n    var g = i.length - 1 - 1;\n    return X[g][e] < a;\n  }, r.chunk = function (r, t) {\n    var n = [];\n    if (t < 1) throw new Error(\"chunk size must be a positive number\");\n    if (Math.floor(t) !== t) throw new Error(\"chunk size must be an integer\");\n\n    for (var e = 0; e < r.length; e += t) {\n      n.push(r.slice(e, e + t));\n    }\n\n    return n;\n  }, r.ckmeans = function (r, t) {\n    if (t > r.length) throw new Error(\"cannot generate more classes than there are data values\");\n    var n = u(r);\n    if (1 === k(n)) return [n];\n    var e = S(t, n.length),\n        a = S(t, n.length);\n    !function (r, t, n) {\n      for (var e = t[0].length, a = r[Math.floor(e / 2)], o = [], i = [], u = 0, h = void 0; u < e; ++u) {\n        h = r[u] - a, 0 === u ? (o.push(h), i.push(h * h)) : (o.push(o[u - 1] + h), i.push(i[u - 1] + h * h)), t[0][u] = A(0, u, o, i), n[0][u] = 0;\n      }\n\n      for (var f = 1; f < t.length; ++f) {\n        N(f < t.length - 1 ? f : e - 1, e - 1, f, t, n, o, i);\n      }\n    }(n, e, a);\n\n    for (var o = [], i = a[0].length - 1, h = a.length - 1; h >= 0; h--) {\n      var f = a[h][i];\n      o[h] = n.slice(f, i + 1), h > 0 && (i = f - 1);\n    }\n\n    return o;\n  }, r.coefficientOfVariation = function (r) {\n    return C(r) / n(r);\n  }, r.combinations = function r(t, n) {\n    var e,\n        a,\n        o,\n        i,\n        u = [];\n\n    for (e = 0; e < t.length; e++) {\n      if (1 === n) u.push([t[e]]);else for (o = r(t.slice(e + 1, t.length), n - 1), a = 0; a < o.length; a++) {\n        (i = o[a]).unshift(t[e]), u.push(i);\n      }\n    }\n\n    return u;\n  }, r.combinationsReplacement = function r(t, n) {\n    for (var e = [], a = 0; a < t.length; a++) {\n      if (1 === n) e.push([t[a]]);else for (var o = r(t.slice(a, t.length), n - 1), i = 0; i < o.length; i++) {\n        e.push([t[a]].concat(o[i]));\n      }\n    }\n\n    return e;\n  }, r.combineMeans = _, r.combineVariances = function (r, t, n, e, a, o) {\n    var i = _(t, n, a, o);\n\n    return (n * (r + Math.pow(t - i, 2)) + o * (e + Math.pow(a - i, 2))) / (n + o);\n  }, r.cumulativeStdLogisticProbability = function (r) {\n    return 1 / (Math.exp(-r) + 1);\n  }, r.cumulativeStdNormalProbability = function (r) {\n    var t = Math.abs(r),\n        n = Math.min(Math.round(100 * t), J.length - 1);\n    return r >= 0 ? J[n] : +(1 - J[n]).toFixed(4);\n  }, r.epsilon = L, r.equalIntervalBreaks = function (r, t) {\n    if (r.length < 2) return r;\n\n    for (var n = h(r), e = f(r), a = [n], o = (e - n) / t, i = 1; i < t; i++) {\n      a.push(a[0] + o * i);\n    }\n\n    return a.push(e), a;\n  }, r.erf = Y, r.errorFunction = Y, r.extent = function (r) {\n    if (0 === r.length) throw new Error(\"extent requires at least one data point\");\n\n    for (var t = r[0], n = r[0], e = 1; e < r.length; e++) {\n      r[e] > n && (n = r[e]), r[e] < t && (t = r[e]);\n    }\n\n    return [t, n];\n  }, r.extentSorted = function (r) {\n    return [r[0], r[r.length - 1]];\n  }, r.factorial = U, r.gamma = function r(t) {\n    if (Number.isInteger(t)) return t <= 0 ? NaN : U(t - 1);\n    if (--t < 0) return Math.PI / (Math.sin(Math.PI * -t) * r(-t));\n    var n = t + 1 / 4;\n    return Math.pow(t / Math.E, t) * Math.sqrt(2 * Math.PI * (t + 1 / 6)) * (1 + 1 / 144 / Math.pow(n, 2) - 1 / 12960 / Math.pow(n, 3) - 257 / 207360 / Math.pow(n, 4) - 52 / 2612736 / Math.pow(n, 5) + 5741173 / 9405849600 / Math.pow(n, 6) + 37529 / 18811699200 / Math.pow(n, 7));\n  }, r.gammaln = function (r) {\n    if (r <= 0) return 1 / 0;\n    r--;\n\n    for (var t = z[0], n = 1; n < 15; n++) {\n      t += z[n] / (r + n);\n    }\n\n    var e = 5.2421875 + r;\n    return O + Math.log(t) - e + (r + .5) * Math.log(e);\n  }, r.geometricMean = function (r) {\n    if (0 === r.length) throw new Error(\"geometricMean requires at least one data point\");\n\n    for (var t = 1, n = 0; n < r.length; n++) {\n      if (r[n] < 0) throw new Error(\"geometricMean requires only non-negative numbers as input\");\n      t *= r[n];\n    }\n\n    return Math.pow(t, 1 / r.length);\n  }, r.harmonicMean = function (r) {\n    if (0 === r.length) throw new Error(\"harmonicMean requires at least one data point\");\n\n    for (var t = 0, n = 0; n < r.length; n++) {\n      if (r[n] <= 0) throw new Error(\"harmonicMean requires only positive numbers as input\");\n      t += 1 / r[n];\n    }\n\n    return r.length / t;\n  }, r.interquartileRange = d, r.inverseErrorFunction = Z, r.iqr = d, r.kMeansCluster = function (r, t, n) {\n    void 0 === n && (n = Math.random);\n\n    for (var e = null, a = x(r, t, n), o = null, i = Number.MAX_VALUE; 0 !== i;) {\n      e = a, i = er(a = nr(r, o = tr(r, a), t), e);\n    }\n\n    return {\n      labels: o,\n      centroids: a\n    };\n  }, r.kde = G, r.kernelDensityEstimation = G, r.linearRegression = function (r) {\n    var t,\n        n,\n        e = r.length;\n    if (1 === e) t = 0, n = r[0][1];else {\n      for (var a, o, i, u = 0, h = 0, f = 0, l = 0, s = 0; s < e; s++) {\n        u += o = (a = r[s])[0], h += i = a[1], f += o * o, l += o * i;\n      }\n\n      n = h / e - (t = (e * l - u * h) / (e * f - u * u)) * u / e;\n    }\n    return {\n      m: t,\n      b: n\n    };\n  }, r.linearRegressionLine = function (r) {\n    return function (t) {\n      return r.b + r.m * t;\n    };\n  }, r.logAverage = function (r) {\n    if (0 === r.length) throw new Error(\"logAverage requires at least one data point\");\n\n    for (var t = 0, n = 0; n < r.length; n++) {\n      if (r[n] < 0) throw new Error(\"logAverage requires only non-negative numbers as input\");\n      t += Math.log(r[n]);\n    }\n\n    return Math.exp(t / r.length);\n  }, r.logit = function (r) {\n    if (r <= 0 || r >= 1) throw new Error(\"p must be strictly between zero and one\");\n    return Math.log(r / (1 - r));\n  }, r.mad = q, r.max = f, r.maxSorted = function (r) {\n    return r[r.length - 1];\n  }, r.mean = n, r.meanSimple = D, r.median = b, r.medianAbsoluteDeviation = q, r.medianSorted = function (r) {\n    return s(r, .5);\n  }, r.min = h, r.minSorted = function (r) {\n    return r[0];\n  }, r.mode = function (r) {\n    return i(u(r));\n  }, r.modeFast = function (r) {\n    for (var t, n = new Map(), e = 0, a = 0; a < r.length; a++) {\n      var o = n.get(r[a]);\n      void 0 === o ? o = 1 : o++, o > e && (t = r[a], e = o), n.set(r[a], o);\n    }\n\n    if (0 === e) throw new Error(\"mode requires at last one data point\");\n    return t;\n  }, r.modeSorted = i, r.numericSort = u, r.perceptron = F, r.permutationTest = function (r, t, e, a, o) {\n    if (void 0 === a && (a = 1e4), void 0 === e && (e = \"two_side\"), \"two_side\" !== e && \"greater\" !== e && \"less\" !== e) throw new Error(\"`alternative` must be either 'two_side', 'greater', or 'less'.\");\n\n    for (var i = n(r) - n(t), u = new Array(a), h = r.concat(t), f = Math.floor(h.length / 2), l = 0; l < a; l++) {\n      y(h, o);\n      var s = h.slice(0, f),\n          c = h.slice(f, h.length),\n          g = n(s) - n(c);\n      u[l] = g;\n    }\n\n    var v = 0;\n    if (\"two_side\" === e) for (var p = 0; p <= a; p++) {\n      Math.abs(u[p]) >= Math.abs(i) && (v += 1);\n    } else if (\"greater\" === e) for (var m = 0; m <= a; m++) {\n      u[m] >= i && (v += 1);\n    } else for (var w = 0; w <= a; w++) {\n      u[w] <= i && (v += 1);\n    }\n    return v / a;\n  }, r.permutationsHeap = function (r) {\n    for (var t = new Array(r.length), n = [r.slice()], e = 0; e < r.length; e++) {\n      t[e] = 0;\n    }\n\n    for (var a = 0; a < r.length;) {\n      if (t[a] < a) {\n        var o = 0;\n        a % 2 != 0 && (o = t[a]);\n        var i = r[o];\n        r[o] = r[a], r[a] = i, n.push(r.slice()), t[a]++, a = 0;\n      } else t[a] = 0, a++;\n    }\n\n    return n;\n  }, r.poissonDistribution = function (r) {\n    if (!(r <= 0)) {\n      var t = 0,\n          n = 0,\n          e = [],\n          a = 1;\n\n      do {\n        e[t] = Math.exp(-r) * Math.pow(r, t) / a, n += e[t], a *= ++t;\n      } while (n < .9999);\n\n      return e;\n    }\n  }, r.probit = function (r) {\n    return 0 === r ? r = L : r >= 1 && (r = .9999), Math.sqrt(2) * Z(2 * r - 1);\n  }, r.product = function (r) {\n    for (var t = 1, n = 0; n < r.length; n++) {\n      t *= r[n];\n    }\n\n    return t;\n  }, r.quantile = v, r.quantileRank = function (r, t) {\n    return M(u(r), t);\n  }, r.quantileRankSorted = M, r.quantileSorted = s, r.quickselect = c, r.rSquared = function (r, t) {\n    if (r.length < 2) return 1;\n\n    for (var n = 0, e = 0; e < r.length; e++) {\n      n += r[e][1];\n    }\n\n    for (var a = n / r.length, o = 0, i = 0; i < r.length; i++) {\n      o += Math.pow(a - r[i][1], 2);\n    }\n\n    for (var u = 0, h = 0; h < r.length; h++) {\n      u += Math.pow(r[h][1] - t(r[h][0]), 2);\n    }\n\n    return 1 - u / o;\n  }, r.relativeError = ur, r.rms = R, r.rootMeanSquare = R, r.sample = x, r.sampleCorrelation = T, r.sampleCovariance = P, r.sampleKurtosis = function (r) {\n    var t = r.length;\n    if (t < 4) throw new Error(\"sampleKurtosis requires at least four data points\");\n\n    for (var e, a = n(r), o = 0, i = 0, u = 0; u < t; u++) {\n      o += (e = r[u] - a) * e, i += e * e * e * e;\n    }\n\n    return (t - 1) / ((t - 2) * (t - 3)) * (t * (t + 1) * i / (o * o) - 3 * (t - 1));\n  }, r.sampleRankCorrelation = function (r, t) {\n    for (var n = r.map(function (r, t) {\n      return [r, t];\n    }).sort(function (r, t) {\n      return r[0] - t[0];\n    }).map(function (r) {\n      return r[1];\n    }), e = t.map(function (r, t) {\n      return [r, t];\n    }).sort(function (r, t) {\n      return r[0] - t[0];\n    }).map(function (r) {\n      return r[1];\n    }), a = Array(n.length), o = Array(n.length), i = 0; i < n.length; i++) {\n      a[n[i]] = i, o[e[i]] = i;\n    }\n\n    return T(a, o);\n  }, r.sampleSkewness = function (r) {\n    if (r.length < 3) throw new Error(\"sampleSkewness requires at least three data points\");\n\n    for (var t, e = n(r), a = 0, o = 0, i = 0; i < r.length; i++) {\n      a += (t = r[i] - e) * t, o += t * t * t;\n    }\n\n    var u = r.length - 1,\n        h = Math.sqrt(a / u),\n        f = r.length;\n    return f * o / ((f - 1) * (f - 2) * Math.pow(h, 3));\n  }, r.sampleStandardDeviation = C, r.sampleVariance = I, r.sampleWithReplacement = function (r, t, n) {\n    if (0 === r.length) return [];\n    n = n || Math.random;\n\n    for (var e = r.length, a = [], o = 0; o < t; o++) {\n      var i = Math.floor(n() * e);\n      a.push(r[i]);\n    }\n\n    return a;\n  }, r.shuffle = E, r.shuffleInPlace = y, r.sign = $, r.silhouette = ar, r.silhouetteMetric = function (r, t) {\n    return f(ar(r, t));\n  }, r.standardDeviation = o, r.standardNormalTable = J, r.subtractFromMean = function (r, t, n) {\n    return (r * t - n) / (t - 1);\n  }, r.sum = t, r.sumNthPowerDeviations = e, r.sumSimple = l, r.tTest = function (r, t) {\n    return (n(r) - t) / (o(r) / Math.sqrt(r.length));\n  }, r.tTestTwoSample = function (r, t, e) {\n    var a = r.length,\n        o = t.length;\n    if (!a || !o) return null;\n    e || (e = 0);\n    var i = n(r),\n        u = n(t),\n        h = I(r),\n        f = I(t);\n\n    if (\"number\" == typeof i && \"number\" == typeof u && \"number\" == typeof h && \"number\" == typeof f) {\n      var l = ((a - 1) * h + (o - 1) * f) / (a + o - 2);\n      return (i - u - e) / Math.sqrt(l * (1 / a + 1 / o));\n    }\n  }, r.uniqueCountSorted = k, r.variance = a, r.wilcoxonRankSum = function (r, t) {\n    if (!r.length || !t.length) throw new Error(\"Neither sample can be empty\");\n\n    for (var n = r.map(function (r) {\n      return {\n        label: \"x\",\n        value: r\n      };\n    }).concat(t.map(function (r) {\n      return {\n        label: \"y\",\n        value: r\n      };\n    })).sort(function (r, t) {\n      return r.value - t.value;\n    }), e = 0; e < n.length; e++) {\n      n[e].rank = e;\n    }\n\n    for (var a = [n[0].rank], o = 1; o < n.length; o++) {\n      n[o].value === n[o - 1].value ? (a.push(n[o].rank), o === n.length - 1 && i(n, a)) : a.length > 1 ? i(n, a) : a = [n[o].rank];\n    }\n\n    function i(r, t) {\n      for (var n = (t[0] + t[t.length - 1]) / 2, e = 0; e < t.length; e++) {\n        r[t[e]].rank = n;\n      }\n    }\n\n    for (var u = 0, h = 0; h < n.length; h++) {\n      var f = n[h];\n      \"x\" === f.label && (u += f.rank + 1);\n    }\n\n    return u;\n  }, r.zScore = function (r, t, n) {\n    return (r - t) / n;\n  }, Object.defineProperty(r, \"__esModule\", {\n    value: !0\n  });\n});","map":{"version":3,"sources":["../src/sum.js","../src/mean.js","../src/sum_nth_power_deviations.js","../src/variance.js","../src/standard_deviation.js","../src/mode_sorted.js","../src/numeric_sort.js","../src/min.js","../src/max.js","../src/sum_simple.js","../src/quantile_sorted.js","../src/quickselect.js","../src/quantile.js","../src/quantile_rank_sorted.js","../src/interquartile_range.js","../src/median.js","../src/median_absolute_deviation.js","../src/shuffle_in_place.js","../src/shuffle.js","../src/sample.js","../src/make_matrix.js","../src/unique_count_sorted.js","../src/ckmeans.js","../src/sample_covariance.js","../src/sample_variance.js","../src/sample_standard_deviation.js","../src/sample_correlation.js","../src/combine_means.js","../src/mean_simple.js","../src/root_mean_square.js","../src/bayesian_classifier.js","../src/perceptron.js","../src/epsilon.js","../src/factorial.js","../src/gammaln.js","../src/chi_squared_distribution_table.js","../src/kernel_density_estimation.js","../src/standard_normal_table.js","../src/error_function.js","../src/inverse_error_function.js","../src/sign.js","../src/euclidean_distance.js","../src/k_means_cluster.js","../src/silhouette.js","../src/relative_error.js","../src/add_to_mean.js","../src/approx_equal.js","../src/bernoulli_distribution.js","../src/binomial_distribution.js","../src/bisect.js","../src/chi_squared_goodness_of_fit.js","../src/chunk.js","../src/coefficient_of_variation.js","../src/combinations.js","../src/combinations_replacement.js","../src/combine_variances.js","../src/cumulative_std_logistic_probability.js","../src/cumulative_std_normal_probability.js","../src/equal_interval_breaks.js","../src/extent.js","../src/extent_sorted.js","../src/gamma.js","../src/geometric_mean.js","../src/harmonic_mean.js","../src/linear_regression.js","../src/linear_regression_line.js","../src/log_average.js","../src/logit.js","../src/max_sorted.js","../src/median_sorted.js","../src/min_sorted.js","../src/mode.js","../src/mode_fast.js","../src/permutation_test.js","../src/permutations_heap.js","../src/poisson_distribution.js","../src/probit.js","../src/product.js","../src/quantile_rank.js","../src/r_squared.js","../src/sample_kurtosis.js","../src/sample_rank_correlation.js","../src/sample_skewness.js","../src/sample_with_replacement.js","../src/silhouette_metric.js","../src/subtract_from_mean.js","../src/t_test.js","../src/t_test_two_sample.js","../src/wilcoxon_rank_sum.js","../src/z_score.js"],"names":["sum","x","length","let","correction","transition","NaN","i","Math","abs","mean","Error","sumNthPowerDeviations","n","const","meanValue","tempValue","pow","variance","standardDeviation","v","sqrt","modeSorted","sorted","last","value","maxSeen","seenThis","numericSort","slice","sort","a","b","min","max","sumSimple","quantileSorted","p","idx","ceil","quickselect","arr","k","left","right","m","z","log","s","exp","sd","floor","t","j","swap","tmp","quantile","copy","Array","isArray","multiQuantileSelect","results","quantileIndex","quantileSelect","indices","push","compare","stack","r","pop","l","len","quantileRankSorted","lowerBound","u","upperBound","mid","lo","hi","interquartileRange","q1","q2","median","medianAbsoluteDeviation","medianValue","medianAbsoluteDeviations","shuffleInPlace","randomSource","random","temporary","index","shuffle","sample","makeMatrix","columns","rows","matrix","column","uniqueCountSorted","uniqueValueCount","lastSeenValue","ssq","sums","sumsOfSquares","sji","muji","fillMatrixColumn","iMin","iMax","cluster","backtrackMatrix","jlow","jhigh","ssqjlow","ssqj","data","nValues","shift","shiftedValue","nClusters","fillMatrices","clusters","clusterRight","clusterLeft","sampleCovariance","y","xmean","ymean","sampleVariance","sampleStandardDeviation","sampleVarianceX","sampleCorrelation","combineMeans","mean1","n1","mean2","n2","meanSimple","rootMeanSquare","sumOfSquares","BayesianClassifier","this","totalCount","train","item","category","undefined","score","odds","oddsSums","combination","PerceptronModel","weights","bias","predict","features","label","prediction","gradient","epsilon","factorial","accumulator","COEFFICIENTS","LOGSQRT2PI","PI","Infinity","g","chiSquaredDistributionTable","SQRT_2PI","kernels","gaussian","bandwidthMethods","nrd","stddev","iqr","kernelDensityEstimation","X","kernel","bandwidthMethod","kernelFn","bandwidth","cumulativeDistribution","round","standardNormalTable","errorFunction","tau","inverseErrorFunction","inv","sign","TypeError","euclideanDistance","diff","points","numCluster","oldCentroids","newCentroids","labels","change","Number","MAX_VALUE","labelPoints","calculateCentroids","calculateChange","centroids","map","minDist","dist","dimension","counts","fill","numPoints","point","current","centroid","total","silhouette","groupings","createGroups","distances","calculateAllDistances","result","meanDistanceFromPointToGroup","meanDistanceToNearestGroup","numGroups","which","d","group","relativeError","actual","expected","newValue","tolerance","trials","probability","cumulativeProbability","cells","binomialCoefficient","func","start","end","maxIterations","errorTolerance","output","distributionType","significance","chiSquared","hypothesizedDistribution","observedFrequencies","expectedFrequencies","degreesOfFreedom","chunkSize","combinations","subI","combinationList","subsetCombinations","next","unshift","combinationsReplacement","concat","variance1","variance2","newMean","absZ","toFixed","nClasses","theMin","theMax","breaks","breakSize","gamma","isInteger","sin","E","seriesDenom","reciprocalSum","dataLength","sumX","sumY","sumXX","sumXY","mb","Map","mode","modeCount","newCount","get","set","sampleX","sampleY","alternative","testStatistic","testStatDsn","allData","midIndex","permLeft","permRight","permTestStatistic","numExtremeTStats","elements","indexes","permutations","swapFrom","temp","lambda","factorialX","average","err","secondCentralMoment","fourthCentralMoment","xIndexes","pair","yIndexes","xRanks","yRanks","sumSquaredDeviations","sumCubedDeviations","besselsCorrection","theSampleStandardDeviation","expectedValue","difference","meanX","meanY","sampleVarianceY","weightedVariance","pooledSamples","rank","tiedRanks","replaceRanksInPlace","rankSum"],"mappings":"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","sourcesContent":["/**\n * Our default sum is the [Kahan-Babuska algorithm](https://pdfs.semanticscholar.org/1760/7d467cda1d0277ad272deb2113533131dc09.pdf).\n * This method is an improvement over the classical\n * [Kahan summation algorithm](https://en.wikipedia.org/wiki/Kahan_summation_algorithm).\n * It aims at computing the sum of a list of numbers while correcting for\n * floating-point errors. Traditionally, sums are calculated as many\n * successive additions, each one with its own floating-point roundoff. These\n * losses in precision add up as the number of numbers increases. This alternative\n * algorithm is more accurate than the simple way of calculating sums by simple\n * addition.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sum([1, 2, 3]); // => 6\n */\nfunction sum(x) {\n    // If the array is empty, we needn't bother computing its sum\n    if (x.length === 0) {\n        return 0;\n    }\n\n    // Initializing the sum as the first number in the array\n    let sum = x[0];\n\n    // Keeping track of the floating-point error correction\n    let correction = 0;\n\n    let transition;\n\n    if (typeof sum !== \"number\") {\n        return NaN;\n    }\n\n    for (let i = 1; i < x.length; i++) {\n        if (typeof x[i] !== \"number\") {\n            return NaN;\n        }\n        transition = sum + x[i];\n\n        // Here we need to update the correction in a different fashion\n        // if the new absolute value is greater than the absolute sum\n        if (Math.abs(sum) >= Math.abs(x[i])) {\n            correction += sum - transition + x[i];\n        } else {\n            correction += x[i] - transition + sum;\n        }\n\n        sum = transition;\n    }\n\n    // Returning the corrected sum\n    return sum + correction;\n}\n\nexport default sum;\n","import sum from \"./sum.js\";\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction mean(x) {\n    if (x.length === 0) {\n        throw new Error(\"mean requires at least one data point\");\n    }\n\n    return sum(x) / x.length;\n}\n\nexport default mean;\n","import mean from \"./mean.js\";\n\n/**\n * The sum of deviations to the Nth power.\n * When n=2 it's the sum of squared deviations.\n * When n=3 it's the sum of cubed deviations.\n *\n * @param {Array<number>} x\n * @param {number} n power\n * @returns {number} sum of nth power deviations\n *\n * @example\n * var input = [1, 2, 3];\n * // since the variance of a set is the mean squared\n * // deviations, we can calculate that with sumNthPowerDeviations:\n * sumNthPowerDeviations(input, 2) / input.length;\n */\nfunction sumNthPowerDeviations(x, n) {\n    const meanValue = mean(x);\n    let sum = 0;\n    let tempValue;\n    let i;\n\n    // This is an optimization: when n is 2 (we're computing a number squared),\n    // multiplying the number by itself is significantly faster than using\n    // the Math.pow method.\n    if (n === 2) {\n        for (i = 0; i < x.length; i++) {\n            tempValue = x[i] - meanValue;\n            sum += tempValue * tempValue;\n        }\n    } else {\n        for (i = 0; i < x.length; i++) {\n            sum += Math.pow(x[i] - meanValue, n);\n        }\n    }\n\n    return sum;\n}\n\nexport default sumNthPowerDeviations;\n","import sumNthPowerDeviations from \"./sum_nth_power_deviations.js\";\n\n/**\n * The [variance](http://en.wikipedia.org/wiki/Variance)\n * is the sum of squared deviations from the mean.\n *\n * This is an implementation of variance, not sample variance:\n * see the `sampleVariance` method if you want a sample measure.\n *\n * @param {Array<number>} x a population of one or more data points\n * @returns {number} variance: a value greater than or equal to zero.\n * zero indicates that all values are identical.\n * @throws {Error} if x's length is 0\n * @example\n * variance([1, 2, 3, 4, 5, 6]); // => 2.9166666666666665\n */\nfunction variance(x) {\n    if (x.length === 0) {\n        throw new Error(\"variance requires at least one data point\");\n    }\n\n    // Find the mean of squared deviations between the\n    // mean value and each value.\n    return sumNthPowerDeviations(x, 2) / x.length;\n}\n\nexport default variance;\n","import variance from \"./variance.js\";\n\n/**\n * The [standard deviation](http://en.wikipedia.org/wiki/Standard_deviation)\n * is the square root of the variance. This is also known as the population\n * standard deviation. It's useful for measuring the amount\n * of variation or dispersion in a set of values.\n *\n * Standard deviation is only appropriate for full-population knowledge: for\n * samples of a population, {@link sampleStandardDeviation} is\n * more appropriate.\n *\n * @param {Array<number>} x input\n * @returns {number} standard deviation\n * @example\n * variance([2, 4, 4, 4, 5, 5, 7, 9]); // => 4\n * standardDeviation([2, 4, 4, 4, 5, 5, 7, 9]); // => 2\n */\nfunction standardDeviation(x) {\n    if (x.length === 1) {\n        return 0;\n    }\n    const v = variance(x);\n    return Math.sqrt(v);\n}\n\nexport default standardDeviation;\n","/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)` because the input is sorted.\n *\n * @param {Array<number>} sorted a sample of one or more data points\n * @returns {number} mode\n * @throws {Error} if sorted is empty\n * @example\n * modeSorted([0, 0, 1]); // => 0\n */\nfunction modeSorted(sorted) {\n    // Handle edge cases:\n    // The mode of an empty list is undefined\n    if (sorted.length === 0) {\n        throw new Error(\"mode requires at least one data point\");\n    } else if (sorted.length === 1) {\n        return sorted[0];\n    }\n\n    // This assumes it is dealing with an array of size > 1, since size\n    // 0 and 1 are handled immediately. Hence it starts at index 1 in the\n    // array.\n    let last = sorted[0],\n        // store the mode as we find new modes\n        value = NaN,\n        // store how many times we've seen the mode\n        maxSeen = 0,\n        // how many times the current candidate for the mode\n        // has been seen\n        seenThis = 1;\n\n    // end at sorted.length + 1 to fix the case in which the mode is\n    // the highest number that occurs in the sequence. the last iteration\n    // compares sorted[i], which is undefined, to the highest number\n    // in the series\n    for (let i = 1; i < sorted.length + 1; i++) {\n        // we're seeing a new number pass by\n        if (sorted[i] !== last) {\n            // the last number is the new mode since we saw it more\n            // often than the old one\n            if (seenThis > maxSeen) {\n                maxSeen = seenThis;\n                value = last;\n            }\n            seenThis = 1;\n            last = sorted[i];\n            // if this isn't a new number, it's one more occurrence of\n            // the potential mode\n        } else {\n            seenThis++;\n        }\n    }\n    return value;\n}\n\nexport default modeSorted;\n","/**\n * Sort an array of numbers by their numeric value, ensuring that the\n * array is not changed in place.\n *\n * This is necessary because the default behavior of .sort\n * in JavaScript is to sort arrays as string values\n *\n *     [1, 10, 12, 102, 20].sort()\n *     // output\n *     [1, 10, 102, 12, 20]\n *\n * @param {Array<number>} x input array\n * @return {Array<number>} sorted array\n * @private\n * @example\n * numericSort([3, 2, 1]) // => [1, 2, 3]\n */\nfunction numericSort(x) {\n    return (\n        x\n            // ensure the array is not changed in-place\n            .slice()\n            // comparator function that treats input as numeric\n            .sort(function (a, b) {\n                return a - b;\n            })\n    );\n}\n\nexport default numericSort;\n","/**\n * The min is the lowest number in the array.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} minimum value\n * @example\n * min([1, 5, -10, 100, 2]); // => -10\n */\nfunction min(x) {\n    if (x.length === 0) {\n        throw new Error(\"min requires at least one data point\");\n    }\n\n    let value = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] < value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\nexport default min;\n","/**\n * This computes the maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} maximum value\n * @throws {Error} if the length of x is less than one\n * @example\n * max([1, 2, 3, 4]);\n * // => 4\n */\nfunction max(x) {\n    if (x.length === 0) {\n        throw new Error(\"max requires at least one data point\");\n    }\n\n    let value = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] > value) {\n            value = x[i];\n        }\n    }\n    return value;\n}\n\nexport default max;\n","/**\n * The simple [sum](https://en.wikipedia.org/wiki/Summation) of an array\n * is the result of adding all numbers together, starting from zero.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} sum of all input numbers\n * @example\n * sumSimple([1, 2, 3]); // => 6\n */\nfunction sumSimple(x) {\n    let value = 0;\n    for (let i = 0; i < x.length; i++) {\n        if (typeof x[i] !== \"number\") {\n            return NaN;\n        }\n        value += x[i];\n    }\n    return value;\n}\n\nexport default sumSimple;\n","/**\n * This is the internal implementation of quantiles: when you know\n * that the order is sorted, you don't need to re-sort it, and the computations\n * are faster.\n *\n * @param {Array<number>} x sample of one or more data points\n * @param {number} p desired quantile: a number between 0 to 1, inclusive\n * @returns {number} quantile value\n * @throws {Error} if p ix outside of the range from 0 to 1\n * @throws {Error} if x is empty\n * @example\n * quantileSorted([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantileSorted(x, p) {\n    const idx = x.length * p;\n    if (x.length === 0) {\n        throw new Error(\"quantile requires at least one data point.\");\n    } else if (p < 0 || p > 1) {\n        throw new Error(\"quantiles must be between 0 and 1\");\n    } else if (p === 1) {\n        // If p is 1, directly return the last element\n        return x[x.length - 1];\n    } else if (p === 0) {\n        // If p is 0, directly return the first element\n        return x[0];\n    } else if (idx % 1 !== 0) {\n        // If p is not integer, return the next element in array\n        return x[Math.ceil(idx) - 1];\n    } else if (x.length % 2 === 0) {\n        // If the list has even-length, we'll take the average of this number\n        // and the next value, if there is one\n        return (x[idx - 1] + x[idx]) / 2;\n    } else {\n        // Finally, in the simple case of an integer value\n        // with an odd-length list, return the x value at the index.\n        return x[idx];\n    }\n}\n\nexport default quantileSorted;\n","/**\n * Rearrange items in `arr` so that all items in `[left, k]` range are the smallest.\n * The `k`-th element will have the `(k - left + 1)`-th smallest value in `[left, right]`.\n *\n * Implements Floyd-Rivest selection algorithm https://en.wikipedia.org/wiki/Floyd-Rivest_algorithm\n *\n * @param {Array<number>} arr input array\n * @param {number} k pivot index\n * @param {number} [left] left index\n * @param {number} [right] right index\n * @returns {void} mutates input array\n * @example\n * var arr = [65, 28, 59, 33, 21, 56, 22, 95, 50, 12, 90, 53, 28, 77, 39];\n * quickselect(arr, 8);\n * // = [39, 28, 28, 33, 21, 12, 22, 50, 53, 56, 59, 65, 90, 77, 95]\n */\nfunction quickselect(arr, k, left, right) {\n    left = left || 0;\n    right = right || arr.length - 1;\n\n    while (right > left) {\n        // 600 and 0.5 are arbitrary constants chosen in the original paper to minimize execution time\n        if (right - left > 600) {\n            const n = right - left + 1;\n            const m = k - left + 1;\n            const z = Math.log(n);\n            const s = 0.5 * Math.exp((2 * z) / 3);\n            let sd = 0.5 * Math.sqrt((z * s * (n - s)) / n);\n            if (m - n / 2 < 0) sd *= -1;\n            const newLeft = Math.max(left, Math.floor(k - (m * s) / n + sd));\n            const newRight = Math.min(\n                right,\n                Math.floor(k + ((n - m) * s) / n + sd)\n            );\n            quickselect(arr, k, newLeft, newRight);\n        }\n\n        const t = arr[k];\n        let i = left;\n        let j = right;\n\n        swap(arr, left, k);\n        if (arr[right] > t) swap(arr, left, right);\n\n        while (i < j) {\n            swap(arr, i, j);\n            i++;\n            j--;\n            while (arr[i] < t) i++;\n            while (arr[j] > t) j--;\n        }\n\n        if (arr[left] === t) swap(arr, left, j);\n        else {\n            j++;\n            swap(arr, j, right);\n        }\n\n        if (j <= k) left = j + 1;\n        if (k <= j) right = j - 1;\n    }\n}\n\nfunction swap(arr, i, j) {\n    const tmp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = tmp;\n}\n\nexport default quickselect;\n","import quantileSorted from \"./quantile_sorted.js\";\nimport quickselect from \"./quickselect.js\";\n\n/**\n * The [quantile](https://en.wikipedia.org/wiki/Quantile):\n * this is a population quantile, since we assume to know the entire\n * dataset in this library. This is an implementation of the\n * [Quantiles of a Population](http://en.wikipedia.org/wiki/Quantile#Quantiles_of_a_population)\n * algorithm from wikipedia.\n *\n * Sample is a one-dimensional array of numbers,\n * and p is either a decimal number from 0 to 1 or an array of decimal\n * numbers from 0 to 1.\n * In terms of a k/q quantile, p = k/q - it's just dealing with fractions or dealing\n * with decimal values.\n * When p is an array, the result of the function is also an array containing the appropriate\n * quantiles in input order\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {Array<number> | number} p the desired quantile, as a number between 0 and 1\n * @returns {number} quantile\n * @example\n * quantile([3, 6, 7, 8, 8, 9, 10, 13, 15, 16, 20], 0.5); // => 9\n */\nfunction quantile(x, p) {\n    const copy = x.slice();\n\n    if (Array.isArray(p)) {\n        // rearrange elements so that each element corresponding to a requested\n        // quantile is on a place it would be if the array was fully sorted\n        multiQuantileSelect(copy, p);\n        // Initialize the result array\n        const results = [];\n        // For each requested quantile\n        for (let i = 0; i < p.length; i++) {\n            results[i] = quantileSorted(copy, p[i]);\n        }\n        return results;\n    } else {\n        const idx = quantileIndex(copy.length, p);\n        quantileSelect(copy, idx, 0, copy.length - 1);\n        return quantileSorted(copy, p);\n    }\n}\n\nfunction quantileSelect(arr, k, left, right) {\n    if (k % 1 === 0) {\n        quickselect(arr, k, left, right);\n    } else {\n        k = Math.floor(k);\n        quickselect(arr, k, left, right);\n        quickselect(arr, k + 1, k + 1, right);\n    }\n}\n\nfunction multiQuantileSelect(arr, p) {\n    const indices = [0];\n    for (let i = 0; i < p.length; i++) {\n        indices.push(quantileIndex(arr.length, p[i]));\n    }\n    indices.push(arr.length - 1);\n    indices.sort(compare);\n\n    const stack = [0, indices.length - 1];\n\n    while (stack.length) {\n        const r = Math.ceil(stack.pop());\n        const l = Math.floor(stack.pop());\n        if (r - l <= 1) continue;\n\n        const m = Math.floor((l + r) / 2);\n        quantileSelect(\n            arr,\n            indices[m],\n            Math.floor(indices[l]),\n            Math.ceil(indices[r])\n        );\n\n        stack.push(l, m, m, r);\n    }\n}\n\nfunction compare(a, b) {\n    return a - b;\n}\n\nfunction quantileIndex(len, p) {\n    const idx = len * p;\n    if (p === 1) {\n        // If p is 1, directly return the last index\n        return len - 1;\n    } else if (p === 0) {\n        // If p is 0, directly return the first index\n        return 0;\n    } else if (idx % 1 !== 0) {\n        // If index is not integer, return the next index in array\n        return Math.ceil(idx) - 1;\n    } else if (len % 2 === 0) {\n        // If the list has even-length, we'll return the middle of two indices\n        // around quantile to indicate that we need an average value of the two\n        return idx - 0.5;\n    } else {\n        // Finally, in the simple case of an integer index\n        // with an odd-length list, return the index\n        return idx;\n    }\n}\n\nexport default quantile;\n","/* eslint no-bitwise: 0 */\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. With a sorted array, leveraging binary search, we can find\n * this information in logarithmic time.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRankSorted([1, 2, 3, 4], 3); // => 0.75\n * quantileRankSorted([1, 2, 3, 3, 4], 3); // => 0.7\n * quantileRankSorted([1, 2, 3, 4], 6); // => 1\n * quantileRankSorted([1, 2, 3, 3, 5], 4); // => 0.8\n */\nfunction quantileRankSorted(x, value) {\n    // Value is lesser than any value in the array\n    if (value < x[0]) {\n        return 0;\n    }\n\n    // Value is greater than any value in the array\n    if (value > x[x.length - 1]) {\n        return 1;\n    }\n\n    let l = lowerBound(x, value);\n\n    // Value is not in the array\n    if (x[l] !== value) {\n        return l / x.length;\n    }\n\n    l++;\n\n    const u = upperBound(x, value);\n\n    // The value exists only once in the array\n    if (u === l) {\n        return l / x.length;\n    }\n\n    // Here, we are basically computing the mean of the range of indices\n    // containing our searched value. But, instead, of initializing an\n    // array and looping over it, there is a dedicated math formula that\n    // we apply below to get the result.\n    const r = u - l + 1;\n    const sum = (r * (u + l)) / 2;\n    const mean = sum / r;\n\n    return mean / x.length;\n}\n\nfunction lowerBound(x, value) {\n    let mid = 0;\n    let lo = 0;\n    let hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value <= x[mid]) {\n            hi = mid;\n        } else {\n            lo = -~mid;\n        }\n    }\n\n    return lo;\n}\n\nfunction upperBound(x, value) {\n    let mid = 0;\n    let lo = 0;\n    let hi = x.length;\n\n    while (lo < hi) {\n        mid = (lo + hi) >>> 1;\n\n        if (value >= x[mid]) {\n            lo = -~mid;\n        } else {\n            hi = mid;\n        }\n    }\n\n    return lo;\n}\n\nexport default quantileRankSorted;\n","import quantile from \"./quantile.js\";\n\n/**\n * The [Interquartile range](http://en.wikipedia.org/wiki/Interquartile_range) is\n * a measure of statistical dispersion, or how scattered, spread, or\n * concentrated a distribution is. It's computed as the difference between\n * the third quartile and first quartile.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @returns {number} interquartile range: the span between lower and upper quartile,\n * 0.25 and 0.75\n * @example\n * interquartileRange([0, 1, 2, 3]); // => 2\n */\nfunction interquartileRange(x) {\n    // Interquartile range is the span between the upper quartile,\n    // at `0.75`, and lower quartile, `0.25`\n    const q1 = quantile(x, 0.75);\n    const q2 = quantile(x, 0.25);\n\n    if (typeof q1 === \"number\" && typeof q2 === \"number\") {\n        return q1 - q2;\n    }\n}\n\nexport default interquartileRange;\n","import quantile from \"./quantile.js\";\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} x input\n * @returns {number} median value\n * @example\n * median([10, 2, 5, 100, 2, 1]); // => 3.5\n */\nfunction median(x) {\n    return +quantile(x, 0.5);\n}\n\nexport default median;\n","import median from \"./median.js\";\n\n/**\n * The [Median Absolute Deviation](http://en.wikipedia.org/wiki/Median_absolute_deviation) is\n * a robust measure of statistical\n * dispersion. It is more resilient to outliers than the standard deviation.\n *\n * @param {Array<number>} x input array\n * @returns {number} median absolute deviation\n * @example\n * medianAbsoluteDeviation([1, 1, 2, 2, 4, 6, 9]); // => 1\n */\nfunction medianAbsoluteDeviation(x) {\n    const medianValue = median(x);\n    const medianAbsoluteDeviations = [];\n\n    // Make a list of absolute deviations from the median\n    for (let i = 0; i < x.length; i++) {\n        medianAbsoluteDeviations.push(Math.abs(x[i] - medianValue));\n    }\n\n    // Find the median value of that list\n    return median(medianAbsoluteDeviations);\n}\n\nexport default medianAbsoluteDeviation;\n","/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * in-place - which means that it **will change the order of the original\n * array by reference**.\n *\n * This is an algorithm that generates a random [permutation](https://en.wikipedia.org/wiki/Permutation)\n * of a set.\n *\n * @param {Array} x sample of one or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @returns {Array} x\n * @example\n * var x = [1, 2, 3, 4];\n * shuffleInPlace(x);\n * // x is shuffled to a value like [2, 1, 4, 3]\n */\nfunction shuffleInPlace(x, randomSource) {\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    // store the current length of the x to determine\n    // when no elements remain to shuffle.\n    let length = x.length;\n\n    // temporary is used to hold an item when it is being\n    // swapped between indices.\n    let temporary;\n\n    // The index to swap at each stage.\n    let index;\n\n    // While there are still items to shuffle\n    while (length > 0) {\n        // choose a random index within the subset of the array\n        // that is not yet shuffled\n        index = Math.floor(randomSource() * length--);\n\n        // store the value that we'll move temporarily\n        temporary = x[length];\n\n        // swap the value at `x[length]` with `x[index]`\n        x[length] = x[index];\n        x[index] = temporary;\n    }\n\n    return x;\n}\n\nexport default shuffleInPlace;\n","import shuffleInPlace from \"./shuffle_in_place.js\";\n\n/**\n * A [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher%E2%80%93Yates_shuffle)\n * is a fast way to create a random permutation of a finite set. This is\n * a function around `shuffle_in_place` that adds the guarantee that\n * it will not modify its input.\n *\n * @param {Array} x sample of 0 or more numbers\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} shuffled version of input\n * @example\n * var shuffled = shuffle([1, 2, 3, 4]);\n * shuffled; // = [2, 3, 1, 4] or any other random permutation\n */\nfunction shuffle(x, randomSource) {\n    // slice the original array so that it is not modified\n    const sample = x.slice();\n\n    // and then shuffle that shallow-copied array, in place\n    return shuffleInPlace(sample, randomSource);\n}\n\nexport default shuffle;\n","import shuffle from \"./shuffle.js\";\n\n/**\n * Create a [simple random sample](http://en.wikipedia.org/wiki/Simple_random_sample)\n * from a given array of `n` elements.\n *\n * The sampled values will be in any order, not necessarily the order\n * they appear in the input.\n *\n * @param {Array<any>} x input array. can contain any type\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} subset of n elements in original array\n *\n * @example\n * var values = [1, 2, 4, 5, 6, 7, 8, 9];\n * sample(values, 3); // returns 3 random values, like [2, 5, 8];\n */\nfunction sample(x, n, randomSource) {\n    // shuffle the original array using a fisher-yates shuffle\n    const shuffled = shuffle(x, randomSource);\n\n    // and then return a subset of it - the first `n` elements.\n    return shuffled.slice(0, n);\n}\n\nexport default sample;\n","/**\n * Create a new column x row matrix.\n *\n * @private\n * @param {number} columns\n * @param {number} rows\n * @return {Array<Array<number>>} matrix\n * @example\n * makeMatrix(10, 10);\n */\nfunction makeMatrix(columns, rows) {\n    const matrix = [];\n    for (let i = 0; i < columns; i++) {\n        const column = [];\n        for (let j = 0; j < rows; j++) {\n            column.push(0);\n        }\n        matrix.push(column);\n    }\n    return matrix;\n}\n\nexport default makeMatrix;\n","/**\n * For a sorted input, counting the number of unique values\n * is possible in constant time and constant memory. This is\n * a simple implementation of the algorithm.\n *\n * Values are compared with `===`, so objects and non-primitive objects\n * are not handled in any special way.\n *\n * @param {Array<*>} x an array of any kind of value\n * @returns {number} count of unique values\n * @example\n * uniqueCountSorted([1, 2, 3]); // => 3\n * uniqueCountSorted([1, 1, 1]); // => 1\n */\nfunction uniqueCountSorted(x) {\n    let uniqueValueCount = 0,\n        lastSeenValue;\n    for (let i = 0; i < x.length; i++) {\n        if (i === 0 || x[i] !== lastSeenValue) {\n            lastSeenValue = x[i];\n            uniqueValueCount++;\n        }\n    }\n    return uniqueValueCount;\n}\n\nexport default uniqueCountSorted;\n","import makeMatrix from \"./make_matrix.js\";\nimport numericSort from \"./numeric_sort.js\";\nimport uniqueCountSorted from \"./unique_count_sorted.js\";\n\n/**\n * Generates incrementally computed values based on the sums and sums of\n * squares for the data array\n *\n * @private\n * @param {number} j\n * @param {number} i\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n * @return {number}\n * @example\n * ssq(0, 1, [-1, 0, 2], [1, 1, 5]);\n */\nfunction ssq(j, i, sums, sumsOfSquares) {\n    let sji; // s(j, i)\n    if (j > 0) {\n        const muji = (sums[i] - sums[j - 1]) / (i - j + 1); // mu(j, i)\n        sji =\n            sumsOfSquares[i] - sumsOfSquares[j - 1] - (i - j + 1) * muji * muji;\n    } else {\n        sji = sumsOfSquares[i] - (sums[i] * sums[i]) / (i + 1);\n    }\n    if (sji < 0) {\n        return 0;\n    }\n    return sji;\n}\n\n/**\n * Function that recursively divides and conquers computations\n * for cluster j\n *\n * @private\n * @param {number} iMin Minimum index in cluster to be computed\n * @param {number} iMax Maximum index in cluster to be computed\n * @param {number} cluster Index of the cluster currently being computed\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n * @param {Array<number>} sums\n * @param {Array<number>} sumsOfSquares\n */\nfunction fillMatrixColumn(\n    iMin,\n    iMax,\n    cluster,\n    matrix,\n    backtrackMatrix,\n    sums,\n    sumsOfSquares\n) {\n    if (iMin > iMax) {\n        return;\n    }\n\n    // Start at midpoint between iMin and iMax\n    const i = Math.floor((iMin + iMax) / 2);\n\n    matrix[cluster][i] = matrix[cluster - 1][i - 1];\n    backtrackMatrix[cluster][i] = i;\n\n    let jlow = cluster; // the lower end for j\n\n    if (iMin > cluster) {\n        jlow = Math.max(jlow, backtrackMatrix[cluster][iMin - 1] || 0);\n    }\n    jlow = Math.max(jlow, backtrackMatrix[cluster - 1][i] || 0);\n\n    let jhigh = i - 1; // the upper end for j\n    if (iMax < matrix[0].length - 1) {\n        jhigh = Math.min(jhigh, backtrackMatrix[cluster][iMax + 1] || 0);\n    }\n\n    let sji;\n    let sjlowi;\n    let ssqjlow;\n    let ssqj;\n    for (let j = jhigh; j >= jlow; --j) {\n        sji = ssq(j, i, sums, sumsOfSquares);\n\n        if (sji + matrix[cluster - 1][jlow - 1] >= matrix[cluster][i]) {\n            break;\n        }\n\n        // Examine the lower bound of the cluster border\n        sjlowi = ssq(jlow, i, sums, sumsOfSquares);\n\n        ssqjlow = sjlowi + matrix[cluster - 1][jlow - 1];\n\n        if (ssqjlow < matrix[cluster][i]) {\n            // Shrink the lower bound\n            matrix[cluster][i] = ssqjlow;\n            backtrackMatrix[cluster][i] = jlow;\n        }\n        jlow++;\n\n        ssqj = sji + matrix[cluster - 1][j - 1];\n        if (ssqj < matrix[cluster][i]) {\n            matrix[cluster][i] = ssqj;\n            backtrackMatrix[cluster][i] = j;\n        }\n    }\n\n    fillMatrixColumn(\n        iMin,\n        i - 1,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n    fillMatrixColumn(\n        i + 1,\n        iMax,\n        cluster,\n        matrix,\n        backtrackMatrix,\n        sums,\n        sumsOfSquares\n    );\n}\n\n/**\n * Initializes the main matrices used in Ckmeans and kicks\n * off the divide and conquer cluster computation strategy\n *\n * @private\n * @param {Array<number>} data sorted array of values\n * @param {Array<Array<number>>} matrix\n * @param {Array<Array<number>>} backtrackMatrix\n */\nfunction fillMatrices(data, matrix, backtrackMatrix) {\n    const nValues = matrix[0].length;\n\n    // Shift values by the median to improve numeric stability\n    const shift = data[Math.floor(nValues / 2)];\n\n    // Cumulative sum and cumulative sum of squares for all values in data array\n    const sums = [];\n    const sumsOfSquares = [];\n\n    // Initialize first column in matrix & backtrackMatrix\n    for (let i = 0, shiftedValue; i < nValues; ++i) {\n        shiftedValue = data[i] - shift;\n        if (i === 0) {\n            sums.push(shiftedValue);\n            sumsOfSquares.push(shiftedValue * shiftedValue);\n        } else {\n            sums.push(sums[i - 1] + shiftedValue);\n            sumsOfSquares.push(\n                sumsOfSquares[i - 1] + shiftedValue * shiftedValue\n            );\n        }\n\n        // Initialize for cluster = 0\n        matrix[0][i] = ssq(0, i, sums, sumsOfSquares);\n        backtrackMatrix[0][i] = 0;\n    }\n\n    // Initialize the rest of the columns\n    let iMin;\n    for (let cluster = 1; cluster < matrix.length; ++cluster) {\n        if (cluster < matrix.length - 1) {\n            iMin = cluster;\n        } else {\n            // No need to compute matrix[K-1][0] ... matrix[K-1][N-2]\n            iMin = nValues - 1;\n        }\n\n        fillMatrixColumn(\n            iMin,\n            nValues - 1,\n            cluster,\n            matrix,\n            backtrackMatrix,\n            sums,\n            sumsOfSquares\n        );\n    }\n}\n\n/**\n * Ckmeans clustering is an improvement on heuristic-based clustering\n * approaches like Jenks. The algorithm was developed in\n * [Haizhou Wang and Mingzhou Song](http://journal.r-project.org/archive/2011-2/RJournal_2011-2_Wang+Song.pdf)\n * as a [dynamic programming](https://en.wikipedia.org/wiki/Dynamic_programming) approach\n * to the problem of clustering numeric data into groups with the least\n * within-group sum-of-squared-deviations.\n *\n * Minimizing the difference within groups - what Wang & Song refer to as\n * `withinss`, or within sum-of-squares, means that groups are optimally\n * homogenous within and the data is split into representative groups.\n * This is very useful for visualization, where you may want to represent\n * a continuous variable in discrete color or style groups. This function\n * can provide groups that emphasize differences between data.\n *\n * Being a dynamic approach, this algorithm is based on two matrices that\n * store incrementally-computed values for squared deviations and backtracking\n * indexes.\n *\n * This implementation is based on Ckmeans 3.4.6, which introduced a new divide\n * and conquer approach that improved runtime from O(kn^2) to O(kn log(n)).\n *\n * Unlike the [original implementation](https://cran.r-project.org/web/packages/Ckmeans.1d.dp/index.html),\n * this implementation does not include any code to automatically determine\n * the optimal number of clusters: this information needs to be explicitly\n * provided.\n *\n * ### References\n * _Ckmeans.1d.dp: Optimal k-means Clustering in One Dimension by Dynamic\n * Programming_ Haizhou Wang and Mingzhou Song ISSN 2073-4859\n *\n * from The R Journal Vol. 3/2, December 2011\n * @param {Array<number>} x input data, as an array of number values\n * @param {number} nClusters number of desired classes. This cannot be\n * greater than the number of values in the data array.\n * @returns {Array<Array<number>>} clustered input\n * @throws {Error} if the number of requested clusters is higher than the size of the data\n * @example\n * ckmeans([-1, 2, -1, 2, 4, 5, 6, -1, 2, -1], 3);\n * // The input, clustered into groups of similar numbers.\n * //= [[-1, -1, -1, -1], [2, 2, 2], [4, 5, 6]]);\n */\nfunction ckmeans(x, nClusters) {\n    if (nClusters > x.length) {\n        throw new Error(\n            \"cannot generate more classes than there are data values\"\n        );\n    }\n\n    const sorted = numericSort(x);\n    // we'll use this as the maximum number of clusters\n    const uniqueCount = uniqueCountSorted(sorted);\n\n    // if all of the input values are identical, there's one cluster\n    // with all of the input in it.\n    if (uniqueCount === 1) {\n        return [sorted];\n    }\n\n    // named 'S' originally\n    const matrix = makeMatrix(nClusters, sorted.length);\n    // named 'J' originally\n    const backtrackMatrix = makeMatrix(nClusters, sorted.length);\n\n    // This is a dynamic programming way to solve the problem of minimizing\n    // within-cluster sum of squares. It's similar to linear regression\n    // in this way, and this calculation incrementally computes the\n    // sum of squares that are later read.\n    fillMatrices(sorted, matrix, backtrackMatrix);\n\n    // The real work of Ckmeans clustering happens in the matrix generation:\n    // the generated matrices encode all possible clustering combinations, and\n    // once they're generated we can solve for the best clustering groups\n    // very quickly.\n    const clusters = [];\n    let clusterRight = backtrackMatrix[0].length - 1;\n\n    // Backtrack the clusters from the dynamic programming matrix. This\n    // starts at the bottom-right corner of the matrix (if the top-left is 0, 0),\n    // and moves the cluster target with the loop.\n    for (let cluster = backtrackMatrix.length - 1; cluster >= 0; cluster--) {\n        const clusterLeft = backtrackMatrix[cluster][clusterRight];\n\n        // fill the cluster from the sorted input by taking a slice of the\n        // array. the backtrack matrix makes this easy - it stores the\n        // indexes where the cluster should start and end.\n        clusters[cluster] = sorted.slice(clusterLeft, clusterRight + 1);\n\n        if (cluster > 0) {\n            clusterRight = clusterLeft - 1;\n        }\n    }\n\n    return clusters;\n}\n\nexport default ckmeans;\n","import mean from \"./mean.js\";\n\n/**\n * [Sample covariance](https://en.wikipedia.org/wiki/Sample_mean_and_covariance) of two datasets:\n * how much do the two datasets move together?\n * x and y are two datasets, represented as arrays of numbers.\n *\n * @param {Array<number>} x a sample of two or more data points\n * @param {Array<number>} y a sample of two or more data points\n * @throws {Error} if x and y do not have equal lengths\n * @throws {Error} if x or y have length of one or less\n * @returns {number} sample covariance\n * @example\n * sampleCovariance([1, 2, 3, 4, 5, 6], [6, 5, 4, 3, 2, 1]); // => -3.5\n */\nfunction sampleCovariance(x, y) {\n    // The two datasets must have the same length which must be more than 1\n    if (x.length !== y.length) {\n        throw new Error(\"sampleCovariance requires samples with equal lengths\");\n    }\n\n    if (x.length < 2) {\n        throw new Error(\n            \"sampleCovariance requires at least two data points in each sample\"\n        );\n    }\n\n    // determine the mean of each dataset so that we can judge each\n    // value of the dataset fairly as the difference from the mean. this\n    // way, if one dataset is [1, 2, 3] and [2, 3, 4], their covariance\n    // does not suffer because of the difference in absolute values\n    const xmean = mean(x);\n    const ymean = mean(y);\n    let sum = 0;\n\n    // for each pair of values, the covariance increases when their\n    // difference from the mean is associated - if both are well above\n    // or if both are well below\n    // the mean, the covariance increases significantly.\n    for (let i = 0; i < x.length; i++) {\n        sum += (x[i] - xmean) * (y[i] - ymean);\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // the covariance is weighted by the length of the datasets.\n    return sum / besselsCorrection;\n}\n\nexport default sampleCovariance;\n","import sumNthPowerDeviations from \"./sum_nth_power_deviations.js\";\n\n/**\n * The [sample variance](https://en.wikipedia.org/wiki/Variance#Sample_variance)\n * is the sum of squared deviations from the mean. The sample variance\n * is distinguished from the variance by the usage of [Bessel's Correction](https://en.wikipedia.org/wiki/Bessel's_correction):\n * instead of dividing the sum of squared deviations by the length of the input,\n * it is divided by the length minus one. This corrects the bias in estimating\n * a value from a set that you don't know if full.\n *\n * References:\n * * [Wolfram MathWorld on Sample Variance](http://mathworld.wolfram.com/SampleVariance.html)\n *\n * @param {Array<number>} x a sample of two or more data points\n * @throws {Error} if the length of x is less than 2\n * @return {number} sample variance\n * @example\n * sampleVariance([1, 2, 3, 4, 5]); // => 2.5\n */\nfunction sampleVariance(x) {\n    if (x.length < 2) {\n        throw new Error(\"sampleVariance requires at least two data points\");\n    }\n\n    const sumSquaredDeviationsValue = sumNthPowerDeviations(x, 2);\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    return sumSquaredDeviationsValue / besselsCorrection;\n}\n\nexport default sampleVariance;\n","import sampleVariance from \"./sample_variance.js\";\n\n/**\n * The [sample standard deviation](http://en.wikipedia.org/wiki/Standard_deviation#Sample_standard_deviation)\n * is the square root of the sample variance.\n *\n * @param {Array<number>} x input array\n * @returns {number} sample standard deviation\n * @example\n * sampleStandardDeviation([2, 4, 4, 4, 5, 5, 7, 9]).toFixed(2);\n * // => '2.14'\n */\nfunction sampleStandardDeviation(x) {\n    const sampleVarianceX = sampleVariance(x);\n    return Math.sqrt(sampleVarianceX);\n}\n\nexport default sampleStandardDeviation;\n","import sampleCovariance from \"./sample_covariance.js\";\nimport sampleStandardDeviation from \"./sample_standard_deviation.js\";\n\n/**\n * The [correlation](http://en.wikipedia.org/wiki/Correlation_and_dependence) is\n * a measure of how correlated two datasets are, between -1 and 1\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample correlation\n * @example\n * sampleCorrelation([1, 2, 3, 4, 5, 6], [2, 2, 3, 4, 5, 60]).toFixed(2);\n * // => '0.69'\n */\nfunction sampleCorrelation(x, y) {\n    const cov = sampleCovariance(x, y);\n    const xstd = sampleStandardDeviation(x);\n    const ystd = sampleStandardDeviation(y);\n\n    return cov / xstd / ystd;\n}\n\nexport default sampleCorrelation;\n","/**\n * When combining two lists of values for which one already knows the means,\n * one does not have to necessary recompute the mean of the combined lists in\n * linear time. They can instead use this function to compute the combined\n * mean by providing the mean & number of values of the first list and the mean\n * & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineMeans(5, 3, 4, 3); // => 4.5\n */\nfunction combineMeans(mean1, n1, mean2, n2) {\n    return (mean1 * n1 + mean2 * n2) / (n1 + n2);\n}\n\nexport default combineMeans;\n","import sumSimple from \"./sum_simple.js\";\n\n/**\n * The mean, _also known as average_,\n * is the sum of all values over the number of values.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The simple mean uses the successive addition method internally\n * to calculate it's result. Errors in floating-point addition are\n * not accounted for, so if precision is required, the standard {@link mean}\n * method should be used instead.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n *\n * @param {Array<number>} x sample of one or more data points\n * @throws {Error} if the length of x is less than one\n * @returns {number} mean\n * @example\n * mean([0, 10]); // => 5\n */\nfunction meanSimple(x) {\n    if (x.length === 0) {\n        throw new Error(\"meanSimple requires at least one data point\");\n    }\n\n    return sumSimple(x) / x.length;\n}\n\nexport default meanSimple;\n","/**\n * The Root Mean Square (RMS) is\n * a mean function used as a measure of the magnitude of a set\n * of numbers, regardless of their sign.\n * This is the square root of the mean of the squares of the\n * input numbers.\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x a sample of one or more data points\n * @returns {number} root mean square\n * @throws {Error} if x is empty\n * @example\n * rootMeanSquare([-1, 1, -1, 1]); // => 1\n */\nfunction rootMeanSquare(x) {\n    if (x.length === 0) {\n        throw new Error(\"rootMeanSquare requires at least one data point\");\n    }\n\n    let sumOfSquares = 0;\n    for (let i = 0; i < x.length; i++) {\n        sumOfSquares += Math.pow(x[i], 2);\n    }\n\n    return Math.sqrt(sumOfSquares / x.length);\n}\n\nexport default rootMeanSquare;\n","/**\n * [Bayesian Classifier](http://en.wikipedia.org/wiki/Naive_Bayes_classifier)\n *\n * This is a naïve bayesian classifier that takes\n * singly-nested objects.\n *\n * @class\n * @example\n * var bayes = new BayesianClassifier();\n * bayes.train({\n *   species: 'Cat'\n * }, 'animal');\n * var result = bayes.score({\n *   species: 'Cat'\n * })\n * // result\n * // {\n * //   animal: 1\n * // }\n */\nclass BayesianClassifier {\n    /*:: totalCount: number */\n    /*:: data: Object */\n    constructor() {\n        // The number of items that are currently\n        // classified in the model\n        this.totalCount = 0;\n        // Every item classified in the model\n        this.data = {};\n    }\n\n    /**\n     * Train the classifier with a new item, which has a single\n     * dimension of Javascript literal keys and values.\n     *\n     * @param {Object} item an object with singly-deep properties\n     * @param {string} category the category this item belongs to\n     * @return {undefined} adds the item to the classifier\n     */\n    train(item, category) {\n        // If the data object doesn't have any values\n        // for this category, create a new object for it.\n        if (!this.data[category]) {\n            this.data[category] = {};\n        }\n\n        // Iterate through each key in the item.\n        for (const k in item) {\n            const v = item[k];\n            // Initialize the nested object `data[category][k][item[k]]`\n            // with an object of keys that equal 0.\n            if (this.data[category][k] === undefined) {\n                this.data[category][k] = {};\n            }\n            if (this.data[category][k][v] === undefined) {\n                this.data[category][k][v] = 0;\n            }\n\n            // And increment the key for this key/value combination.\n            this.data[category][k][v]++;\n        }\n\n        // Increment the number of items classified\n        this.totalCount++;\n    }\n\n    /**\n     * Generate a score of how well this item matches all\n     * possible categories based on its attributes\n     *\n     * @param {Object} item an item in the same format as with train\n     * @returns {Object} of probabilities that this item belongs to a\n     * given category.\n     */\n    score(item) {\n        // Initialize an empty array of odds per category.\n        const odds = {};\n        let category;\n        // Iterate through each key in the item,\n        // then iterate through each category that has been used\n        // in previous calls to `.train()`\n        for (const k in item) {\n            const v = item[k];\n            for (category in this.data) {\n                // Create an empty object for storing key - value combinations\n                // for this category.\n                odds[category] = {};\n\n                // If this item doesn't even have a property, it counts for nothing,\n                // but if it does have the property that we're looking for from\n                // the item to categorize, it counts based on how popular it is\n                // versus the whole population.\n                if (this.data[category][k]) {\n                    odds[category][k + \"_\" + v] =\n                        (this.data[category][k][v] || 0) / this.totalCount;\n                } else {\n                    odds[category][k + \"_\" + v] = 0;\n                }\n            }\n        }\n\n        // Set up a new object that will contain sums of these odds by category\n        const oddsSums = {};\n\n        for (category in odds) {\n            // Tally all of the odds for each category-combination pair -\n            // the non-existence of a category does not add anything to the\n            // score.\n            oddsSums[category] = 0;\n            for (const combination in odds[category]) {\n                oddsSums[category] += odds[category][combination];\n            }\n        }\n\n        return oddsSums;\n    }\n}\n\nexport default BayesianClassifier;\n","/**\n * This is a single-layer [Perceptron Classifier](http://en.wikipedia.org/wiki/Perceptron) that takes\n * arrays of numbers and predicts whether they should be classified\n * as either 0 or 1 (negative or positive examples).\n * @class\n * @example\n * // Create the model\n * var p = new PerceptronModel();\n * // Train the model with input with a diagonal boundary.\n * for (var i = 0; i < 5; i++) {\n *     p.train([1, 1], 1);\n *     p.train([0, 1], 0);\n *     p.train([1, 0], 0);\n *     p.train([0, 0], 0);\n * }\n * p.predict([0, 0]); // 0\n * p.predict([0, 1]); // 0\n * p.predict([1, 0]); // 0\n * p.predict([1, 1]); // 1\n */\nclass PerceptronModel {\n    /*:: bias: number */\n    /*:: weights: Array<number> */\n    constructor() {\n        // The weights, or coefficients of the model;\n        // weights are only populated when training with data.\n        this.weights = [];\n        // The bias term, or intercept; it is also a weight but\n        // it's stored separately for convenience as it is always\n        // multiplied by one.\n        this.bias = 0;\n    }\n    /**\n     * **Predict**: Use an array of features with the weight array and bias\n     * to predict whether an example is labeled 0 or 1.\n     *\n     * @param {Array<number>} features an array of features as numbers\n     * @returns {number} 1 if the score is over 0, otherwise 0\n     */\n    predict(features) {\n        // Only predict if previously trained\n        // on the same size feature array(s).\n        if (features.length !== this.weights.length) {\n            return null;\n        }\n\n        // Calculate the sum of features times weights,\n        // with the bias added (implicitly times one).\n        let score = 0;\n        for (let i = 0; i < this.weights.length; i++) {\n            score += this.weights[i] * features[i];\n        }\n        score += this.bias;\n\n        // Classify as 1 if the score is over 0, otherwise 0.\n        if (score > 0) {\n            return 1;\n        } else {\n            return 0;\n        }\n    }\n\n    /**\n     * **Train** the classifier with a new example, which is\n     * a numeric array of features and a 0 or 1 label.\n     *\n     * @param {Array<number>} features an array of features as numbers\n     * @param {number} label either 0 or 1\n     * @returns {PerceptronModel} this\n     */\n    train(features, label) {\n        // Require that only labels of 0 or 1 are considered.\n        if (label !== 0 && label !== 1) {\n            return null;\n        }\n        // The length of the feature array determines\n        // the length of the weight array.\n        // The perceptron will continue learning as long as\n        // it keeps seeing feature arrays of the same length.\n        // When it sees a new data shape, it initializes.\n        if (features.length !== this.weights.length) {\n            this.weights = features;\n            this.bias = 1;\n        }\n        // Make a prediction based on current weights.\n        const prediction = this.predict(features);\n        // Update the weights if the prediction is wrong.\n        if (typeof prediction === \"number\" && prediction !== label) {\n            const gradient = label - prediction;\n            for (let i = 0; i < this.weights.length; i++) {\n                this.weights[i] += gradient * features[i];\n            }\n            this.bias += gradient;\n        }\n        return this;\n    }\n}\n\nexport default PerceptronModel;\n","/**\n * We use `ε`, epsilon, as a stopping criterion when we want to iterate\n * until we're \"close enough\". Epsilon is a very small number: for\n * simple statistics, that number is **0.0001**\n *\n * This is used in calculations like the binomialDistribution, in which\n * the process of finding a value is [iterative](https://en.wikipedia.org/wiki/Iterative_method):\n * it progresses until it is close enough.\n *\n * Below is an example of using epsilon in [gradient descent](https://en.wikipedia.org/wiki/Gradient_descent),\n * where we're trying to find a local minimum of a function's derivative,\n * given by the `fDerivative` method.\n *\n * @example\n * // From calculation, we expect that the local minimum occurs at x=9/4\n * var x_old = 0;\n * // The algorithm starts at x=6\n * var x_new = 6;\n * var stepSize = 0.01;\n *\n * function fDerivative(x) {\n *   return 4 * Math.pow(x, 3) - 9 * Math.pow(x, 2);\n * }\n *\n * // The loop runs until the difference between the previous\n * // value and the current value is smaller than epsilon - a rough\n * // meaure of 'close enough'\n * while (Math.abs(x_new - x_old) > ss.epsilon) {\n *   x_old = x_new;\n *   x_new = x_old - stepSize * fDerivative(x_old);\n * }\n *\n * console.log('Local minimum occurs at', x_new);\n */\nconst epsilon = 0.0001;\n\nexport default epsilon;\n","/**\n * A [Factorial](https://en.wikipedia.org/wiki/Factorial), usually written n!, is the product of all positive\n * integers less than or equal to n. Often factorial is implemented\n * recursively, but this iterative approach is significantly faster\n * and simpler.\n *\n * @param {number} n input, must be an integer number 1 or greater\n * @returns {number} factorial: n!\n * @throws {Error} if n is less than 0 or not an integer\n * @example\n * factorial(5); // => 120\n */\nfunction factorial(n) {\n    // factorial is mathematically undefined for negative numbers\n    if (n < 0) {\n        throw new Error(\"factorial requires a non-negative value\");\n    }\n\n    if (Math.floor(n) !== n) {\n        throw new Error(\"factorial requires an integer input\");\n    }\n\n    // typically you'll expand the factorial function going down, like\n    // 5! = 5 * 4 * 3 * 2 * 1. This is going in the opposite direction,\n    // counting from 2 up to the number in question, and since anything\n    // multiplied by 1 is itself, the loop only needs to start at 2.\n    let accumulator = 1;\n    for (let i = 2; i <= n; i++) {\n        // for each number up to and including the number `n`, multiply\n        // the accumulator my that number.\n        accumulator *= i;\n    }\n    return accumulator;\n}\n\nexport default factorial;\n","// Define series coefficients\nconst COEFFICIENTS = [\n    0.99999999999999709182, 57.156235665862923517, -59.597960355475491248,\n    14.136097974741747174, -0.49191381609762019978, 0.33994649984811888699e-4,\n    0.46523628927048575665e-4, -0.98374475304879564677e-4,\n    0.15808870322491248884e-3, -0.21026444172410488319e-3,\n    0.2174396181152126432e-3, -0.16431810653676389022e-3,\n    0.84418223983852743293e-4, -0.2619083840158140867e-4,\n    0.36899182659531622704e-5\n];\n\nconst g = 607 / 128;\nconst LOGSQRT2PI = Math.log(Math.sqrt(2 * Math.PI));\n\n/**\n * Compute the logarithm of the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Lanczos' approximation.\n * This function takes as input any real-value n greater than 0.\n * This function is useful for values of n too large for the normal gamma function (n > 165).\n * The code is based on Lanczo's Gamma approximation, defined [here](http://my.fit.edu/~gabdo/gamma.txt).\n *\n * @param {number} n Any real number greater than zero.\n * @returns {number} The logarithm of gamma of the input value.\n *\n * @example\n * gammaln(500); // 2605.1158503617335\n * gammaln(2.4); // 0.21685932244884043\n */\nfunction gammaln(n) {\n    // Return infinity if value not in domain\n    if (n <= 0) {\n        return Infinity;\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    // Create series approximation\n    let a = COEFFICIENTS[0];\n\n    for (let i = 1; i < 15; i++) {\n        a += COEFFICIENTS[i] / (n + i);\n    }\n\n    const tmp = g + 0.5 + n;\n\n    // Return natural logarithm of gamma(n)\n    return LOGSQRT2PI + Math.log(a) - tmp + (n + 0.5) * Math.log(tmp);\n}\n\nexport default gammaln;\n","/**\n * **Percentage Points of the χ2 (Chi-Squared) Distribution**\n *\n * The [χ2 (Chi-Squared) Distribution](http://en.wikipedia.org/wiki/Chi-squared_distribution) is used in the common\n * chi-squared tests for goodness of fit of an observed distribution to a theoretical one, the independence of two\n * criteria of classification of qualitative data, and in confidence interval estimation for a population standard\n * deviation of a normal distribution from a sample standard deviation.\n *\n * Values from Appendix 1, Table III of William W. Hines & Douglas C. Montgomery, \"Probability and Statistics in\n * Engineering and Management Science\", Wiley (1980).\n */\nconst chiSquaredDistributionTable = {\n    1: {\n        0.995: 0,\n        0.99: 0,\n        0.975: 0,\n        0.95: 0,\n        0.9: 0.02,\n        0.5: 0.45,\n        0.1: 2.71,\n        0.05: 3.84,\n        0.025: 5.02,\n        0.01: 6.63,\n        0.005: 7.88\n    },\n    2: {\n        0.995: 0.01,\n        0.99: 0.02,\n        0.975: 0.05,\n        0.95: 0.1,\n        0.9: 0.21,\n        0.5: 1.39,\n        0.1: 4.61,\n        0.05: 5.99,\n        0.025: 7.38,\n        0.01: 9.21,\n        0.005: 10.6\n    },\n    3: {\n        0.995: 0.07,\n        0.99: 0.11,\n        0.975: 0.22,\n        0.95: 0.35,\n        0.9: 0.58,\n        0.5: 2.37,\n        0.1: 6.25,\n        0.05: 7.81,\n        0.025: 9.35,\n        0.01: 11.34,\n        0.005: 12.84\n    },\n    4: {\n        0.995: 0.21,\n        0.99: 0.3,\n        0.975: 0.48,\n        0.95: 0.71,\n        0.9: 1.06,\n        0.5: 3.36,\n        0.1: 7.78,\n        0.05: 9.49,\n        0.025: 11.14,\n        0.01: 13.28,\n        0.005: 14.86\n    },\n    5: {\n        0.995: 0.41,\n        0.99: 0.55,\n        0.975: 0.83,\n        0.95: 1.15,\n        0.9: 1.61,\n        0.5: 4.35,\n        0.1: 9.24,\n        0.05: 11.07,\n        0.025: 12.83,\n        0.01: 15.09,\n        0.005: 16.75\n    },\n    6: {\n        0.995: 0.68,\n        0.99: 0.87,\n        0.975: 1.24,\n        0.95: 1.64,\n        0.9: 2.2,\n        0.5: 5.35,\n        0.1: 10.65,\n        0.05: 12.59,\n        0.025: 14.45,\n        0.01: 16.81,\n        0.005: 18.55\n    },\n    7: {\n        0.995: 0.99,\n        0.99: 1.25,\n        0.975: 1.69,\n        0.95: 2.17,\n        0.9: 2.83,\n        0.5: 6.35,\n        0.1: 12.02,\n        0.05: 14.07,\n        0.025: 16.01,\n        0.01: 18.48,\n        0.005: 20.28\n    },\n    8: {\n        0.995: 1.34,\n        0.99: 1.65,\n        0.975: 2.18,\n        0.95: 2.73,\n        0.9: 3.49,\n        0.5: 7.34,\n        0.1: 13.36,\n        0.05: 15.51,\n        0.025: 17.53,\n        0.01: 20.09,\n        0.005: 21.96\n    },\n    9: {\n        0.995: 1.73,\n        0.99: 2.09,\n        0.975: 2.7,\n        0.95: 3.33,\n        0.9: 4.17,\n        0.5: 8.34,\n        0.1: 14.68,\n        0.05: 16.92,\n        0.025: 19.02,\n        0.01: 21.67,\n        0.005: 23.59\n    },\n    10: {\n        0.995: 2.16,\n        0.99: 2.56,\n        0.975: 3.25,\n        0.95: 3.94,\n        0.9: 4.87,\n        0.5: 9.34,\n        0.1: 15.99,\n        0.05: 18.31,\n        0.025: 20.48,\n        0.01: 23.21,\n        0.005: 25.19\n    },\n    11: {\n        0.995: 2.6,\n        0.99: 3.05,\n        0.975: 3.82,\n        0.95: 4.57,\n        0.9: 5.58,\n        0.5: 10.34,\n        0.1: 17.28,\n        0.05: 19.68,\n        0.025: 21.92,\n        0.01: 24.72,\n        0.005: 26.76\n    },\n    12: {\n        0.995: 3.07,\n        0.99: 3.57,\n        0.975: 4.4,\n        0.95: 5.23,\n        0.9: 6.3,\n        0.5: 11.34,\n        0.1: 18.55,\n        0.05: 21.03,\n        0.025: 23.34,\n        0.01: 26.22,\n        0.005: 28.3\n    },\n    13: {\n        0.995: 3.57,\n        0.99: 4.11,\n        0.975: 5.01,\n        0.95: 5.89,\n        0.9: 7.04,\n        0.5: 12.34,\n        0.1: 19.81,\n        0.05: 22.36,\n        0.025: 24.74,\n        0.01: 27.69,\n        0.005: 29.82\n    },\n    14: {\n        0.995: 4.07,\n        0.99: 4.66,\n        0.975: 5.63,\n        0.95: 6.57,\n        0.9: 7.79,\n        0.5: 13.34,\n        0.1: 21.06,\n        0.05: 23.68,\n        0.025: 26.12,\n        0.01: 29.14,\n        0.005: 31.32\n    },\n    15: {\n        0.995: 4.6,\n        0.99: 5.23,\n        0.975: 6.27,\n        0.95: 7.26,\n        0.9: 8.55,\n        0.5: 14.34,\n        0.1: 22.31,\n        0.05: 25,\n        0.025: 27.49,\n        0.01: 30.58,\n        0.005: 32.8\n    },\n    16: {\n        0.995: 5.14,\n        0.99: 5.81,\n        0.975: 6.91,\n        0.95: 7.96,\n        0.9: 9.31,\n        0.5: 15.34,\n        0.1: 23.54,\n        0.05: 26.3,\n        0.025: 28.85,\n        0.01: 32,\n        0.005: 34.27\n    },\n    17: {\n        0.995: 5.7,\n        0.99: 6.41,\n        0.975: 7.56,\n        0.95: 8.67,\n        0.9: 10.09,\n        0.5: 16.34,\n        0.1: 24.77,\n        0.05: 27.59,\n        0.025: 30.19,\n        0.01: 33.41,\n        0.005: 35.72\n    },\n    18: {\n        0.995: 6.26,\n        0.99: 7.01,\n        0.975: 8.23,\n        0.95: 9.39,\n        0.9: 10.87,\n        0.5: 17.34,\n        0.1: 25.99,\n        0.05: 28.87,\n        0.025: 31.53,\n        0.01: 34.81,\n        0.005: 37.16\n    },\n    19: {\n        0.995: 6.84,\n        0.99: 7.63,\n        0.975: 8.91,\n        0.95: 10.12,\n        0.9: 11.65,\n        0.5: 18.34,\n        0.1: 27.2,\n        0.05: 30.14,\n        0.025: 32.85,\n        0.01: 36.19,\n        0.005: 38.58\n    },\n    20: {\n        0.995: 7.43,\n        0.99: 8.26,\n        0.975: 9.59,\n        0.95: 10.85,\n        0.9: 12.44,\n        0.5: 19.34,\n        0.1: 28.41,\n        0.05: 31.41,\n        0.025: 34.17,\n        0.01: 37.57,\n        0.005: 40\n    },\n    21: {\n        0.995: 8.03,\n        0.99: 8.9,\n        0.975: 10.28,\n        0.95: 11.59,\n        0.9: 13.24,\n        0.5: 20.34,\n        0.1: 29.62,\n        0.05: 32.67,\n        0.025: 35.48,\n        0.01: 38.93,\n        0.005: 41.4\n    },\n    22: {\n        0.995: 8.64,\n        0.99: 9.54,\n        0.975: 10.98,\n        0.95: 12.34,\n        0.9: 14.04,\n        0.5: 21.34,\n        0.1: 30.81,\n        0.05: 33.92,\n        0.025: 36.78,\n        0.01: 40.29,\n        0.005: 42.8\n    },\n    23: {\n        0.995: 9.26,\n        0.99: 10.2,\n        0.975: 11.69,\n        0.95: 13.09,\n        0.9: 14.85,\n        0.5: 22.34,\n        0.1: 32.01,\n        0.05: 35.17,\n        0.025: 38.08,\n        0.01: 41.64,\n        0.005: 44.18\n    },\n    24: {\n        0.995: 9.89,\n        0.99: 10.86,\n        0.975: 12.4,\n        0.95: 13.85,\n        0.9: 15.66,\n        0.5: 23.34,\n        0.1: 33.2,\n        0.05: 36.42,\n        0.025: 39.36,\n        0.01: 42.98,\n        0.005: 45.56\n    },\n    25: {\n        0.995: 10.52,\n        0.99: 11.52,\n        0.975: 13.12,\n        0.95: 14.61,\n        0.9: 16.47,\n        0.5: 24.34,\n        0.1: 34.28,\n        0.05: 37.65,\n        0.025: 40.65,\n        0.01: 44.31,\n        0.005: 46.93\n    },\n    26: {\n        0.995: 11.16,\n        0.99: 12.2,\n        0.975: 13.84,\n        0.95: 15.38,\n        0.9: 17.29,\n        0.5: 25.34,\n        0.1: 35.56,\n        0.05: 38.89,\n        0.025: 41.92,\n        0.01: 45.64,\n        0.005: 48.29\n    },\n    27: {\n        0.995: 11.81,\n        0.99: 12.88,\n        0.975: 14.57,\n        0.95: 16.15,\n        0.9: 18.11,\n        0.5: 26.34,\n        0.1: 36.74,\n        0.05: 40.11,\n        0.025: 43.19,\n        0.01: 46.96,\n        0.005: 49.65\n    },\n    28: {\n        0.995: 12.46,\n        0.99: 13.57,\n        0.975: 15.31,\n        0.95: 16.93,\n        0.9: 18.94,\n        0.5: 27.34,\n        0.1: 37.92,\n        0.05: 41.34,\n        0.025: 44.46,\n        0.01: 48.28,\n        0.005: 50.99\n    },\n    29: {\n        0.995: 13.12,\n        0.99: 14.26,\n        0.975: 16.05,\n        0.95: 17.71,\n        0.9: 19.77,\n        0.5: 28.34,\n        0.1: 39.09,\n        0.05: 42.56,\n        0.025: 45.72,\n        0.01: 49.59,\n        0.005: 52.34\n    },\n    30: {\n        0.995: 13.79,\n        0.99: 14.95,\n        0.975: 16.79,\n        0.95: 18.49,\n        0.9: 20.6,\n        0.5: 29.34,\n        0.1: 40.26,\n        0.05: 43.77,\n        0.025: 46.98,\n        0.01: 50.89,\n        0.005: 53.67\n    },\n    40: {\n        0.995: 20.71,\n        0.99: 22.16,\n        0.975: 24.43,\n        0.95: 26.51,\n        0.9: 29.05,\n        0.5: 39.34,\n        0.1: 51.81,\n        0.05: 55.76,\n        0.025: 59.34,\n        0.01: 63.69,\n        0.005: 66.77\n    },\n    50: {\n        0.995: 27.99,\n        0.99: 29.71,\n        0.975: 32.36,\n        0.95: 34.76,\n        0.9: 37.69,\n        0.5: 49.33,\n        0.1: 63.17,\n        0.05: 67.5,\n        0.025: 71.42,\n        0.01: 76.15,\n        0.005: 79.49\n    },\n    60: {\n        0.995: 35.53,\n        0.99: 37.48,\n        0.975: 40.48,\n        0.95: 43.19,\n        0.9: 46.46,\n        0.5: 59.33,\n        0.1: 74.4,\n        0.05: 79.08,\n        0.025: 83.3,\n        0.01: 88.38,\n        0.005: 91.95\n    },\n    70: {\n        0.995: 43.28,\n        0.99: 45.44,\n        0.975: 48.76,\n        0.95: 51.74,\n        0.9: 55.33,\n        0.5: 69.33,\n        0.1: 85.53,\n        0.05: 90.53,\n        0.025: 95.02,\n        0.01: 100.42,\n        0.005: 104.22\n    },\n    80: {\n        0.995: 51.17,\n        0.99: 53.54,\n        0.975: 57.15,\n        0.95: 60.39,\n        0.9: 64.28,\n        0.5: 79.33,\n        0.1: 96.58,\n        0.05: 101.88,\n        0.025: 106.63,\n        0.01: 112.33,\n        0.005: 116.32\n    },\n    90: {\n        0.995: 59.2,\n        0.99: 61.75,\n        0.975: 65.65,\n        0.95: 69.13,\n        0.9: 73.29,\n        0.5: 89.33,\n        0.1: 107.57,\n        0.05: 113.14,\n        0.025: 118.14,\n        0.01: 124.12,\n        0.005: 128.3\n    },\n    100: {\n        0.995: 67.33,\n        0.99: 70.06,\n        0.975: 74.22,\n        0.95: 77.93,\n        0.9: 82.36,\n        0.5: 99.33,\n        0.1: 118.5,\n        0.05: 124.34,\n        0.025: 129.56,\n        0.01: 135.81,\n        0.005: 140.17\n    }\n};\n\nexport default chiSquaredDistributionTable;\n","import interquartileRange from \"./interquartile_range.js\";\nimport stddev from \"./sample_standard_deviation.js\";\n\nconst SQRT_2PI = Math.sqrt(2 * Math.PI);\n\n/**\n * [Well-known kernels](https://en.wikipedia.org/wiki/Kernel_(statistics)#Kernel_functions_in_common_use)\n * @private\n */\nconst kernels = {\n    /**\n     * The gaussian kernel.\n     * @private\n     */\n    gaussian: function (u) {\n        return Math.exp(-0.5 * u * u) / SQRT_2PI;\n    }\n};\n\n/**\n * Well known bandwidth selection methods\n * @private\n */\nconst bandwidthMethods = {\n    /**\n     * The [\"normal reference distribution\"\n     * rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html),\n     * a commonly used version of [Silverman's\n     * rule-of-thumb](https://en.wikipedia.org/wiki/Kernel_density_estimation#A_rule-of-thumb_bandwidth_estimator).\n     * @private\n     */\n    nrd: function (x) {\n        let s = stddev(x);\n        const iqr = interquartileRange(x);\n        if (typeof iqr === \"number\") {\n            s = Math.min(s, iqr / 1.34);\n        }\n        return 1.06 * s * Math.pow(x.length, -0.2);\n    }\n};\n\n/**\n * [Kernel density estimation](https://en.wikipedia.org/wiki/Kernel_density_estimation)\n * is a useful tool for, among other things, estimating the shape of the\n * underlying probability distribution from a sample.\n *\n * @name kernelDensityEstimation\n * @param X sample values\n * @param kernel The kernel function to use. If a function is provided, it should return non-negative values and integrate to 1. Defaults to 'gaussian'.\n * @param bandwidthMethod The \"bandwidth selection\" method to use, or a fixed bandwidth value. Defaults to \"nrd\", the commonly-used [\"normal reference distribution\" rule-of-thumb](https://stat.ethz.ch/R-manual/R-devel/library/MASS/html/bandwidth.nrd.html).\n * @returns {Function} An estimated [probability density function](https://en.wikipedia.org/wiki/Probability_density_function) for the given sample. The returned function runs in `O(X.length)`.\n */\nfunction kernelDensityEstimation(X, kernel, bandwidthMethod) {\n    let kernelFn;\n    if (kernel === undefined) {\n        kernelFn = kernels.gaussian;\n    } else if (typeof kernel === \"string\") {\n        if (!kernels[kernel]) {\n            throw new Error('Unknown kernel \"' + kernel + '\"');\n        }\n        kernelFn = kernels[kernel];\n    } else {\n        kernelFn = kernel;\n    }\n\n    let bandwidth;\n    if (typeof bandwidthMethod === \"undefined\") {\n        bandwidth = bandwidthMethods.nrd(X);\n    } else if (typeof bandwidthMethod === \"string\") {\n        if (!bandwidthMethods[bandwidthMethod]) {\n            throw new Error(\n                'Unknown bandwidth method \"' + bandwidthMethod + '\"'\n            );\n        }\n        bandwidth = bandwidthMethods[bandwidthMethod](X);\n    } else {\n        bandwidth = bandwidthMethod;\n    }\n\n    return function (x) {\n        let i = 0;\n        let sum = 0;\n        for (i = 0; i < X.length; i++) {\n            sum += kernelFn((x - X[i]) / bandwidth);\n        }\n        return sum / bandwidth / X.length;\n    };\n}\n\nexport default kernelDensityEstimation;\n","const SQRT_2PI = Math.sqrt(2 * Math.PI);\n\nfunction cumulativeDistribution(z) {\n    let sum = z,\n        tmp = z;\n\n    // 15 iterations are enough for 4-digit precision\n    for (let i = 1; i < 15; i++) {\n        tmp *= (z * z) / (2 * i + 1);\n        sum += tmp;\n    }\n    return (\n        Math.round((0.5 + (sum / SQRT_2PI) * Math.exp((-z * z) / 2)) * 1e4) /\n        1e4\n    );\n}\n\n/**\n * A standard normal table, also called the unit normal table or Z table,\n * is a mathematical table for the values of Φ (phi), which are the values of\n * the [cumulative distribution function](https://en.wikipedia.org/wiki/Normal_distribution#Cumulative_distribution_function)\n * of the normal distribution. It is used to find the probability that a\n * statistic is observed below, above, or between values on the standard\n * normal distribution, and by extension, any normal distribution.\n */\nconst standardNormalTable = [];\n\nfor (let z = 0; z <= 3.09; z += 0.01) {\n    standardNormalTable.push(cumulativeDistribution(z));\n}\n\nexport default standardNormalTable;\n","/**\n * **[Gaussian error function](http://en.wikipedia.org/wiki/Error_function)**\n *\n * The `errorFunction(x/(sd * Math.sqrt(2)))` is the probability that a value in a\n * normal distribution with standard deviation sd is within x of the mean.\n *\n * This function returns a numerical approximation to the exact value.\n * It uses Horner's method to evaluate the polynomial of τ (tau).\n *\n * @param {number} x input\n * @return {number} error estimation\n * @example\n * errorFunction(1).toFixed(2); // => '0.84'\n */\nfunction errorFunction(x) {\n    const t = 1 / (1 + 0.5 * Math.abs(x));\n    const tau =\n        t *\n        Math.exp(\n            -x * x +\n                ((((((((0.17087277 * t - 0.82215223) * t + 1.48851587) * t -\n                    1.13520398) *\n                    t +\n                    0.27886807) *\n                    t -\n                    0.18628806) *\n                    t +\n                    0.09678418) *\n                    t +\n                    0.37409196) *\n                    t +\n                    1.00002368) *\n                    t -\n                1.26551223\n        );\n    if (x >= 0) {\n        return 1 - tau;\n    } else {\n        return tau - 1;\n    }\n}\n\nexport default errorFunction;\n","/**\n * The Inverse [Gaussian error function](http://en.wikipedia.org/wiki/Error_function)\n * returns a numerical approximation to the value that would have caused\n * `errorFunction()` to return x.\n *\n * @param {number} x value of error function\n * @returns {number} estimated inverted value\n */\nfunction inverseErrorFunction(x) {\n    const a = (8 * (Math.PI - 3)) / (3 * Math.PI * (4 - Math.PI));\n\n    const inv = Math.sqrt(\n        Math.sqrt(\n            Math.pow(2 / (Math.PI * a) + Math.log(1 - x * x) / 2, 2) -\n                Math.log(1 - x * x) / a\n        ) -\n            (2 / (Math.PI * a) + Math.log(1 - x * x) / 2)\n    );\n\n    if (x >= 0) {\n        return inv;\n    } else {\n        return -inv;\n    }\n}\n\nexport default inverseErrorFunction;\n","/**\n * [Sign](https://en.wikipedia.org/wiki/Sign_function) is a function\n * that extracts the sign of a real number\n *\n * @param {number} x input value\n * @returns {number} sign value either 1, 0 or -1\n * @throws {TypeError} if the input argument x is not a number\n * @private\n *\n * @example\n * sign(2); // => 1\n */\nfunction sign(x) {\n    if (typeof x === \"number\") {\n        if (x < 0) {\n            return -1;\n        } else if (x === 0) {\n            return 0;\n        } else {\n            return 1;\n        }\n    } else {\n        throw new TypeError(\"not a number\");\n    }\n}\n\nexport default sign;\n","/**\n * Calculate Euclidean distance between two points.\n * @param {Array<number>} left First N-dimensional point.\n * @param {Array<number>} right Second N-dimensional point.\n * @returns {number} Distance.\n */\nfunction euclideanDistance(left, right) {\n    let sum = 0;\n    for (let i = 0; i < left.length; i++) {\n        const diff = left[i] - right[i];\n        sum += diff * diff;\n    }\n    return Math.sqrt(sum);\n}\n\nexport default euclideanDistance;\n","import euclideanDistance from \"./euclidean_distance.js\";\nimport makeMatrix from \"./make_matrix.js\";\nimport sample from \"./sample.js\";\n\n/**\n * @typedef {Object} kMeansReturn\n * @property {Array<number>} labels The labels.\n * @property {Array<Array<number>>} centroids The cluster centroids.\n */\n\n/**\n * Perform k-means clustering.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points to be clustered.\n * @param {number} numCluster How many clusters to create.\n * @param {Function} randomSource An optional entropy source that generates uniform values in [0, 1).\n * @return {kMeansReturn} Labels (same length as data) and centroids (same length as numCluster).\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n *\n * @example\n * kMeansCluster([[0.0, 0.5], [1.0, 0.5]], 2); // => {labels: [0, 1], centroids: [[0.0, 0.5], [1.0 0.5]]}\n */\nfunction kMeansCluster(points, numCluster, randomSource = Math.random) {\n    let oldCentroids = null;\n    let newCentroids = sample(points, numCluster, randomSource);\n    let labels = null;\n    let change = Number.MAX_VALUE;\n    while (change !== 0) {\n        labels = labelPoints(points, newCentroids);\n        oldCentroids = newCentroids;\n        newCentroids = calculateCentroids(points, labels, numCluster);\n        change = calculateChange(newCentroids, oldCentroids);\n    }\n    return {\n        labels: labels,\n        centroids: newCentroids\n    };\n}\n\n/**\n * Label each point according to which centroid it is closest to.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<Array<number>>} centroids Current centroids.\n * @return {Array<number>} Group labels.\n */\nfunction labelPoints(points, centroids) {\n    return points.map((p) => {\n        let minDist = Number.MAX_VALUE;\n        let label = -1;\n        for (let i = 0; i < centroids.length; i++) {\n            const dist = euclideanDistance(p, centroids[i]);\n            if (dist < minDist) {\n                minDist = dist;\n                label = i;\n            }\n        }\n        return label;\n    });\n}\n\n/**\n * Calculate centroids for points given labels.\n *\n * @private\n * @param {Array<Array<number>>} points Array of XY coordinates.\n * @param {Array<number>} labels Which groups points belong to.\n * @param {number} numCluster Number of clusters being created.\n * @return {Array<Array<number>>} Centroid for each group.\n * @throws {Error} If any centroids wind up friendless (i.e., without associated points).\n */\nfunction calculateCentroids(points, labels, numCluster) {\n    // Initialize accumulators.\n    const dimension = points[0].length;\n    const centroids = makeMatrix(numCluster, dimension);\n    const counts = Array(numCluster).fill(0);\n\n    // Add points to centroids' accumulators and count points per centroid.\n    const numPoints = points.length;\n    for (let i = 0; i < numPoints; i++) {\n        const point = points[i];\n        const label = labels[i];\n        const current = centroids[label];\n        for (let j = 0; j < dimension; j++) {\n            current[j] += point[j];\n        }\n        counts[label] += 1;\n    }\n\n    // Rescale centroids, checking for any that have no points.\n    for (let i = 0; i < numCluster; i++) {\n        if (counts[i] === 0) {\n            throw new Error(`Centroid ${i} has no friends`);\n        }\n        const centroid = centroids[i];\n        for (let j = 0; j < dimension; j++) {\n            centroid[j] /= counts[i];\n        }\n    }\n\n    return centroids;\n}\n\n/**\n * Calculate the difference between old centroids and new centroids.\n *\n * @private\n * @param {Array<Array<number>>} left One list of centroids.\n * @param {Array<Array<number>>} right Another list of centroids.\n * @return {number} Distance between centroids.\n */\nfunction calculateChange(left, right) {\n    let total = 0;\n    for (let i = 0; i < left.length; i++) {\n        total += euclideanDistance(left[i], right[i]);\n    }\n    return total;\n}\n\nexport default kMeansCluster;\n","import euclideanDistance from \"./euclidean_distance.js\";\nimport makeMatrix from \"./make_matrix.js\";\nimport max from \"./max.js\";\n\n/**\n * Calculate the [silhouette values](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for clustered data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<number>} The silhouette value for each point.\n *\n * @example\n * silhouette([[0.25], [0.75]], [0, 0]); // => [1.0, 1.0]\n */\nfunction silhouette(points, labels) {\n    if (points.length !== labels.length) {\n        throw new Error(\"must have exactly as many labels as points\");\n    }\n    const groupings = createGroups(labels);\n    const distances = calculateAllDistances(points);\n    const result = [];\n    for (let i = 0; i < points.length; i++) {\n        let s = 0;\n        if (groupings[labels[i]].length > 1) {\n            const a = meanDistanceFromPointToGroup(\n                i,\n                groupings[labels[i]],\n                distances\n            );\n            const b = meanDistanceToNearestGroup(\n                i,\n                labels,\n                groupings,\n                distances\n            );\n            s = (b - a) / Math.max(a, b);\n        }\n        result.push(s);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table mapping group IDs to point IDs.\n *\n * @private\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {Array<Array<number>>} An array of length G, each of whose entries is an array\n * containing the indices of the points in that group.\n */\nfunction createGroups(labels) {\n    const numGroups = 1 + max(labels);\n    const result = Array(numGroups);\n    for (let i = 0; i < labels.length; i++) {\n        const label = labels[i];\n        if (result[label] === undefined) {\n            result[label] = [];\n        }\n        result[label].push(i);\n    }\n    return result;\n}\n\n/**\n * Create a lookup table of all inter-point distances.\n *\n * @private\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @return {Array<Array<number>>} A symmetric square array of inter-point distances\n * (zero on the diagonal).\n */\nfunction calculateAllDistances(points) {\n    const numPoints = points.length;\n    const result = makeMatrix(numPoints, numPoints);\n    for (let i = 0; i < numPoints; i++) {\n        for (let j = 0; j < i; j++) {\n            result[i][j] = euclideanDistance(points[i], points[j]);\n            result[j][i] = result[i][j];\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between this point and all the points in the\n * nearest group (as determined by which point in another group is closest).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} labels Labels of points.\n * @param {Array<Array<number>>} groupings An array whose entries are arrays\n * containing the indices of the points in that group.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the nearest\n * group.\n */\nfunction meanDistanceToNearestGroup(which, labels, groupings, distances) {\n    const label = labels[which];\n    let result = Number.MAX_VALUE;\n    for (let i = 0; i < groupings.length; i++) {\n        if (i !== label) {\n            const d = meanDistanceFromPointToGroup(\n                which,\n                groupings[i],\n                distances\n            );\n            if (d < result) {\n                result = d;\n            }\n        }\n    }\n    return result;\n}\n\n/**\n * Calculate the mean distance between a point and all the points in a group\n * (possibly its own).\n *\n * @private\n * @param {number} which The index of this point.\n * @param {Array<number>} group The indices of all the points in the group in\n * question.\n * @param {Array<Array<number>>} distances A symmetric square array of inter-point\n * distances.\n * @return {number} The mean distance from this point to others in the\n * specified group.\n */\nfunction meanDistanceFromPointToGroup(which, group, distances) {\n    let total = 0;\n    for (let i = 0; i < group.length; i++) {\n        total += distances[which][group[i]];\n    }\n    return total / group.length;\n}\n\nexport default silhouette;\n","/**\n * Relative error.\n *\n * This is more difficult to calculate than it first appears [1,2].  The usual\n * formula for the relative error between an actual value A and an expected\n * value E is `|(A-E)/E|`, but:\n *\n * 1. If the expected value is 0, any other value has infinite relative error,\n *    which is counter-intuitive: if the expected voltage is 0, getting 1/10th\n *    of a volt doesn't feel like an infinitely large error.\n *\n * 2. This formula does not satisfy the mathematical definition of a metric [3].\n *    [4] solved this problem by defining the relative error as `|ln(|A/E|)|`,\n *    but that formula only works if all values are positive: for example, it\n *    reports the relative error of -10 and 10 as 0.\n *\n * Our implementation sticks with convention and returns:\n *\n * - 0 if the actual and expected values are both zero\n * - Infinity if the actual value is non-zero and the expected value is zero\n * - `|(A-E)/E|` in all other cases\n *\n * [1] https://math.stackexchange.com/questions/677852/how-to-calculate-relative-error-when-true-value-is-zero\n * [2] https://en.wikipedia.org/wiki/Relative_change_and_difference\n * [3] https://en.wikipedia.org/wiki/Metric_(mathematics)#Definition\n * [4] F.W.J. Olver: \"A New Approach to Error Arithmetic.\" SIAM Journal on\n *     Numerical Analysis, 15(2), 1978, 10.1137/0715024.\n *\n * @param {number} actual The actual value.\n * @param {number} expected The expected value.\n * @return {number} The relative error.\n */\nfunction relativeError(actual, expected) {\n    if (actual === 0 && expected === 0) {\n        return 0;\n    }\n    return Math.abs((actual - expected) / expected);\n}\n\nexport default relativeError;\n","/**\n * When adding a new value to a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the new\n * value to add.\n *\n * @since 2.5.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} newValue the added value\n * @returns {number} the new mean\n *\n * @example\n * addToMean(14, 5, 53); // => 20.5\n */\nfunction addToMean(mean, n, newValue) {\n    return mean + (newValue - mean) / (n + 1);\n}\n\nexport default addToMean;\n","import epsilon from \"./epsilon.js\";\nimport relativeError from \"./relative_error.js\";\n\n/**\n * Approximate equality.\n *\n * @param {number} actual The value to be tested.\n * @param {number} expected The reference value.\n * @param {number} tolerance The acceptable relative difference.\n * @return {boolean} Whether numbers are within tolerance.\n */\nfunction approxEqual(actual, expected, tolerance = epsilon) {\n    return relativeError(actual, expected) <= tolerance;\n}\n\nexport default approxEqual;\n","/**\n * The [Bernoulli distribution](http://en.wikipedia.org/wiki/Bernoulli_distribution)\n * is the probability discrete\n * distribution of a random variable which takes value 1 with success\n * probability `p` and value 0 with failure\n * probability `q` = 1 - `p`. It can be used, for example, to represent the\n * toss of a coin, where \"1\" is defined to mean \"heads\" and \"0\" is defined\n * to mean \"tails\" (or vice versa). It is\n * a special case of a Binomial Distribution\n * where `n` = 1.\n *\n * @param {number} p input value, between 0 and 1 inclusive\n * @returns {number[]} values of bernoulli distribution at this point\n * @throws {Error} if p is outside 0 and 1\n * @example\n * bernoulliDistribution(0.3); // => [0.7, 0.3]\n */\nfunction bernoulliDistribution(p) /*: number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1)\n    if (p < 0 || p > 1) {\n        throw new Error(\n            \"bernoulliDistribution requires probability to be between 0 and 1 inclusive\"\n        );\n    }\n\n    return [1 - p, p];\n}\n\nexport default bernoulliDistribution;\n","import epsilon from \"./epsilon.js\";\n\n/**\n * The [Binomial Distribution](http://en.wikipedia.org/wiki/Binomial_distribution) is the discrete probability\n * distribution of the number of successes in a sequence of n independent yes/no experiments, each of which yields\n * success with probability `probability`. Such a success/failure experiment is also called a Bernoulli experiment or\n * Bernoulli trial; when trials = 1, the Binomial Distribution is a Bernoulli Distribution.\n *\n * @param {number} trials number of trials to simulate\n * @param {number} probability\n * @returns {number[]} output\n */\nfunction binomialDistribution(trials, probability) /*: ?number[] */ {\n    // Check that `p` is a valid probability (0 ≤ p ≤ 1),\n    // that `n` is an integer, strictly positive.\n    if (probability < 0 || probability > 1 || trials <= 0 || trials % 1 !== 0) {\n        return undefined;\n    }\n\n    // We initialize `x`, the random variable, and `accumulator`, an accumulator\n    // for the cumulative distribution function to 0. `distribution_functions`\n    // is the object we'll return with the `probability_of_x` and the\n    // `cumulativeProbability_of_x`, as well as the calculated mean &\n    // variance. We iterate until the `cumulativeProbability_of_x` is\n    // within `epsilon` of 1.0.\n    let x = 0;\n    let cumulativeProbability = 0;\n    const cells = [];\n    let binomialCoefficient = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] =\n            binomialCoefficient *\n            Math.pow(probability, x) *\n            Math.pow(1 - probability, trials - x);\n        cumulativeProbability += cells[x];\n        x++;\n        binomialCoefficient = (binomialCoefficient * (trials - x + 1)) / x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nexport default binomialDistribution;\n","import sign from \"./sign.js\";\n\n/**\n * [Bisection method](https://en.wikipedia.org/wiki/Bisection_method) is a root-finding\n * method that repeatedly bisects an interval to find the root.\n *\n * This function returns a numerical approximation to the exact value.\n *\n * @param {Function} func input function\n * @param {number} start - start of interval\n * @param {number} end - end of interval\n * @param {number} maxIterations - the maximum number of iterations\n * @param {number} errorTolerance - the error tolerance\n * @returns {number} estimated root value\n * @throws {TypeError} Argument func must be a function\n *\n * @example\n * bisect(Math.cos,0,4,100,0.003); // => 1.572265625\n */\nfunction bisect(func, start, end, maxIterations, errorTolerance) {\n    if (typeof func !== \"function\")\n        throw new TypeError(\"func must be a function\");\n\n    for (let i = 0; i < maxIterations; i++) {\n        const output = (start + end) / 2;\n\n        if (\n            func(output) === 0 ||\n            Math.abs((end - start) / 2) < errorTolerance\n        ) {\n            return output;\n        }\n\n        if (sign(func(output)) === sign(func(start))) {\n            start = output;\n        } else {\n            end = output;\n        }\n    }\n\n    throw new Error(\"maximum number of iterations exceeded\");\n}\n\nexport default bisect;\n","import chiSquaredDistributionTable from \"./chi_squared_distribution_table.js\";\nimport mean from \"./mean.js\";\n\n/**\n * The [χ2 (Chi-Squared) Goodness-of-Fit Test](http://en.wikipedia.org/wiki/Goodness_of_fit#Pearson.27s_chi-squared_test)\n * uses a measure of goodness of fit which is the sum of differences between observed and expected outcome frequencies\n * (that is, counts of observations), each squared and divided by the number of observations expected given the\n * hypothesized distribution. The resulting χ2 statistic, `chiSquared`, can be compared to the chi-squared distribution\n * to determine the goodness of fit. In order to determine the degrees of freedom of the chi-squared distribution, one\n * takes the total number of observed frequencies and subtracts the number of estimated parameters. The test statistic\n * follows, approximately, a chi-square distribution with (k − c) degrees of freedom where `k` is the number of non-empty\n * cells and `c` is the number of estimated parameters for the distribution.\n *\n * @param {Array<number>} data\n * @param {Function} distributionType a function that returns a point in a distribution:\n * for instance, binomial, bernoulli, or poisson\n * @param {number} significance\n * @returns {number} chi squared goodness of fit\n * @example\n * // Data from Poisson goodness-of-fit example 10-19 in William W. Hines & Douglas C. Montgomery,\n * // \"Probability and Statistics in Engineering and Management Science\", Wiley (1980).\n * var data1019 = [\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n *     1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\n *     2, 2, 2, 2, 2, 2, 2, 2, 2,\n *     3, 3, 3, 3\n * ];\n * ss.chiSquaredGoodnessOfFit(data1019, ss.poissonDistribution, 0.05); //= false\n */\nfunction chiSquaredGoodnessOfFit(data, distributionType, significance) {\n    // Estimate from the sample data, a weighted mean.\n    const inputMean = mean(data);\n    // Calculated value of the χ2 statistic.\n    let chiSquared = 0;\n    // Number of hypothesized distribution parameters estimated, expected to be supplied in the distribution test.\n    // Lose one degree of freedom for estimating `lambda` from the sample data.\n    const c = 1;\n    // The hypothesized distribution.\n    // Generate the hypothesized distribution.\n    const hypothesizedDistribution = distributionType(inputMean);\n    const observedFrequencies = [];\n    const expectedFrequencies = [];\n\n    // Create an array holding a histogram from the sample data, of\n    // the form `{ value: numberOfOcurrences }`\n    for (let i = 0; i < data.length; i++) {\n        if (observedFrequencies[data[i]] === undefined) {\n            observedFrequencies[data[i]] = 0;\n        }\n        observedFrequencies[data[i]]++;\n    }\n\n    // The histogram we created might be sparse - there might be gaps\n    // between values. So we iterate through the histogram, making\n    // sure that instead of undefined, gaps have 0 values.\n    for (let i = 0; i < observedFrequencies.length; i++) {\n        if (observedFrequencies[i] === undefined) {\n            observedFrequencies[i] = 0;\n        }\n    }\n\n    // Create an array holding a histogram of expected data given the\n    // sample size and hypothesized distribution.\n    for (const k in hypothesizedDistribution) {\n        if (k in observedFrequencies) {\n            expectedFrequencies[+k] = hypothesizedDistribution[k] * data.length;\n        }\n    }\n\n    // Working backward through the expected frequencies, collapse classes\n    // if less than three observations are expected for a class.\n    // This transformation is applied to the observed frequencies as well.\n    for (let k = expectedFrequencies.length - 1; k >= 0; k--) {\n        if (expectedFrequencies[k] < 3) {\n            expectedFrequencies[k - 1] += expectedFrequencies[k];\n            expectedFrequencies.pop();\n\n            observedFrequencies[k - 1] += observedFrequencies[k];\n            observedFrequencies.pop();\n        }\n    }\n\n    // Iterate through the squared differences between observed & expected\n    // frequencies, accumulating the `chiSquared` statistic.\n    for (let k = 0; k < observedFrequencies.length; k++) {\n        chiSquared +=\n            Math.pow(observedFrequencies[k] - expectedFrequencies[k], 2) /\n            expectedFrequencies[k];\n    }\n\n    // Calculate degrees of freedom for this test and look it up in the\n    // `chiSquaredDistributionTable` in order to\n    // accept or reject the goodness-of-fit of the hypothesized distribution.\n    // Degrees of freedom, calculated as (number of class intervals -\n    // number of hypothesized distribution parameters estimated - 1)\n    const degreesOfFreedom = observedFrequencies.length - c - 1;\n    return (\n        chiSquaredDistributionTable[degreesOfFreedom][significance] < chiSquared\n    );\n}\n\nexport default chiSquaredGoodnessOfFit;\n","/**\n * Split an array into chunks of a specified size. This function\n * has the same behavior as [PHP's array_chunk](http://php.net/manual/en/function.array-chunk.php)\n * function, and thus will insert smaller-sized chunks at the end if\n * the input size is not divisible by the chunk size.\n *\n * `x` is expected to be an array, and `chunkSize` a number.\n * The `x` array can contain any kind of data.\n *\n * @param {Array} x a sample\n * @param {number} chunkSize size of each output array. must be a positive integer\n * @returns {Array<Array>} a chunked array\n * @throws {Error} if chunk size is less than 1 or not an integer\n * @example\n * chunk([1, 2, 3, 4, 5, 6], 2);\n * // => [[1, 2], [3, 4], [5, 6]]\n */\nfunction chunk(x, chunkSize) {\n    // a list of result chunks, as arrays in an array\n    const output = [];\n\n    // `chunkSize` must be zero or higher - otherwise the loop below,\n    // in which we call `start += chunkSize`, will loop infinitely.\n    // So, we'll detect and throw in that case to indicate\n    // invalid input.\n    if (chunkSize < 1) {\n        throw new Error(\"chunk size must be a positive number\");\n    }\n\n    if (Math.floor(chunkSize) !== chunkSize) {\n        throw new Error(\"chunk size must be an integer\");\n    }\n\n    // `start` is the index at which `.slice` will start selecting\n    // new array elements\n    for (let start = 0; start < x.length; start += chunkSize) {\n        // for each chunk, slice that part of the array and add it\n        // to the output. The `.slice` function does not change\n        // the original array.\n        output.push(x.slice(start, start + chunkSize));\n    }\n    return output;\n}\n\nexport default chunk;\n","import mean from \"./mean.js\";\nimport sampleStandardDeviation from \"./sample_standard_deviation.js\";\n\n/**\n * The`coefficient of variation`_ is the ratio of the standard deviation to the mean.\n * .._`coefficient of variation`: https://en.wikipedia.org/wiki/Coefficient_of_variation\n *\n *\n * @param {Array} x input\n * @returns {number} coefficient of variation\n * @example\n * coefficientOfVariation([1, 2, 3, 4]).toFixed(3); // => 0.516\n * coefficientOfVariation([1, 2, 3, 4, 5]).toFixed(3); // => 0.527\n * coefficientOfVariation([-1, 0, 1, 2, 3, 4]).toFixed(3); // => 1.247\n */\nfunction coefficientOfVariation(x) {\n    return sampleStandardDeviation(x) / mean(x);\n}\n\nexport default coefficientOfVariation;\n","/**\n * Implementation of Combinations\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * https://en.wikipedia.org/wiki/Combination\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinations([1, 2, 3], 2); // => [[1,2], [1,3], [2,3]]\n */\n\nfunction combinations(x, k) {\n    let i;\n    let subI;\n    const combinationList = [];\n    let subsetCombinations;\n    let next;\n\n    for (i = 0; i < x.length; i++) {\n        if (k === 1) {\n            combinationList.push([x[i]]);\n        } else {\n            subsetCombinations = combinations(x.slice(i + 1, x.length), k - 1);\n            for (subI = 0; subI < subsetCombinations.length; subI++) {\n                next = subsetCombinations[subI];\n                next.unshift(x[i]);\n                combinationList.push(next);\n            }\n        }\n    }\n    return combinationList;\n}\n\nexport default combinations;\n","/**\n * Implementation of [Combinations](https://en.wikipedia.org/wiki/Combination) with replacement\n * Combinations are unique subsets of a collection - in this case, k x from a collection at a time.\n * 'With replacement' means that a given element can be chosen multiple times.\n * Unlike permutation, order doesn't matter for combinations.\n *\n * @param {Array} x any type of data\n * @param {int} k the number of objects in each group (without replacement)\n * @returns {Array<Array>} array of permutations\n * @example\n * combinationsReplacement([1, 2], 2); // => [[1, 1], [1, 2], [2, 2]]\n */\nfunction combinationsReplacement(x, k) {\n    const combinationList = [];\n\n    for (let i = 0; i < x.length; i++) {\n        if (k === 1) {\n            // If we're requested to find only one element, we don't need\n            // to recurse: just push `x[i]` onto the list of combinations.\n            combinationList.push([x[i]]);\n        } else {\n            // Otherwise, recursively find combinations, given `k - 1`. Note that\n            // we request `k - 1`, so if you were looking for k=3 combinations, we're\n            // requesting k=2. This -1 gets reversed in the for loop right after this\n            // code, since we concatenate `x[i]` onto the selected combinations,\n            // bringing `k` back up to your requested level.\n            // This recursion may go many levels deep, since it only stops once\n            // k=1.\n            const subsetCombinations = combinationsReplacement(\n                x.slice(i, x.length),\n                k - 1\n            );\n\n            for (let j = 0; j < subsetCombinations.length; j++) {\n                combinationList.push([x[i]].concat(subsetCombinations[j]));\n            }\n        }\n    }\n\n    return combinationList;\n}\n\nexport default combinationsReplacement;\n","import combineMeans from \"./combine_means.js\";\n\n/**\n * When combining two lists of values for which one already knows the variances,\n * one does not have to necessary recompute the variance of the combined lists\n * in linear time. They can instead use this function to compute the combined\n * variance by providing the variance, mean & number of values of the first list\n * and the variance, mean & number of values of the second list.\n *\n * @since 3.0.0\n * @param {number} variance1 variance of the first list\n * @param {number} mean1 mean of the first list\n * @param {number} n1 number of items in the first list\n * @param {number} variance2 variance of the second list\n * @param {number} mean2 mean of the second list\n * @param {number} n2 number of items in the second list\n * @returns {number} the combined mean\n *\n * @example\n * combineVariances(14 / 3, 5, 3, 8 / 3, 4, 3); // => 47 / 12\n */\nfunction combineVariances(variance1, mean1, n1, variance2, mean2, n2) {\n    const newMean = combineMeans(mean1, n1, mean2, n2);\n\n    return (\n        (n1 * (variance1 + Math.pow(mean1 - newMean, 2)) +\n            n2 * (variance2 + Math.pow(mean2 - newMean, 2))) /\n        (n1 + n2)\n    );\n}\n\nexport default combineVariances;\n","/**\n * **[Logistic Cumulative Distribution Function](https://en.wikipedia.org/wiki/Logistic_distribution)**\n *\n * @param {number} x\n * @returns {number} cumulative standard logistic probability\n */\nfunction cumulativeStdLogisticProbability(x) {\n    return 1 / (Math.exp(-x) + 1);\n}\n\nexport default cumulativeStdLogisticProbability;\n","import standardNormalTable from \"./standard_normal_table.js\";\n\n/**\n * **[Cumulative Standard Normal Probability](http://en.wikipedia.org/wiki/Standard_normal_table)**\n *\n * Since probability tables cannot be\n * printed for every normal distribution, as there are an infinite variety\n * of normal distributions, it is common practice to convert a normal to a\n * standard normal and then use the standard normal table to find probabilities.\n *\n * You can use `.5 + .5 * errorFunction(x / Math.sqrt(2))` to calculate the probability\n * instead of looking it up in a table.\n *\n * @param {number} z\n * @returns {number} cumulative standard normal probability\n */\nfunction cumulativeStdNormalProbability(z) {\n    // Calculate the position of this value.\n    const absZ = Math.abs(z);\n    // Each row begins with a different\n    // significant digit: 0.5, 0.6, 0.7, and so on. Each value in the table\n    // corresponds to a range of 0.01 in the input values, so the value is\n    // multiplied by 100.\n    const index = Math.min(\n        Math.round(absZ * 100),\n        standardNormalTable.length - 1\n    );\n\n    // The index we calculate must be in the table as a positive value,\n    // but we still pay attention to whether the input is positive\n    // or negative, and flip the output value as a last step.\n    if (z >= 0) {\n        return standardNormalTable[index];\n    } else {\n        // due to floating-point arithmetic, values in the table with\n        // 4 significant figures can nevertheless end up as repeating\n        // fractions when they're computed here.\n        return +(1 - standardNormalTable[index]).toFixed(4);\n    }\n}\n\nexport default cumulativeStdNormalProbability;\n","import max from \"./max.js\";\nimport min from \"./min.js\";\n\n/**\n * Given an array of x, this will find the extent of the\n * x and return an array of breaks that can be used\n * to categorize the x into a number of classes. The\n * returned array will always be 1 longer than the number of\n * classes because it includes the minimum value.\n *\n * @param {Array<number>} x an array of number values\n * @param {number} nClasses number of desired classes\n * @returns {Array<number>} array of class break positions\n * @example\n * equalIntervalBreaks([1, 2, 3, 4, 5, 6], 4); // => [1, 2.25, 3.5, 4.75, 6]\n */\nfunction equalIntervalBreaks(x, nClasses) {\n    if (x.length < 2) {\n        return x;\n    }\n\n    const theMin = min(x);\n    const theMax = max(x);\n\n    // the first break will always be the minimum value\n    // in the xset\n    const breaks = [theMin];\n\n    // The size of each break is the full range of the x\n    // divided by the number of classes requested\n    const breakSize = (theMax - theMin) / nClasses;\n\n    // In the case of nClasses = 1, this loop won't run\n    // and the returned breaks will be [min, max]\n    for (let i = 1; i < nClasses; i++) {\n        breaks.push(breaks[0] + breakSize * i);\n    }\n\n    // the last break will always be the\n    // maximum.\n    breaks.push(theMax);\n\n    return breaks;\n}\n\nexport default equalIntervalBreaks;\n","/**\n * This computes the minimum & maximum number in an array.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {Array<number>} minimum & maximum value\n * @throws {Error} if the length of x is less than one\n * @example\n * extent([1, 2, 3, 4]);\n * // => [1, 4]\n */\nfunction extent(x) {\n    if (x.length === 0) {\n        throw new Error(\"extent requires at least one data point\");\n    }\n\n    let min = x[0];\n    let max = x[0];\n    for (let i = 1; i < x.length; i++) {\n        if (x[i] > max) {\n            max = x[i];\n        }\n        if (x[i] < min) {\n            min = x[i];\n        }\n    }\n    return [min, max];\n}\n\nexport default extent;\n","/**\n * The extent is the lowest & highest number in the array. With a sorted array,\n * the first element in the array is always the lowest while the last element is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {Array<number>} minimum & maximum value\n * @example\n * extentSorted([-100, -10, 1, 2, 5]); // => [-100, 5]\n */\nfunction extentSorted(x) {\n    return [x[0], x[x.length - 1]];\n}\n\nexport default extentSorted;\n","import factorial from \"./factorial.js\";\n\n/**\n * Compute the [gamma function](https://en.wikipedia.org/wiki/Gamma_function) of a value using Nemes' approximation.\n * The gamma of n is equivalent to (n-1)!, but unlike the factorial function, gamma is defined for all real n except zero\n * and negative integers (where NaN is returned). Note, the gamma function is also well-defined for complex numbers,\n * though this implementation currently does not handle complex numbers as input values.\n * Nemes' approximation is defined [here](https://arxiv.org/abs/1003.6020) as Theorem 2.2.\n * Negative values use [Euler's reflection formula](https://en.wikipedia.org/wiki/Gamma_function#Properties) for computation.\n *\n * @param {number} n Any real number except for zero and negative integers.\n * @returns {number} The gamma of the input value.\n *\n * @example\n * gamma(11.5); // 11899423.084037038\n * gamma(-11.5); // 2.29575810481609e-8\n * gamma(5); // 24\n */\nfunction gamma(n) {\n    if (Number.isInteger(n)) {\n        if (n <= 0) {\n            // gamma not defined for zero or negative integers\n            return NaN;\n        } else {\n            // use factorial for integer inputs\n            return factorial(n - 1);\n        }\n    }\n\n    // Decrement n, because approximation is defined for n - 1\n    n--;\n\n    if (n < 0) {\n        // Use Euler's reflection formula for negative inputs\n        // see:  https://en.wikipedia.org/wiki/Gamma_function#Properties\n        return Math.PI / (Math.sin(Math.PI * -n) * gamma(-n));\n    } else {\n        // Nemes' expansion approximation\n        const seriesCoefficient =\n            Math.pow(n / Math.E, n) * Math.sqrt(2 * Math.PI * (n + 1 / 6));\n\n        const seriesDenom = n + 1 / 4;\n\n        const seriesExpansion =\n            1 +\n            1 / 144 / Math.pow(seriesDenom, 2) -\n            1 / 12960 / Math.pow(seriesDenom, 3) -\n            257 / 207360 / Math.pow(seriesDenom, 4) -\n            52 / 2612736 / Math.pow(seriesDenom, 5) +\n            5741173 / 9405849600 / Math.pow(seriesDenom, 6) +\n            37529 / 18811699200 / Math.pow(seriesDenom, 7);\n\n        return seriesCoefficient * seriesExpansion;\n    }\n}\n\nexport default gamma;\n","/**\n * The [Geometric Mean](https://en.wikipedia.org/wiki/Geometric_mean) is\n * a mean function that is more useful for numbers in different\n * ranges.\n *\n * This is the nth root of the input numbers multiplied by each other.\n *\n * The geometric mean is often useful for\n * **[proportional growth](https://en.wikipedia.org/wiki/Geometric_mean#Proportional_growth)**: given\n * growth rates for multiple years, like _80%, 16.66% and 42.85%_, a simple\n * mean will incorrectly estimate an average growth rate, whereas a geometric\n * mean will correctly estimate a growth rate that, over those years,\n * will yield the same end value.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * var growthRates = [1.80, 1.166666, 1.428571];\n * var averageGrowth = ss.geometricMean(growthRates);\n * var averageGrowthRates = [averageGrowth, averageGrowth, averageGrowth];\n * var startingValue = 10;\n * var startingValueMean = 10;\n * growthRates.forEach(function(rate) {\n *   startingValue *= rate;\n * });\n * averageGrowthRates.forEach(function(rate) {\n *   startingValueMean *= rate;\n * });\n * startingValueMean === startingValue;\n */\nfunction geometricMean(x) {\n    if (x.length === 0) {\n        throw new Error(\"geometricMean requires at least one data point\");\n    }\n\n    // the starting value.\n    let value = 1;\n\n    for (let i = 0; i < x.length; i++) {\n        // the geometric mean is only valid for positive numbers\n        if (x[i] < 0) {\n            throw new Error(\n                \"geometricMean requires only non-negative numbers as input\"\n            );\n        }\n\n        // repeatedly multiply the value by each number\n        value *= x[i];\n    }\n\n    return Math.pow(value, 1 / x.length);\n}\n\nexport default geometricMean;\n","/**\n * The [Harmonic Mean](https://en.wikipedia.org/wiki/Harmonic_mean) is\n * a mean function typically used to find the average of rates.\n * This mean is calculated by taking the reciprocal of the arithmetic mean\n * of the reciprocals of the input numbers.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} harmonic mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n * @example\n * harmonicMean([2, 3]).toFixed(2) // => '2.40'\n */\nfunction harmonicMean(x) {\n    if (x.length === 0) {\n        throw new Error(\"harmonicMean requires at least one data point\");\n    }\n\n    let reciprocalSum = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        // the harmonic mean is only valid for positive numbers\n        if (x[i] <= 0) {\n            throw new Error(\n                \"harmonicMean requires only positive numbers as input\"\n            );\n        }\n\n        reciprocalSum += 1 / x[i];\n    }\n\n    // divide n by the reciprocal sum\n    return x.length / reciprocalSum;\n}\n\nexport default harmonicMean;\n","/**\n * [Simple linear regression](http://en.wikipedia.org/wiki/Simple_linear_regression)\n * is a simple way to find a fitted line\n * between a set of coordinates. This algorithm finds the slope and y-intercept of a regression line\n * using the least sum of squares.\n *\n * @param {Array<Array<number>>} data an array of two-element of arrays,\n * like `[[0, 1], [2, 3]]`\n * @returns {Object} object containing slope and intersect of regression line\n * @example\n * linearRegression([[0, 0], [1, 1]]); // => { m: 1, b: 0 }\n */\nfunction linearRegression(data) {\n    let m, b;\n\n    // Store data length in a local variable to reduce\n    // repeated object property lookups\n    const dataLength = data.length;\n\n    //if there's only one point, arbitrarily choose a slope of 0\n    //and a y-intercept of whatever the y of the initial point is\n    if (dataLength === 1) {\n        m = 0;\n        b = data[0][1];\n    } else {\n        // Initialize our sums and scope the `m` and `b`\n        // variables that define the line.\n        let sumX = 0,\n            sumY = 0,\n            sumXX = 0,\n            sumXY = 0;\n\n        // Use local variables to grab point values\n        // with minimal object property lookups\n        let point, x, y;\n\n        // Gather the sum of all x values, the sum of all\n        // y values, and the sum of x^2 and (x*y) for each\n        // value.\n        //\n        // In math notation, these would be SS_x, SS_y, SS_xx, and SS_xy\n        for (let i = 0; i < dataLength; i++) {\n            point = data[i];\n            x = point[0];\n            y = point[1];\n\n            sumX += x;\n            sumY += y;\n\n            sumXX += x * x;\n            sumXY += x * y;\n        }\n\n        // `m` is the slope of the regression line\n        m =\n            (dataLength * sumXY - sumX * sumY) /\n            (dataLength * sumXX - sumX * sumX);\n\n        // `b` is the y-intercept of the line.\n        b = sumY / dataLength - (m * sumX) / dataLength;\n    }\n\n    // Return both values as an object.\n    return {\n        m: m,\n        b: b\n    };\n}\n\nexport default linearRegression;\n","/**\n * Given the output of `linearRegression`: an object\n * with `m` and `b` values indicating slope and intercept,\n * respectively, generate a line function that translates\n * x values into y values.\n *\n * @param {Object} mb object with `m` and `b` members, representing\n * slope and intersect of desired line\n * @returns {Function} method that computes y-value at any given\n * x-value on the line.\n * @example\n * var l = linearRegressionLine(linearRegression([[0, 0], [1, 1]]));\n * l(0) // = 0\n * l(2) // = 2\n * linearRegressionLine({ b: 0, m: 1 })(1); // => 1\n * linearRegressionLine({ b: 1, m: 1 })(1); // => 2\n */\nfunction linearRegressionLine(mb /*: { b: number, m: number }*/) {\n    // Return a function that computes a `y` value for each\n    // x value it is given, based on the values of `b` and `a`\n    // that we just computed.\n    return function (x) {\n        return mb.b + mb.m * x;\n    };\n}\n\nexport default linearRegressionLine;\n","/**\n * The [log average](https://en.wikipedia.org/wiki/https://en.wikipedia.org/wiki/Geometric_mean#Relationship_with_logarithms)\n * is an equivalent way of computing the geometric mean of an array suitable for large or small products.\n *\n * It's found by calculating the average logarithm of the elements and exponentiating.\n *\n * @param {Array<number>} x sample of one or more data points\n * @returns {number} geometric mean\n * @throws {Error} if x is empty\n * @throws {Error} if x contains a negative number\n */\nfunction logAverage(x) {\n    if (x.length === 0) {\n        throw new Error(\"logAverage requires at least one data point\");\n    }\n\n    let value = 0;\n    for (let i = 0; i < x.length; i++) {\n        if (x[i] < 0) {\n            throw new Error(\n                \"logAverage requires only non-negative numbers as input\"\n            );\n        }\n        value += Math.log(x[i]);\n    }\n\n    return Math.exp(value / x.length);\n}\n\nexport default logAverage;\n","/**\n * The [Logit](https://en.wikipedia.org/wiki/Logit)\n * is the inverse of cumulativeStdLogisticProbability,\n * and is also known as the logistic quantile function.\n *\n * @param {number} p\n * @returns {number} logit\n */\nfunction logit(p) {\n    if (p <= 0 || p >= 1) {\n        throw new Error(\"p must be strictly between zero and one\");\n    }\n    return Math.log(p / (1 - p));\n}\n\nexport default logit;\n","/**\n * The maximum is the highest number in the array. With a sorted array,\n * the last element in the array is always the largest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} maximum value\n * @example\n * maxSorted([-100, -10, 1, 2, 5]); // => 5\n */\nfunction maxSorted(x) {\n    return x[x.length - 1];\n}\n\nexport default maxSorted;\n","import quantileSorted from \"./quantile_sorted.js\";\n\n/**\n * The [median](http://en.wikipedia.org/wiki/Median) is\n * the middle number of a list. This is often a good indicator of 'the middle'\n * when there are outliers that skew the `mean()` value.\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * The median isn't necessarily one of the elements in the list: the value\n * can be the average of two elements if the list has an even length\n * and the two central values are different.\n *\n * @param {Array<number>} sorted input\n * @returns {number} median value\n * @example\n * medianSorted([10, 2, 5, 100, 2, 1]); // => 52.5\n */\nfunction medianSorted(sorted) {\n    return quantileSorted(sorted, 0.5);\n}\n\nexport default medianSorted;\n","/**\n * The minimum is the lowest number in the array. With a sorted array,\n * the first element in the array is always the smallest, so this calculation\n * can be done in one step, or constant time.\n *\n * @param {Array<number>} x input\n * @returns {number} minimum value\n * @example\n * minSorted([-100, -10, 1, 2, 5]); // => -100\n */\nfunction minSorted(x) {\n    return x[0];\n}\n\nexport default minSorted;\n","import modeSorted from \"./mode_sorted.js\";\nimport numericSort from \"./numeric_sort.js\";\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * This runs in `O(n log(n))` because it needs to sort the array internally\n * before running an `O(n)` search to find the mode.\n *\n * @param {Array<number>} x input\n * @returns {number} mode\n * @example\n * mode([0, 0, 1]); // => 0\n */\nfunction mode(x) {\n    // Sorting the array lets us iterate through it below and be sure\n    // that every time we see a new number it's new and we'll never\n    // see the same number twice\n    return modeSorted(numericSort(x));\n}\n\nexport default mode;\n","/* globals Map: false */\n\n/**\n * The [mode](https://en.wikipedia.org/wiki/Mode_%28statistics%29) is the number\n * that appears in a list the highest number of times.\n * There can be multiple modes in a list: in the event of a tie, this\n * algorithm will return the most recently seen mode.\n *\n * modeFast uses a Map object to keep track of the mode, instead of the approach\n * used with `mode`, a sorted array. As a result, it is faster\n * than `mode` and supports any data type that can be compared with `==`.\n * It also requires a\n * [JavaScript environment with support for Map](https://kangax.github.io/compat-table/es6/#test-Map),\n * and will throw an error if Map is not available.\n *\n * This is a [measure of central tendency](https://en.wikipedia.org/wiki/Central_tendency):\n * a method of finding a typical or central value of a set of numbers.\n *\n * @param {Array<*>} x a sample of one or more data points\n * @returns {?*} mode\n * @throws {ReferenceError} if the JavaScript environment doesn't support Map\n * @throws {Error} if x is empty\n * @example\n * modeFast(['rabbits', 'rabbits', 'squirrels']); // => 'rabbits'\n */\nfunction modeFast(x) {\n    // This index will reflect the incidence of different values, indexing\n    // them like\n    // { value: count }\n    const index = new Map();\n\n    // A running `mode` and the number of times it has been encountered.\n    let mode;\n    let modeCount = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        let newCount = index.get(x[i]);\n        if (newCount === undefined) {\n            newCount = 1;\n        } else {\n            newCount++;\n        }\n        if (newCount > modeCount) {\n            mode = x[i];\n            modeCount = newCount;\n        }\n        index.set(x[i], newCount);\n    }\n\n    if (modeCount === 0) {\n        throw new Error(\"mode requires at last one data point\");\n    }\n\n    return mode;\n}\n\nexport default modeFast;\n","import mean from \"./mean.js\";\nimport shuffleInPlace from \"./shuffle_in_place.js\";\n\n/**\n * Conducts a [permutation test](https://en.wikipedia.org/wiki/Resampling_(statistics)#Permutation_tests)\n * to determine if two data sets are *significantly* different from each other, using\n * the difference of means between the groups as the test statistic.\n * The function allows for the following hypotheses:\n * - two_tail = Null hypothesis: the two distributions are equal.\n * - greater = Null hypothesis: observations from sampleX tend to be smaller than those from sampleY.\n * - less = Null hypothesis: observations from sampleX tend to be greater than those from sampleY.\n * [Learn more about one-tail vs two-tail tests.](https://en.wikipedia.org/wiki/One-_and_two-tailed_tests)\n *\n * @param {Array<number>} sampleX first dataset (e.g. treatment data)\n * @param {Array<number>} sampleY second dataset (e.g. control data)\n * @param {string} alternative alternative hypothesis, either 'two_sided' (default), 'greater', or 'less'\n * @param {number} k number of values in permutation distribution.\n * @param {Function} [randomSource=Math.random] an optional entropy source\n * @returns {number} p-value The probability of observing the difference between groups (as or more extreme than what we did), assuming the null hypothesis.\n *\n * @example\n * var control = [2, 5, 3, 6, 7, 2, 5];\n * var treatment = [20, 5, 13, 12, 7, 2, 2];\n * permutationTest(control, treatment); // ~0.1324\n */\nfunction permutationTest(sampleX, sampleY, alternative, k, randomSource) {\n    // Set default arguments\n    if (k === undefined) {\n        k = 10000;\n    }\n    if (alternative === undefined) {\n        alternative = \"two_side\";\n    }\n    if (\n        alternative !== \"two_side\" &&\n        alternative !== \"greater\" &&\n        alternative !== \"less\"\n    ) {\n        throw new Error(\n            \"`alternative` must be either 'two_side', 'greater', or 'less'.\"\n        );\n    }\n\n    // get means for each sample\n    const meanX = mean(sampleX);\n    const meanY = mean(sampleY);\n\n    // calculate initial test statistic. This will be our point of comparison with\n    // the generated test statistics.\n    const testStatistic = meanX - meanY;\n\n    // create test-statistic distribution\n    const testStatDsn = new Array(k);\n\n    // combine datsets so we can easily shuffle later\n    const allData = sampleX.concat(sampleY);\n    const midIndex = Math.floor(allData.length / 2);\n\n    for (let i = 0; i < k; i++) {\n        // 1. shuffle data assignments\n        shuffleInPlace(allData, randomSource);\n        const permLeft = allData.slice(0, midIndex);\n        const permRight = allData.slice(midIndex, allData.length);\n\n        // 2.re-calculate test statistic\n        const permTestStatistic = mean(permLeft) - mean(permRight);\n\n        // 3. store test statistic to build test statistic distribution\n        testStatDsn[i] = permTestStatistic;\n    }\n\n    // Calculate p-value depending on alternative\n    // For this test, we calculate the percentage of 'extreme' test statistics (subject to our hypothesis)\n    // more info on permutation test p-value calculations: https://onlinecourses.science.psu.edu/stat464/node/35\n    let numExtremeTStats = 0;\n    if (alternative === \"two_side\") {\n        for (let i = 0; i <= k; i++) {\n            if (Math.abs(testStatDsn[i]) >= Math.abs(testStatistic)) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else if (alternative === \"greater\") {\n        for (let i = 0; i <= k; i++) {\n            if (testStatDsn[i] >= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    } else {\n        // alternative === 'less'\n        for (let i = 0; i <= k; i++) {\n            if (testStatDsn[i] <= testStatistic) {\n                numExtremeTStats += 1;\n            }\n        }\n    }\n\n    return numExtremeTStats / k;\n}\n\nexport default permutationTest;\n","/**\n * Implementation of [Heap's Algorithm](https://en.wikipedia.org/wiki/Heap%27s_algorithm)\n * for generating permutations.\n *\n * @param {Array} elements any type of data\n * @returns {Array<Array>} array of permutations\n */\nfunction permutationsHeap(elements) {\n    const indexes = new Array(elements.length);\n    const permutations = [elements.slice()];\n\n    for (let i = 0; i < elements.length; i++) {\n        indexes[i] = 0;\n    }\n\n    for (let i = 0; i < elements.length; ) {\n        if (indexes[i] < i) {\n            // At odd indexes, swap from indexes[i] instead\n            // of from the beginning of the array\n            let swapFrom = 0;\n            if (i % 2 !== 0) {\n                swapFrom = indexes[i];\n            }\n\n            // swap between swapFrom and i, using\n            // a temporary variable as storage.\n            const temp = elements[swapFrom];\n            elements[swapFrom] = elements[i];\n            elements[i] = temp;\n\n            permutations.push(elements.slice());\n            indexes[i]++;\n            i = 0;\n        } else {\n            indexes[i] = 0;\n            i++;\n        }\n    }\n\n    return permutations;\n}\n\nexport default permutationsHeap;\n","import epsilon from \"./epsilon.js\";\n\n/**\n * The [Poisson Distribution](http://en.wikipedia.org/wiki/Poisson_distribution)\n * is a discrete probability distribution that expresses the probability\n * of a given number of events occurring in a fixed interval of time\n * and/or space if these events occur with a known average rate and\n * independently of the time since the last event.\n *\n * The Poisson Distribution is characterized by the strictly positive\n * mean arrival or occurrence rate, `λ`.\n *\n * @param {number} lambda location poisson distribution\n * @returns {number[]} values of poisson distribution at that point\n */\nfunction poissonDistribution(lambda) /*: ?number[] */ {\n    // Check that lambda is strictly positive\n    if (lambda <= 0) {\n        return undefined;\n    }\n\n    // our current place in the distribution\n    let x = 0;\n    // and we keep track of the current cumulative probability, in\n    // order to know when to stop calculating chances.\n    let cumulativeProbability = 0;\n    // the calculated cells to be returned\n    const cells = [];\n    let factorialX = 1;\n\n    // This algorithm iterates through each potential outcome,\n    // until the `cumulativeProbability` is very close to 1, at\n    // which point we've defined the vast majority of outcomes\n    do {\n        // a [probability mass function](https://en.wikipedia.org/wiki/Probability_mass_function)\n        cells[x] = (Math.exp(-lambda) * Math.pow(lambda, x)) / factorialX;\n        cumulativeProbability += cells[x];\n        x++;\n        factorialX *= x;\n        // when the cumulativeProbability is nearly 1, we've calculated\n        // the useful range of this distribution\n    } while (cumulativeProbability < 1 - epsilon);\n\n    return cells;\n}\n\nexport default poissonDistribution;\n","import epsilon from \"./epsilon.js\";\nimport inverseErrorFunction from \"./inverse_error_function.js\";\n\n/**\n * The [Probit](http://en.wikipedia.org/wiki/Probit)\n * is the inverse of cumulativeStdNormalProbability(),\n * and is also known as the normal quantile function.\n *\n * It returns the number of standard deviations from the mean\n * where the p'th quantile of values can be found in a normal distribution.\n * So, for example, probit(0.5 + 0.6827/2) ≈ 1 because 68.27% of values are\n * normally found within 1 standard deviation above or below the mean.\n *\n * @param {number} p\n * @returns {number} probit\n */\nfunction probit(p) {\n    if (p === 0) {\n        p = epsilon;\n    } else if (p >= 1) {\n        p = 1 - epsilon;\n    }\n    return Math.sqrt(2) * inverseErrorFunction(2 * p - 1);\n}\n\nexport default probit;\n","/**\n * The [product](https://en.wikipedia.org/wiki/Product_(mathematics)) of an array\n * is the result of multiplying all numbers together, starting using one as the multiplicative identity.\n *\n * This runs in `O(n)`, linear time, with respect to the length of the array.\n *\n * @param {Array<number>} x input\n * @return {number} product of all input numbers\n * @example\n * product([1, 2, 3, 4]); // => 24\n */\nfunction product(x) {\n    let value = 1;\n    for (let i = 0; i < x.length; i++) {\n        value *= x[i];\n    }\n    return value;\n}\n\nexport default product;\n","import numericSort from \"./numeric_sort.js\";\nimport quantileRankSorted from \"./quantile_rank_sorted.js\";\n\n/**\n * This function returns the quantile in which one would find the given value in\n * the given array. It will copy and sort your array before each run, so\n * if you know your array is already sorted, you should use `quantileRankSorted`\n * instead.\n *\n * @param {Array<number>} x input\n * @returns {number} value value\n * @example\n * quantileRank([4, 3, 1, 2], 3); // => 0.75\n * quantileRank([4, 3, 2, 3, 1], 3); // => 0.7\n * quantileRank([2, 4, 1, 3], 6); // => 1\n * quantileRank([5, 3, 1, 2, 3], 4); // => 0.8\n */\nfunction quantileRank(x, value) {\n    // Cloning and sorting the array\n    const sortedCopy = numericSort(x);\n\n    return quantileRankSorted(sortedCopy, value);\n}\n\nexport default quantileRank;\n","/**\n * The [R Squared](http://en.wikipedia.org/wiki/Coefficient_of_determination)\n * value of data compared with a function `f`\n * is the sum of the squared differences between the prediction\n * and the actual value.\n *\n * @param {Array<Array<number>>} x input data: this should be doubly-nested\n * @param {Function} func function called on `[i][0]` values within the dataset\n * @returns {number} r-squared value\n * @example\n * var samples = [[0, 0], [1, 1]];\n * var regressionLine = linearRegressionLine(linearRegression(samples));\n * rSquared(samples, regressionLine); // = 1 this line is a perfect fit\n */\nfunction rSquared(x, func) {\n    if (x.length < 2) {\n        return 1;\n    }\n\n    // Compute the average y value for the actual\n    // data set in order to compute the\n    // _total sum of squares_\n    let sum = 0;\n    for (let i = 0; i < x.length; i++) {\n        sum += x[i][1];\n    }\n    const average = sum / x.length;\n\n    // Compute the total sum of squares - the\n    // squared difference between each point\n    // and the average of all points.\n    let sumOfSquares = 0;\n    for (let j = 0; j < x.length; j++) {\n        sumOfSquares += Math.pow(average - x[j][1], 2);\n    }\n\n    // Finally estimate the error: the squared\n    // difference between the estimate and the actual data\n    // value at each point.\n    let err = 0;\n    for (let k = 0; k < x.length; k++) {\n        err += Math.pow(x[k][1] - func(x[k][0]), 2);\n    }\n\n    // As the error grows larger, its ratio to the\n    // sum of squares increases and the r squared\n    // value grows lower.\n    return 1 - err / sumOfSquares;\n}\n\nexport default rSquared;\n","import mean from \"./mean.js\";\n\n/**\n * [Kurtosis](http://en.wikipedia.org/wiki/Kurtosis) is\n * a measure of the heaviness of a distribution's tails relative to its\n * variance. The kurtosis value can be positive or negative, or even undefined.\n *\n * Implementation is based on Fisher's excess kurtosis definition and uses\n * unbiased moment estimators. This is the version found in Excel and available\n * in several statistical packages, including SAS and SciPy.\n *\n * @param {Array<number>} x a sample of 4 or more data points\n * @returns {number} sample kurtosis\n * @throws {Error} if x has length less than 4\n * @example\n * sampleKurtosis([1, 2, 2, 3, 5]); // => 1.4555765595463122\n */\nfunction sampleKurtosis(x) {\n    const n = x.length;\n\n    if (n < 4) {\n        throw new Error(\"sampleKurtosis requires at least four data points\");\n    }\n\n    const meanValue = mean(x);\n    let tempValue;\n    let secondCentralMoment = 0;\n    let fourthCentralMoment = 0;\n\n    for (let i = 0; i < n; i++) {\n        tempValue = x[i] - meanValue;\n        secondCentralMoment += tempValue * tempValue;\n        fourthCentralMoment += tempValue * tempValue * tempValue * tempValue;\n    }\n\n    return (\n        ((n - 1) / ((n - 2) * (n - 3))) *\n        ((n * (n + 1) * fourthCentralMoment) /\n            (secondCentralMoment * secondCentralMoment) -\n            3 * (n - 1))\n    );\n}\n\nexport default sampleKurtosis;\n","import sampleCorrelation from \"./sample_correlation.js\";\n\n/**\n * The [rank correlation](https://en.wikipedia.org/wiki/Rank_correlation) is\n * a measure of the strength of monotonic relationship between two arrays\n *\n * @param {Array<number>} x first input\n * @param {Array<number>} y second input\n * @returns {number} sample rank correlation\n */\nfunction sampleRankCorrelation(x, y) {\n    const xIndexes = x\n        .map((value, index) => [value, index])\n        .sort((a, b) => a[0] - b[0])\n        .map((pair) => pair[1]);\n    const yIndexes = y\n        .map((value, index) => [value, index])\n        .sort((a, b) => a[0] - b[0])\n        .map((pair) => pair[1]);\n\n    // At this step, we have an array of indexes\n    // that map from sorted numbers to their original indexes. We reverse\n    // that so that it is an array of the sorted destination index.\n    const xRanks = Array(xIndexes.length);\n    const yRanks = Array(xIndexes.length);\n    for (let i = 0; i < xIndexes.length; i++) {\n        xRanks[xIndexes[i]] = i;\n        yRanks[yIndexes[i]] = i;\n    }\n\n    return sampleCorrelation(xRanks, yRanks);\n}\n\nexport default sampleRankCorrelation;\n","import mean from \"./mean.js\";\n\n/**\n * [Skewness](http://en.wikipedia.org/wiki/Skewness) is\n * a measure of the extent to which a probability distribution of a\n * real-valued random variable \"leans\" to one side of the mean.\n * The skewness value can be positive or negative, or even undefined.\n *\n * Implementation is based on the adjusted Fisher-Pearson standardized\n * moment coefficient, which is the version found in Excel and several\n * statistical packages including Minitab, SAS and SPSS.\n *\n * @since 4.1.0\n * @param {Array<number>} x a sample of 3 or more data points\n * @returns {number} sample skewness\n * @throws {Error} if x has length less than 3\n * @example\n * sampleSkewness([2, 4, 6, 3, 1]); // => 0.590128656384365\n */\nfunction sampleSkewness(x) {\n    if (x.length < 3) {\n        throw new Error(\"sampleSkewness requires at least three data points\");\n    }\n\n    const meanValue = mean(x);\n    let tempValue;\n    let sumSquaredDeviations = 0;\n    let sumCubedDeviations = 0;\n\n    for (let i = 0; i < x.length; i++) {\n        tempValue = x[i] - meanValue;\n        sumSquaredDeviations += tempValue * tempValue;\n        sumCubedDeviations += tempValue * tempValue * tempValue;\n    }\n\n    // this is Bessels' Correction: an adjustment made to sample statistics\n    // that allows for the reduced degree of freedom entailed in calculating\n    // values from samples rather than complete populations.\n    const besselsCorrection = x.length - 1;\n\n    // Find the mean value of that list\n    const theSampleStandardDeviation = Math.sqrt(\n        sumSquaredDeviations / besselsCorrection\n    );\n\n    const n = x.length;\n    const cubedS = Math.pow(theSampleStandardDeviation, 3);\n\n    return (n * sumCubedDeviations) / ((n - 1) * (n - 2) * cubedS);\n}\n\nexport default sampleSkewness;\n","/**\n * Sampling with replacement is a type of sampling that allows the same\n * item to be picked out of a population more than once.\n *\n * @param {Array<*>} x an array of any kind of value\n * @param {number} n count of how many elements to take\n * @param {Function} [randomSource=Math.random] an optional entropy source that\n * returns numbers between 0 inclusive and 1 exclusive: the range [0, 1)\n * @return {Array} n sampled items from the population\n * @example\n * var values = [1, 2, 3, 4];\n * sampleWithReplacement(values, 2); // returns 2 random values, like [2, 4];\n */\nfunction sampleWithReplacement(x, n, randomSource) {\n    if (x.length === 0) {\n        return [];\n    }\n\n    // a custom random number source can be provided if you want to use\n    // a fixed seed or another random number generator, like\n    // [random-js](https://www.npmjs.org/package/random-js)\n    randomSource = randomSource || Math.random;\n\n    const length = x.length;\n    const sample = [];\n\n    for (let i = 0; i < n; i++) {\n        const index = Math.floor(randomSource() * length);\n\n        sample.push(x[index]);\n    }\n\n    return sample;\n}\n\nexport default sampleWithReplacement;\n","import max from \"./max.js\";\nimport silhouette from \"./silhouette.js\";\n\n/**\n * Calculate the [silhouette metric](https://en.wikipedia.org/wiki/Silhouette_(clustering))\n * for a set of N-dimensional points arranged in groups. The metric is the largest\n * individual silhouette value for the data.\n *\n * @param {Array<Array<number>>} points N-dimensional coordinates of points.\n * @param {Array<number>} labels Labels of points. This must be the same length as `points`,\n * and values must lie in [0..G-1], where G is the number of groups.\n * @return {number} The silhouette metric for the groupings.\n *\n * @example\n * silhouetteMetric([[0.25], [0.75]], [0, 0]); // => 1.0\n */\nfunction silhouetteMetric(points, labels) {\n    const values = silhouette(points, labels);\n    return max(values);\n}\n\nexport default silhouetteMetric;\n","/**\n * When removing a value from a list, one does not have to necessary\n * recompute the mean of the list in linear time. They can instead use\n * this function to compute the new mean by providing the current mean,\n * the number of elements in the list that produced it and the value to remove.\n *\n * @since 3.0.0\n * @param {number} mean current mean\n * @param {number} n number of items in the list\n * @param {number} value the value to remove\n * @returns {number} the new mean\n *\n * @example\n * subtractFromMean(20.5, 6, 53); // => 14\n */\nfunction subtractFromMean(mean, n, value) {\n    return (mean * n - value) / (n - 1);\n}\n\nexport default subtractFromMean;\n","import mean from \"./mean.js\";\nimport standardDeviation from \"./standard_deviation.js\";\n\n/**\n * This is to compute [a one-sample t-test](https://en.wikipedia.org/wiki/Student%27s_t-test#One-sample_t-test), comparing the mean\n * of a sample to a known value, x.\n *\n * in this case, we're trying to determine whether the\n * population mean is equal to the value that we know, which is `x`\n * here. Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * @param {Array<number>} x sample of one or more numbers\n * @param {number} expectedValue expected value of the population mean\n * @returns {number} value\n * @example\n * tTest([1, 2, 3, 4, 5, 6], 3.385).toFixed(2); // => '0.16'\n */\nfunction tTest(x, expectedValue) {\n    // The mean of the sample\n    const sampleMean = mean(x);\n\n    // The standard deviation of the sample\n    const sd = standardDeviation(x);\n\n    // Square root the length of the sample\n    const rootN = Math.sqrt(x.length);\n\n    // returning the t value\n    return (sampleMean - expectedValue) / (sd / rootN);\n}\n\nexport default tTest;\n","import mean from \"./mean.js\";\nimport sampleVariance from \"./sample_variance.js\";\n\n/**\n * This is to compute [two sample t-test](http://en.wikipedia.org/wiki/Student's_t-test).\n * Tests whether \"mean(X)-mean(Y) = difference\", (\n * in the most common case, we often have `difference == 0` to test if two samples\n * are likely to be taken from populations with the same mean value) with\n * no prior knowledge on standard deviations of both samples\n * other than the fact that they have the same standard deviation.\n *\n * Usually the results here are used to look up a\n * [p-value](http://en.wikipedia.org/wiki/P-value), which, for\n * a certain level of significance, will let you determine that the\n * null hypothesis can or cannot be rejected.\n *\n * `diff` can be omitted if it equals 0.\n *\n * [This is used to reject](https://en.wikipedia.org/wiki/Exclusion_of_the_null_hypothesis)\n * a null hypothesis that the two populations that have been sampled into\n * `sampleX` and `sampleY` are equal to each other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @param {number} [difference=0]\n * @returns {number|null} test result\n *\n * @example\n * tTestTwoSample([1, 2, 3, 4], [3, 4, 5, 6], 0); // => -2.1908902300206643\n */\nfunction tTestTwoSample(sampleX, sampleY, difference) {\n    const n = sampleX.length;\n    const m = sampleY.length;\n\n    // If either sample doesn't actually have any values, we can't\n    // compute this at all, so we return `null`.\n    if (!n || !m) {\n        return null;\n    }\n\n    // default difference (mu) is zero\n    if (!difference) {\n        difference = 0;\n    }\n\n    const meanX = mean(sampleX);\n    const meanY = mean(sampleY);\n    const sampleVarianceX = sampleVariance(sampleX);\n    const sampleVarianceY = sampleVariance(sampleY);\n\n    if (\n        typeof meanX === \"number\" &&\n        typeof meanY === \"number\" &&\n        typeof sampleVarianceX === \"number\" &&\n        typeof sampleVarianceY === \"number\"\n    ) {\n        const weightedVariance =\n            ((n - 1) * sampleVarianceX + (m - 1) * sampleVarianceY) /\n            (n + m - 2);\n\n        return (\n            (meanX - meanY - difference) /\n            Math.sqrt(weightedVariance * (1 / n + 1 / m))\n        );\n    }\n}\n\nexport default tTestTwoSample;\n","/**\n * This function calculates the Wilcoxon rank sum statistic for the first sample\n * with respect to the second. The Wilcoxon rank sum test is a non-parametric\n * alternative to the t-test which is equivalent to the\n * [Mann-Whitney U test](https://en.wikipedia.org/wiki/Mann%E2%80%93Whitney_U_test).\n * The statistic is calculated by pooling all the observations together, ranking them,\n * and then summing the ranks associated with one of the samples. If this rank sum is\n * sufficiently large or small we reject the hypothesis that the two samples come\n * from the same distribution in favor of the alternative that one is shifted with\n * respect to the other.\n *\n * @param {Array<number>} sampleX a sample as an array of numbers\n * @param {Array<number>} sampleY a sample as an array of numbers\n * @returns {number} rank sum for sampleX\n *\n * @example\n * wilcoxonRankSum([1, 4, 8], [9, 12, 15]); // => 6\n */\nfunction wilcoxonRankSum(sampleX, sampleY) {\n    if (!sampleX.length || !sampleY.length) {\n        throw new Error(\"Neither sample can be empty\");\n    }\n\n    const pooledSamples = sampleX\n        .map((x) => ({ label: \"x\", value: x }))\n        .concat(sampleY.map((y) => ({ label: \"y\", value: y })))\n        .sort((a, b) => a.value - b.value);\n\n    for (let rank = 0; rank < pooledSamples.length; rank++) {\n        pooledSamples[rank].rank = rank;\n    }\n\n    let tiedRanks = [pooledSamples[0].rank];\n    for (let i = 1; i < pooledSamples.length; i++) {\n        if (pooledSamples[i].value === pooledSamples[i - 1].value) {\n            tiedRanks.push(pooledSamples[i].rank);\n            if (i === pooledSamples.length - 1) {\n                replaceRanksInPlace(pooledSamples, tiedRanks);\n            }\n        } else if (tiedRanks.length > 1) {\n            replaceRanksInPlace(pooledSamples, tiedRanks);\n        } else {\n            tiedRanks = [pooledSamples[i].rank];\n        }\n    }\n\n    function replaceRanksInPlace(pooledSamples, tiedRanks) {\n        const average = (tiedRanks[0] + tiedRanks[tiedRanks.length - 1]) / 2;\n        for (let i = 0; i < tiedRanks.length; i++) {\n            pooledSamples[tiedRanks[i]].rank = average;\n        }\n    }\n\n    let rankSum = 0;\n\n    for (let i = 0; i < pooledSamples.length; i++) {\n        const sample = pooledSamples[i];\n        if (sample.label === \"x\") {\n            rankSum += sample.rank + 1;\n        }\n    }\n\n    return rankSum;\n}\n\nexport default wilcoxonRankSum;\n","/**\n * The [Z-Score, or Standard Score](http://en.wikipedia.org/wiki/Standard_score).\n *\n * The standard score is the number of standard deviations an observation\n * or datum is above or below the mean. Thus, a positive standard score\n * represents a datum above the mean, while a negative standard score\n * represents a datum below the mean. It is a dimensionless quantity\n * obtained by subtracting the population mean from an individual raw\n * score and then dividing the difference by the population standard\n * deviation.\n *\n * The z-score is only defined if one knows the population parameters;\n * if one only has a sample set, then the analogous computation with\n * sample mean and sample standard deviation yields the\n * Student's t-statistic.\n *\n * @param {number} x\n * @param {number} mean\n * @param {number} standardDeviation\n * @return {number} z score\n * @example\n * zScore(78, 80, 5); // => -0.4\n */\nfunction zScore(x, mean, standardDeviation) {\n    return (x - mean) / standardDeviation;\n}\n\nexport default zScore;\n"]},"metadata":{},"sourceType":"script"}
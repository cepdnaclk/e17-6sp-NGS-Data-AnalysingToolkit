{"ast":null,"code":"import _slicedToArray from \"C:/Users/USER/Documents/6 sem/6s-proj/argon/argon-dashboard-react-master/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\USER\\\\Documents\\\\6 sem\\\\6s-proj\\\\argon\\\\argon-dashboard-react-master\\\\src\\\\views\\\\examples\\\\Table.js\",\n    _this = this,\n    _s2 = $RefreshSig$();\n\nimport { useState, useCallback, useEffect, useRef } from \"react\"; // import \"./styles.css\";\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar createHeaders = function createHeaders(headers) {\n  var _s = $RefreshSig$();\n\n  return headers.map(_s(function (item) {\n    _s();\n\n    return {\n      text: item,\n      ref: useRef()\n    };\n  }, \"J9pzIsEOVEZ74gjFtMkCj+5Po7s=\"));\n};\n/*\r\n * Read the blog post here:\r\n * https://letsbuildui.dev/articles/resizable-tables-with-react-and-css-grid\r\n */\n\n\nvar Table = function Table(_ref) {\n  _s2();\n\n  var headers = _ref.headers,\n      minCellWidth = _ref.minCellWidth,\n      tableContent = _ref.tableContent;\n\n  var _useState = useState(\"auto\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      tableHeight = _useState2[0],\n      setTableHeight = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      activeIndex = _useState4[0],\n      setActiveIndex = _useState4[1];\n\n  var tableElement = useRef(null);\n  var columns = createHeaders(headers);\n  useEffect(function () {\n    setTableHeight(tableElement.current.offsetHeight);\n  }, []);\n\n  var mouseDown = function mouseDown(index) {\n    setActiveIndex(index);\n  };\n\n  var mouseMove = useCallback(function (e) {\n    var gridColumns = columns.map(function (col, i) {\n      if (i === activeIndex) {\n        var width = e.clientX - col.ref.current.offsetLeft;\n\n        if (width >= minCellWidth) {\n          return \"\".concat(width, \"px\");\n        }\n      }\n\n      return \"\".concat(col.ref.current.offsetWidth, \"px\");\n    });\n    tableElement.current.style.gridTemplateColumns = \"\".concat(gridColumns.join(\" \"));\n  }, [activeIndex, columns, minCellWidth]);\n  var removeListeners = useCallback(function () {\n    window.removeEventListener(\"mousemove\", mouseMove);\n    window.removeEventListener(\"mouseup\", removeListeners);\n  }, [mouseMove]);\n  var mouseUp = useCallback(function () {\n    setActiveIndex(null);\n    removeListeners();\n  }, [setActiveIndex, removeListeners]);\n  useEffect(function () {\n    if (activeIndex !== null) {\n      window.addEventListener(\"mousemove\", mouseMove);\n      window.addEventListener(\"mouseup\", mouseUp);\n    }\n\n    return function () {\n      removeListeners();\n    };\n  }, [activeIndex, mouseMove, mouseUp, removeListeners]); // Demo only\n\n  var resetTableCells = function resetTableCells() {\n    tableElement.current.style.gridTemplateColumns = \"\";\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"table-wrapper\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"resizeable-table\",\n        ref: tableElement,\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: columns.map(function (_ref2, i) {\n              var ref = _ref2.ref,\n                  text = _ref2.text;\n              return /*#__PURE__*/_jsxDEV(\"th\", {\n                ref: ref,\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  children: text\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 83,\n                  columnNumber: 19\n                }, _this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  style: {\n                    height: tableHeight\n                  },\n                  onMouseDown: function onMouseDown() {\n                    return mouseDown(i);\n                  },\n                  className: \"resize-handle \".concat(activeIndex === i ? \"active\" : \"idle\")\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 84,\n                  columnNumber: 19\n                }, _this)]\n              }, text, true, {\n                fileName: _jsxFileName,\n                lineNumber: 82,\n                columnNumber: 17\n              }, _this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 11\n        }, _this), tableContent]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetTableCells,\n      children: \"Reset\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, _this);\n};\n\n_s2(Table, \"+LLBJtuXSTFJCg7YQ9WHWDR8uGk=\");\n\n_c = Table;\nexport default Table;\n\nvar _c;\n\n$RefreshReg$(_c, \"Table\");","map":{"version":3,"sources":["C:/Users/USER/Documents/6 sem/6s-proj/argon/argon-dashboard-react-master/src/views/examples/Table.js"],"names":["useState","useCallback","useEffect","useRef","createHeaders","headers","map","item","text","ref","Table","minCellWidth","tableContent","tableHeight","setTableHeight","activeIndex","setActiveIndex","tableElement","columns","current","offsetHeight","mouseDown","index","mouseMove","e","gridColumns","col","i","width","clientX","offsetLeft","offsetWidth","style","gridTemplateColumns","join","removeListeners","window","removeEventListener","mouseUp","addEventListener","resetTableCells","height"],"mappings":"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","sourcesContent":["import { useState, useCallback, useEffect, useRef } from \"react\";\r\n// import \"./styles.css\";\r\n\r\nconst createHeaders = (headers) => {\r\n  return headers.map((item) => ({\r\n    text: item,\r\n    ref: useRef()\r\n  }));\r\n};\r\n\r\n/*\r\n * Read the blog post here:\r\n * https://letsbuildui.dev/articles/resizable-tables-with-react-and-css-grid\r\n */\r\nconst Table = ({ headers, minCellWidth, tableContent }) => {\r\n  const [tableHeight, setTableHeight] = useState(\"auto\");\r\n  const [activeIndex, setActiveIndex] = useState(null);\r\n  const tableElement = useRef(null);\r\n  const columns = createHeaders(headers);\r\n\r\n  useEffect(() => {\r\n    setTableHeight(tableElement.current.offsetHeight);\r\n  }, []);\r\n\r\n  const mouseDown = (index) => {\r\n    setActiveIndex(index);\r\n  };\r\n\r\n  const mouseMove = useCallback(\r\n    (e) => {\r\n      const gridColumns = columns.map((col, i) => {\r\n        if (i === activeIndex) {\r\n          const width = e.clientX - col.ref.current.offsetLeft;\r\n\r\n          if (width >= minCellWidth) {\r\n            return `${width}px`;\r\n          }\r\n        }\r\n        return `${col.ref.current.offsetWidth}px`;\r\n      });\r\n\r\n      tableElement.current.style.gridTemplateColumns = `${gridColumns.join(\r\n        \" \"\r\n      )}`;\r\n    },\r\n    [activeIndex, columns, minCellWidth]\r\n  );\r\n\r\n  const removeListeners = useCallback(() => {\r\n    window.removeEventListener(\"mousemove\", mouseMove);\r\n    window.removeEventListener(\"mouseup\", removeListeners);\r\n  }, [mouseMove]);\r\n\r\n  const mouseUp = useCallback(() => {\r\n    setActiveIndex(null);\r\n    removeListeners();\r\n  }, [setActiveIndex, removeListeners]);\r\n\r\n  useEffect(() => {\r\n    if (activeIndex !== null) {\r\n      window.addEventListener(\"mousemove\", mouseMove);\r\n      window.addEventListener(\"mouseup\", mouseUp);\r\n    }\r\n\r\n    return () => {\r\n      removeListeners();\r\n    };\r\n  }, [activeIndex, mouseMove, mouseUp, removeListeners]);\r\n\r\n  // Demo only\r\n  const resetTableCells = () => {\r\n    tableElement.current.style.gridTemplateColumns = \"\";\r\n  };\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"table-wrapper\">\r\n        <table className=\"resizeable-table\" ref={tableElement}>\r\n          <thead>\r\n            <tr>\r\n              {columns.map(({ ref, text }, i) => (\r\n                <th ref={ref} key={text}>\r\n                  <span>{text}</span>\r\n                  <div\r\n                    style={{ height: tableHeight }}\r\n                    onMouseDown={() => mouseDown(i)}\r\n                    className={`resize-handle ${\r\n                      activeIndex === i ? \"active\" : \"idle\"\r\n                    }`}\r\n                  />\r\n                </th>\r\n              ))}\r\n            </tr>\r\n          </thead>\r\n          {tableContent}\r\n        </table>\r\n      </div>\r\n      <button onClick={resetTableCells}>Reset</button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Table;\r\n"]},"metadata":{},"sourceType":"module"}